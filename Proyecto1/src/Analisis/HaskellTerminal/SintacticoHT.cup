package Analisis.HaskellTerminal;

import java_cup.runtime.Symbol;
import Extras.*;
import Analisis.*;
import Reportes.*;

parser code
{://Codigo visible

   public static Nodo raiz=new Nodo("raiz");
    public void syntax_error(Symbol s){
        TablaErrores.insertarError("Error Sintactico: "+s.value.toString()+" ",s.right,s.left);
        System.out.println(s.value.toString()+" Fila: " +s.right+", Columna: "+s.left);        
    }

    public void unrecovered_syntax_error(Symbol s){        
        TablaErrores.insertarError("Error Sintactico: "+s.value.toString()+" ",s.right,s.left);
        System.out.println(s.value.toString()+" Fila: " +s.right+", Columna: "+s.left);        
    }

:}

action code
{://Codigo de acciones
      
:}

terminal String mod, sqrt, pot, let, calcular, succ, decc, min, max, sum, product, revers, impr, par, asc, desc, length, concatenacion, suma, resta, mult, div, acceso;
terminal String  igual, dolar, corchetea, corchetec, llavea, llavec, num, id, coma, cadena,caracter, parentesisa, parentesisc,porcentaje;
nonterminal Nodo S, LISTA, VALLISTA, EXP, LPARLISTA, CALCULAR, SUCC, DECC, MIN, MAX, CONCAT,PARLISTA,OTRA, LVOTRA,VOTRA;
nonterminal Nodo ACCESO, OPLISTA, REVERS, IMPR, PAR, ASC, DESC, SUM, PRODUCT, OPLENGUAJE, ACC;
nonterminal Nodo LLAMADO, LPFUN, SENTENCIAS, VALFUN, LENGTH, OPLISTAEXP;

precedence left suma, resta;
precedence left mult, div, mod; 
precedence right pot,sqrt; 
precedence left concatenacion, acceso;

start with S;

S ::=   SENTENCIAS:sent
        {:
        System.out.println("Archivo finalizado");
        raiz=sent;
        :};

CALCULAR ::= dolar calcular EXP:exp dolar{:RESULT=Fabrica.crearNodoCalcular(exp);:};

LISTA ::=  dolar let id:id igual VALLISTA:val dolar{:RESULT = Fabrica.crearNodoLista(id,val);:};

VALLISTA ::=   CONCAT:concat{:RESULT = Fabrica.crearNodoAsigLista(Constante.concat,Constante.concat,concat);:}
                          | cadena:cadena 
                            {:                               
                                Nodo cad= Fabrica.crearNodoHoja(Constante.cadena,cadena,Constante.tcadena+"");
                                RESULT=Fabrica.crearNodoAsigLista(Constante.cadena,Constante.cadena,cad);
                            :}
                          | id:id
                            {:
                                Nodo identificador= Fabrica.crearNodoHoja(Constante.id,id+"");
                                RESULT = Fabrica.crearNodoAsigLista(Constante.id,Constante.id,identificador);
                            :}
                          | OPLISTA:oplista{:RESULT = oplista;:}
                          | corchetea LPARLISTA:lparlista corchetec{:RESULT = lparlista;:}
                          | LLAMADO:llamado{:RESULT = llamado;:};

LPARLISTA ::= LPARLISTA:lparlista coma PARLISTA:parlista{:RESULT = Fabrica.insertarAsigLista(lparlista,parlista);:}
                          | PARLISTA:parlista{:RESULT = Fabrica.crearNodoAsigLista(Constante.lasig,parlista.getValor(),parlista);:};
PARLISTA ::= CALCULAR:calc{:RESULT = calc;:}
                         | caracter:caracter {:RESULT = Fabrica.crearNodoHoja(Constante.caracter,caracter,Constante.tcaracter+"");:}
                         | OTRA:otra{:RESULT = otra;:};
OTRA::= corchetea LVOTRA:valotra corchetec{:RESULT = valotra;:};


LVOTRA ::= LVOTRA:lvotra coma VOTRA:votra{:RESULT = Fabrica.insertarAsigLista(lvotra,votra);:}
                    | VOTRA:votra{:RESULT = Fabrica.crearNodoAsigLista(Constante.asig,Constante.dim,votra);:};
VOTRA ::= CALCULAR:calc{:RESULT = calc;:}
                  | caracter:caracter {:RESULT = Fabrica.crearNodoHoja(Constante.caracter,caracter,Constante.tcaracter+"");:} ;

SUCC ::=    dolar succ VALFUN:valfun dolar{:RESULT = Fabrica.crearNodoFunHK(Constante.succ,valfun);:};

DECC ::=    dolar decc VALFUN:valfun dolar{:RESULT = Fabrica.crearNodoFunHK(Constante.decc,valfun);:};

MIN ::=     dolar min VALLISTA:valfun dolar{:RESULT = Fabrica.crearNodoFunHK(Constante.min,valfun);:};

MAX ::=    dolar max VALLISTA:valfun dolar{:RESULT = Fabrica.crearNodoFunHK(Constante.max,valfun);:};

VALFUN ::= CALCULAR:calc{:RESULT = calc;:}
                    | ACCESO:acceso{:RESULT = acceso;:}
                    | OPLISTAEXP:oplistaexp{:RESULT = oplistaexp; :}
                    | CONCAT:concat{:RESULT = concat;:}
                    | cadena:cadena {:RESULT=Fabrica.crearNodoHoja(Constante.cadena,cadena,Constante.tcadena+"");:}
                    | id:id{:RESULT = Fabrica.crearNodoHoja(Constante.id,id);:}
                    | OPLISTA:oplista{:RESULT = oplista;:}
                    | corchetea LPARLISTA:lparlista corchetec{:RESULT = lparlista;:}
                    | LLAMADO:llamado{:RESULT = llamado;:}
                    | OPLENGUAJE:oplenguaje{:RESULT = oplenguaje;:};

SUM ::= dolar sum VALLISTA:vallista dolar{:RESULT = Fabrica.crearNodoOpLista(Constante.sum,vallista);:};
PRODUCT ::= dolar product VALLISTA:vallista dolar{:RESULT = Fabrica.crearNodoOpLista(Constante.product,vallista);:};
REVERS ::= dolar revers VALLISTA:vallista dolar{:RESULT = Fabrica.crearNodoOpLista(Constante.revers,vallista);:};
IMPR::= dolar impr VALLISTA:vallista dolar{:RESULT = Fabrica.crearNodoOpLista(Constante.impr,vallista);:};
PAR ::= dolar par VALLISTA:vallista dolar{:RESULT = Fabrica.crearNodoOpLista(Constante.par,vallista);:};
ASC ::= dolar asc VALLISTA:vallista dolar{:RESULT = Fabrica.crearNodoOpLista(Constante.asc,vallista);:};
DESC ::= dolar desc VALLISTA:vallista dolar{:RESULT = Fabrica.crearNodoOpLista(Constante.desc,vallista);:};
LENGTH ::= dolar length VALLISTA:vallista dolar{:RESULT = Fabrica.crearNodoOpLista(Constante.length,vallista);:};

CONCAT ::= VALLISTA:op1 concatenacion VALLISTA:op2{:RESULT = Fabrica.crearNodoConcat(op1,op2);:};

ACCESO ::= dolar VALLISTA:vallista ACC:calcular dolar{:RESULT = Fabrica.crearNodoAcceso(vallista,calcular);:};

ACC ::= acceso CALCULAR:calcular{:RESULT = Fabrica.crearNodoAcc(calcular,null);:}
              | acceso CALCULAR:calcular1 acceso CALCULAR:calcular2{:RESULT = Fabrica.crearNodoAcc(calcular1,calcular2);:};

OPLISTA ::= REVERS:revers{:RESULT = revers;:}
                     | IMPR:impr{:RESULT = impr;:}
                     | PAR:par{:RESULT = par;:}
                     | ASC:asc{:RESULT = asc;:}
                     | DESC:desc{:RESULT = desc;:};

SENTENCIAS ::= LISTA:list {:RESULT = list;:}
                             | CALCULAR:calc{:RESULT = calc;:}
                             | SUCC:succ{:RESULT = succ;:}
                             | DECC:decc{:RESULT = decc;:}
                             | MIN:min{:RESULT = min;:}
                             | MAX:max{:RESULT = max;:}
                             | CONCAT:concat{:RESULT = concat;:}
                             | ACCESO:acceso{:RESULT = acceso;:}
                             | SUM:sum{:RESULT = sum;:}
                             | PRODUCT:product{:RESULT = product;:}
                             | REVERS:revers{:RESULT = revers;:}
                             | IMPR:impr{:RESULT = impr;:}
                             | PAR:par{:RESULT = par;:}
                             | ASC:asc{:RESULT = asc;:}
                             | DESC:desc{:RESULT = desc;:}
                             | LENGTH:length{:RESULT = length;:}
                             | LLAMADO:llamado{:RESULT = llamado;:}
                             | porcentaje{:RESULT = Fabrica.crearNodoHoja(Constante.porcentaje,Constante.porcentaje);:};

LLAMADO ::= dolar id:id llavea LPFUN:lparfun llavec dolar{:RESULT=Fabrica.crearNodoLlamado(id,lparfun);:};

LPFUN ::= LPFUN:lpar coma VALFUN:par{:RESULT=Fabrica.insertarPar(lpar,par);:}
                        | VALFUN:valfun {:RESULT=Fabrica.crearNodoLPAR(valfun);:}
                        | {:RESULT=Fabrica.crearNodoLPAR(null);:};

EXP ::= EXP:op1 suma EXP:op2{:RESULT=Fabrica.crearNodoOperacion(Constante.suma,op1,op2);:}
             | EXP:op1 resta EXP:op2 {:RESULT=Fabrica.crearNodoOperacion(Constante.resta,op1,op2);:}
             | EXP:op1 mult EXP:op2 {:RESULT=Fabrica.crearNodoOperacion(Constante.mult,op1,op2);:}             
             | EXP:op1 div EXP:op2 {:RESULT=Fabrica.crearNodoOperacion(Constante.div,op1,op2);:}             
             | EXP:op1 mod EXP:op2{:RESULT=Fabrica.crearNodoOperacion(Constante.mod,op1,op2);:}
             | EXP:op1 sqrt EXP:op2 {:RESULT=Fabrica.crearNodoOperacion(Constante.sqrt,op1,op2);:}
             | EXP:op1 pot EXP:op2 {:RESULT=Fabrica.crearNodoOperacion(Constante.pot,op1,op2);:}             
             | resta EXP:op1 {:RESULT=Fabrica.crearNodoOperacion(Constante.resta,op1);:}             
             | parentesisa EXP:exp parentesisc {:RESULT=exp;:}
             | CALCULAR:calc{:RESULT = calc;:}
             | SUCC:succ{:RESULT = succ;:}
             | DECC:decc{:RESULT = decc;:}
             | MIN:min{:RESULT = min;:}
             | MAX:max{:RESULT = max;:}
             | CONCAT:concat{:RESULT = concat;:}
             | ACCESO:acceso{:RESULT = acceso;:}   
             | SUM:sum{:RESULT = sum;:}
             | PRODUCT:product{:RESULT = product;:}
             | LENGTH:length{:RESULT = length;:}
             | LLAMADO:llamado{:RESULT = llamado;:}
             | num:num {:RESULT = Fabrica.crearNodoHoja(Constante.num,num,Constante.tdecimal+"");:}
             | caracter:caracter {:RESULT = Fabrica.crearNodoHoja(Constante.caracter,caracter,Constante.tcaracter+"");:}
             | id:id{:RESULT = Fabrica.crearNodoHoja(Constante.id,id);:}
             | porcentaje{:RESULT = Fabrica.crearNodoHoja(Constante.porcentaje,Constante.porcentaje);:};



OPLISTAEXP ::= SUM:sum{:RESULT = sum;:}
                              | PRODUCT:product{:RESULT = product;:}
                              | LENGTH:length{:RESULT = length;:};

OPLENGUAJE ::= SUCC:succ{:RESULT = succ;:}
                               | DECC:decc{:RESULT = decc;:}
                               | MIN:min{:RESULT = min;:}
                               | MAX:max{:RESULT = max;:};

















