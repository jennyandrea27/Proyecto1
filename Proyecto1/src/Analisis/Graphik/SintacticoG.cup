package Analisis.Graphik;

import java_cup.runtime.Symbol;
import Extras.*;
import Analisis.*;
import Reportes.*;

parser code
{://Codigo visible

    public void syntax_error(Symbol s){
        TablaErrores.insertarError("Error Sintactico: "+s.value.toString()+" ",s.right,s.left);
        System.out.println(s.value.toString()+" Fila: " +s.right+", Columna: "+s.left);
        HTML.mostrarErrores();
    }

    public void unrecovered_syntax_error(Symbol s){        
        TablaErrores.insertarError("Error Sintactico: "+s.value.toString()+" ",s.right,s.left);
        System.out.println(s.value.toString()+" Fila: " +s.right+", Columna: "+s.left);
        HTML.mostrarErrores();
    }

:}

action code
{://Codigo de acciones
      
:}
    
terminal String var, tentero, tcadena, tdecimal, tcaracter, tvacio, tbool, importar, gk, als, hereda, nuevo, retornar, llamar, inicio, incluirhk;                
terminal String seleccion, caso, defecto, para, mientras, hacer, continuar, terminar, graphikar, datos, columna, procesar, dondecada;               
terminal String imprimir, pregc, dospuntos, igual, llavea, llavec, masmas, menosmenos, suma, resta, mult, div, potencia, parentesisa, parentesisc;
terminal String mayor, menor, igualacion, distinto, o, y, xor, not, punto, corchetea, corchetec,  decimal, num, cadena, id,caracter;
terminal String mayorigual, menorigual, dondetodo, donde, llamarhk, si, sino, publico, protegido, privado,coma,verdadero, falso;

nonterminal Nodo S,LENCABEZADO, ENC, LALS, ASIGNACION, IMPORTAR, HEREDA, CUERPOALS,ALS,SENTENCIA;
nonterminal Nodo DECLARACION, TVAR, ASIG, VALASIG, ARR,  ASIGARR, EXP, LID, DECFUN, TFUN, DEC2,RETORNAR, SENTALS, POSTERIOR;
nonterminal Nodo PDECFUN, LLAMADO, LPFUN, INICIO, INCLUIR, IDL, SI, SINO, CUERPO, SELECCION, LCASO, CASO,DEFECTO,GRAPHIKAR;
nonterminal Nodo PARA, VARPARA, OPPARA, MIENTRAS,HACERMIENTRAS, DIM, LLLAVE,LLAVE,IMPRIMIR,ENCABEZADO;
nonterminal String OPREL,VISIBILIDAD,TVISIBILIDAD;
precedence left o;
precedence left xor;
precedence left y;
precedence right not;

precedence left mayor, menor, mayorigual,menorigual, distinto, igualacion;
precedence left suma, resta;
precedence left mult, div; 
precedence right potencia;
precedence right masmas, menosmenos;

start with S;

S ::=   ENC LALS
    {:
        System.out.println("Archivo finalizado");
        
    :};

TVISIBILIDAD::= privado
                             | publico
                             | protegido;
VISIBILIDAD ::=  dospuntos TVISIBILIDAD
                              |;
ASIGNACION ::= LID igual EXP
                               | LID ARR igual EXP;
ENC ::= LENCABEZADO
            |;
LENCABEZADO ::= LENCABEZADO ENCABEZADO
                            |ENCABEZADO;
ENCABEZADO ::= IMPORTAR
                                | INCLUIR;
IMPORTAR ::= importar id gk pregc;
LALS ::= LALS ALS
             | ALS;
ALS ::= als id HEREDA VISIBILIDAD llavea CUERPOALS llavec;
CUERPOALS ::= CUERPOALS SENTALS
                         | SENTALS;
SENTALS ::= DECFUN
                        | DECLARACION  pregc                      
                        | INICIO;
HEREDA ::= hereda id
                     |;
DECLARACION ::= var TVAR id VISIBILIDAD DEC2;
DEC2 ::= IDL
                | ASIG 
                |;
IDL ::= IDL coma id VISIBILIDAD
            | coma id VISIBILIDAD;
ASIG ::= igual VALASIG
              | ARR ASIGARR;              
ASIGARR ::= igual LLLAVE
                      | ;
LLLAVE ::= LLLAVE coma llavea LLAVE llavec
                     | llavea LLAVE llavec;                     
LLAVE ::= LLLAVE
                    | LPFUN;
VALASIG ::= EXP
                       | nuevo id parentesisa parentesisc ;
LID ::= LID punto id
                |  id  ;
DECFUN ::= TFUN id parentesisa PDECFUN parentesisc VISIBILIDAD llavea CUERPO llavec;
TVAR ::= tentero
                | tdecimal  
                | tcaracter
                | tcadena
                | tbool
                | id;
TFUN ::= TVAR
               | tvacio;
PDECFUN ::= PDECFUN coma TVAR id
                        | TVAR id
                        |;
RETORNAR ::= retornar EXP;
LLAMADO ::= llamar LID parentesisa LPFUN parentesisc
                         | llamarhk id parentesisa LPFUN parentesisc;
LPFUN ::= LPFUN coma EXP
                 | EXP
                 |;
INICIO ::= tvacio inicio parentesisa parentesisc llavea CUERPO llavec;
INCLUIR ::= incluirhk id pregc;
SI ::= si parentesisa EXP parentesisc llavea CUERPO llavec SINO;
SINO ::= sino llavea CUERPO llavec
             | ;
SELECCION ::= seleccion parentesisa LID parentesisc llavea LCASO DEFECTO llavec;
LCASO ::= LCASO CASO
                 | CASO;
CASO ::= caso EXP dospuntos CUERPO;
DEFECTO ::= defecto dospuntos CUERPO
                        |;
PARA ::= para parentesisa VARPARA dospuntos EXP dospuntos POSTERIOR parentesisc llavea CUERPO llavec;
VARPARA::= var TVAR id igual EXP  
                     | LID igual EXP;
POSTERIOR ::= LID OPPARA
                           |ASIGNACION;
OPPARA ::= masmas
                     | menosmenos;
MIENTRAS ::= mientras parentesisa EXP parentesisc llavea CUERPO llavec;
HACERMIENTRAS ::= hacer llavea CUERPO llavec mientras parentesisa EXP parentesisc;
ARR ::= ARR DIM
             | DIM;
DIM ::= corchetea EXP corchetec;
EXP ::= EXP:op1 suma EXP:op2{:RESULT=Fabrica.crearNodoOperacion(Constante.suma,op1,op2);:}
             | EXP:op1 resta EXP:op2 {:RESULT=Fabrica.crearNodoOperacion(Constante.resta,op1,op2);:}
             | EXP:op1 mult EXP:op2 {:RESULT=Fabrica.crearNodoOperacion(Constante.mult,op1,op2);:}             
             | EXP:op1 div EXP:op2 {:RESULT=Fabrica.crearNodoOperacion(Constante.div,op1,op2);:}                          
             | EXP:op1 potencia EXP:op2 {:RESULT=Fabrica.crearNodoOperacion(Constante.pot,op1,op2);:}             
             | EXP:op1 o EXP:op2 {:RESULT=Fabrica.crearNodoOperacion(Constante.o,op1,op2);:}   
             | EXP:op1 y EXP:op2 {:RESULT=Fabrica.crearNodoOperacion(Constante.y,op1,op2);:}   
             | EXP:op1 xor EXP:op2 {:RESULT=Fabrica.crearNodoOperacion(Constante.xor,op1,op2);:}   
             | EXP:op1 OPREL:oprel EXP:op2 {:RESULT=Fabrica.crearNodoOperacion(oprel,op1,op2);:}   
             | not EXP:op1 {:RESULT=Fabrica.crearNodoOperacion(Constante.not,op1);:}             
             | resta EXP:op1 {:RESULT=Fabrica.crearNodoOperacion(Constante.resta,op1);:}             
             | parentesisa EXP:exp parentesisc {:RESULT=exp;:}            
             | LLAMADO:llamado{:RESULT = llamado;:}
             | num:num {:RESULT = Fabrica.crearNodoHoja(num);:}
             | cadena:cadena {:RESULT = Fabrica.crearNodoHoja(cadena);:}
             | caracter:caracter {:RESULT = Fabrica.crearNodoHoja(caracter);:}
             | LID:lid{:RESULT = lid;:}
             | LID ARR
             | decimal:dec{:RESULT = Fabrica.crearNodoHoja(dec);:}
             | verdadero:verdadero {:RESULT = Fabrica.crearNodoHoja(verdadero);:}
             | falso:falso {:RESULT = Fabrica.crearNodoHoja(falso);:};

OPREL ::= mayor {:RESULT = Constante.mayor;:}
                    | menor{:RESULT = Constante.menor;:}
                    | mayorigual{:RESULT = Constante.mayorigual;:}
                    | menorigual{:RESULT = Constante.menorigual;:}
                    | igualacion{:RESULT = Constante.igualacion;:}
                    | distinto{:RESULT = Constante.distinto;:};

CUERPO ::= CUERPO SENTENCIA
                    | SENTENCIA;

SENTENCIA ::= ASIGNACION pregc
                          | DECLARACION pregc
                          | RETORNAR pregc
                          | LLAMADO pregc
                          | SI
                          | SELECCION
                          | PARA
                          | MIENTRAS
                          | HACERMIENTRAS
                          | IMPRIMIR
                          | GRAPHIKAR
                          | continuar pregc
                          | terminar pregc
                          | error pregc;

IMPRIMIR ::= imprimir parentesisa EXP parentesisc pregc;

GRAPHIKAR ::= graphikar parentesisa LID coma LID parentesisc pregc;
