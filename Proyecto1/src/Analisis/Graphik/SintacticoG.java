
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisis.Graphik;

import java_cup.runtime.Symbol;
import Extras.*;
import Analisis.*;
import Reportes.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoG extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TSGraphik.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoG() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoG(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoG(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\173\000\002\002\004\000\002\002\005\000\002\005" +
    "\004\000\002\005\002\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\002\000\002\007\006\000" +
    "\002\003\004\000\002\003\003\000\002\010\006\000\002" +
    "\004\004\000\002\004\003\000\002\013\011\000\002\012" +
    "\004\000\002\012\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\011\004\000" +
    "\002\011\002\000\002\015\010\000\002\027\003\000\002" +
    "\027\003\000\002\027\002\000\002\040\006\000\002\040" +
    "\005\000\002\017\004\000\002\017\004\000\002\022\004" +
    "\000\002\022\002\000\002\060\007\000\002\060\005\000" +
    "\002\061\003\000\002\061\003\000\002\056\005\000\002" +
    "\056\003\000\002\020\003\000\002\020\006\000\002\024" +
    "\005\000\002\024\003\000\002\025\013\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\026\003\000\002" +
    "\026\003\000\002\033\006\000\002\033\004\000\002\030" +
    "\004\000\002\034\007\000\002\034\007\000\002\035\005" +
    "\000\002\035\003\000\002\036\011\000\002\057\004\000" +
    "\002\057\003\000\002\037\006\000\002\041\012\000\002" +
    "\042\006\000\002\042\002\000\002\044\012\000\002\045" +
    "\004\000\002\045\003\000\002\046\006\000\002\047\005" +
    "\000\002\047\002\000\002\050\015\000\002\051\003\000" +
    "\002\051\005\000\002\032\004\000\002\052\003\000\002" +
    "\052\003\000\002\052\003\000\002\053\011\000\002\054" +
    "\012\000\002\021\004\000\002\021\003\000\002\055\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\004\000\002\023\004\000\002\023\005\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\063\003\000\002\063\003\000\002\063" +
    "\003\000\002\063\003\000\002\063\003\000\002\063\003" +
    "\000\002\043\004\000\002\043\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\004\000\002\014\004" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\373\000\004\013\006\001\002\000\004\002\375\001" +
    "\002\000\006\013\ufff7\023\ufff7\001\002\000\004\077\372" +
    "\001\002\000\006\013\006\023\010\001\002\000\004\077" +
    "\367\001\002\000\006\015\uffc4\023\uffc4\001\002\000\006" +
    "\013\ufff8\023\ufff8\001\002\000\006\015\016\023\010\001" +
    "\002\000\006\015\uffc5\023\uffc5\001\002\000\006\002\ufff4" +
    "\015\ufff4\001\002\000\004\077\021\001\002\000\006\002" +
    "\000\015\016\001\002\000\006\002\ufff5\015\ufff5\001\002" +
    "\000\010\016\023\044\uffeb\046\uffeb\001\002\000\006\044" +
    "\026\046\ufffe\001\002\000\004\077\024\001\002\000\006" +
    "\044\uffec\046\uffec\001\002\000\004\046\033\001\002\000" +
    "\022\043\ufffa\045\ufffa\046\ufffa\072\ufffa\110\032\111\030" +
    "\112\031\113\ufffa\001\002\000\014\043\uffff\045\uffff\046" +
    "\uffff\072\uffff\113\uffff\001\002\000\014\043\ufffc\045\ufffc" +
    "\046\ufffc\072\ufffc\113\ufffc\001\002\000\014\043\ufffd\045" +
    "\ufffd\046\ufffd\072\ufffd\113\ufffd\001\002\000\014\043\ufffb" +
    "\045\ufffb\046\ufffb\072\ufffb\113\ufffb\001\002\000\022\004" +
    "\053\005\045\006\040\007\044\010\052\011\035\012\036" +
    "\077\034\001\002\000\006\045\266\077\uffd0\001\002\000" +
    "\006\022\361\077\uffce\001\002\000\004\077\uffd1\001\002" +
    "\000\024\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011" +
    "\uffee\012\uffee\047\uffee\077\uffee\001\002\000\004\077\uffd2" +
    "\001\002\000\004\077\214\001\002\000\024\004\uffed\005" +
    "\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed\047\uffed" +
    "\077\uffed\001\002\000\024\004\ufff0\005\ufff0\006\ufff0\007" +
    "\ufff0\010\ufff0\011\ufff0\012\ufff0\047\ufff0\077\ufff0\001\002" +
    "\000\004\077\uffd4\001\002\000\004\077\uffd5\001\002\000" +
    "\024\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1" +
    "\012\ufff1\047\ufff1\077\ufff1\001\002\000\004\077\uffcf\001" +
    "\002\000\024\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef" +
    "\011\uffef\012\uffef\047\uffef\077\uffef\001\002\000\024\004" +
    "\053\005\045\006\040\007\044\010\052\011\035\012\036" +
    "\047\213\077\034\001\002\000\004\077\uffd3\001\002\000" +
    "\016\005\045\006\040\007\044\010\052\012\036\077\055" +
    "\001\002\000\004\077\056\001\002\000\004\077\uffd0\001" +
    "\002\000\014\043\ufffe\044\026\045\ufffe\072\ufffe\113\ufffe" +
    "\001\002\000\012\043\uffe7\045\061\072\060\113\063\001" +
    "\002\000\032\021\110\053\112\057\107\070\106\074\105" +
    "\075\111\076\103\077\116\100\114\105\117\114\115\115" +
    "\122\001\002\000\034\017\201\021\110\053\112\057\107" +
    "\070\106\074\105\075\111\076\103\077\116\100\114\105" +
    "\117\114\115\115\122\001\002\000\012\043\uffaf\045\uffaf" +
    "\060\uffaf\072\uffaf\001\002\000\004\077\175\001\002\000" +
    "\012\043\uffe1\045\074\060\uffe1\072\060\001\002\000\006" +
    "\043\uffe9\113\071\001\002\000\004\043\uffe8\001\002\000" +
    "\004\043\070\001\002\000\056\004\uffea\005\uffea\006\uffea" +
    "\007\uffea\010\uffea\011\uffea\012\uffea\020\uffea\021\uffea\025" +
    "\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea" +
    "\034\uffea\044\uffea\047\uffea\077\uffea\105\uffea\106\uffea\001" +
    "\002\000\004\077\072\001\002\000\010\043\ufffe\044\026" +
    "\113\ufffe\001\002\000\006\043\uffe6\113\uffe6\001\002\000" +
    "\004\046\077\001\002\000\012\043\uffb0\045\uffb0\060\uffb0" +
    "\072\uffb0\001\002\000\006\043\uffe3\060\uffe3\001\002\000" +
    "\034\021\110\046\077\053\112\057\107\070\106\074\105" +
    "\075\111\076\103\077\116\100\114\105\117\114\115\115" +
    "\122\001\002\000\010\043\uffe2\060\uffe2\113\101\001\002" +
    "\000\004\046\102\001\002\000\034\021\110\046\077\053" +
    "\112\057\107\070\106\074\105\075\111\076\103\077\116" +
    "\100\114\105\117\114\115\115\122\001\002\000\106\004" +
    "\uff9f\020\uff9f\021\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f" +
    "\031\uff9f\032\uff9f\033\uff9f\034\uff9f\043\uff9f\044\uff9f\047" +
    "\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f\056\uff9f\060\uff9f" +
    "\061\uff9f\062\uff9f\063\uff9f\064\uff9f\065\uff9f\066\uff9f\067" +
    "\uff9f\073\uff9f\077\uff9f\101\uff9f\102\uff9f\105\uff9f\106\uff9f" +
    "\113\uff9f\001\002\000\006\047\uffde\113\101\001\002\000" +
    "\106\004\uff9c\020\uff9c\021\uff9c\025\uff9c\026\uff9c\027\uff9c" +
    "\030\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c\043\uff9c\044" +
    "\uff9c\047\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c\056\uff9c" +
    "\060\uff9c\061\uff9c\062\uff9c\063\uff9c\064\uff9c\065\uff9c\066" +
    "\uff9c\067\uff9c\073\uff9c\077\uff9c\101\uff9c\102\uff9c\105\uff9c" +
    "\106\uff9c\113\uff9c\001\002\000\032\021\110\053\112\057" +
    "\107\070\106\074\105\075\111\076\103\077\116\100\114" +
    "\105\117\114\115\115\122\001\002\000\032\021\110\053" +
    "\112\057\107\070\106\074\105\075\111\076\103\077\116" +
    "\100\114\105\117\114\115\115\122\001\002\000\004\077" +
    "\164\001\002\000\106\004\uffa0\020\uffa0\021\uffa0\025\uffa0" +
    "\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\034" +
    "\uffa0\043\uffa0\044\uffa0\047\uffa0\052\uffa0\053\uffa0\054\uffa0" +
    "\055\uffa0\056\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0\064" +
    "\uffa0\065\uffa0\066\uffa0\067\uffa0\073\uffa0\077\uffa0\101\uffa0" +
    "\102\uffa0\105\uffa0\106\uffa0\113\uffa0\001\002\000\032\021" +
    "\110\053\112\057\107\070\106\074\105\075\111\076\103" +
    "\077\116\100\114\105\117\114\115\115\122\001\002\000" +
    "\044\047\uffc7\052\133\053\132\054\135\055\130\056\127" +
    "\060\uffc7\061\145\062\136\063\141\064\140\065\131\066" +
    "\142\067\137\101\134\102\144\113\uffc7\001\002\000\106" +
    "\004\uff9e\020\uff9e\021\uff9e\025\uff9e\026\uff9e\027\uff9e\030" +
    "\uff9e\031\uff9e\032\uff9e\033\uff9e\034\uff9e\043\uff9e\044\uff9e" +
    "\047\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e\056\uff9e\060" +
    "\uff9e\061\uff9e\062\uff9e\063\uff9e\064\uff9e\065\uff9e\066\uff9e" +
    "\067\uff9e\073\uff9e\077\uff9e\101\uff9e\102\uff9e\105\uff9e\106" +
    "\uff9e\113\uff9e\001\002\000\106\004\uff9b\020\uff9b\021\uff9b" +
    "\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b\033" +
    "\uff9b\034\uff9b\043\uff9b\044\uff9b\047\uff9b\052\uff9b\053\uff9b" +
    "\054\uff9b\055\uff9b\056\uff9b\060\uff9b\061\uff9b\062\uff9b\063" +
    "\uff9b\064\uff9b\065\uff9b\066\uff9b\067\uff9b\073\uff9b\077\uff9b" +
    "\101\uff9b\102\uff9b\105\uff9b\106\uff9b\113\uff9b\001\002\000" +
    "\106\004\uff9d\020\uff9d\021\uff9d\025\uff9d\026\uff9d\027\uff9d" +
    "\030\uff9d\031\uff9d\032\uff9d\033\uff9d\034\uff9d\043\uff9d\044" +
    "\uff9d\047\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d" +
    "\060\uff9d\061\uff9d\062\uff9d\063\uff9d\064\uff9d\065\uff9d\066" +
    "\uff9d\067\uff9d\073\uff9d\077\uff9d\101\uff9d\102\uff9d\105\uff9d" +
    "\106\uff9d\113\uff9d\001\002\000\004\077\157\001\002\000" +
    "\106\004\uffa1\020\uffa1\021\uffa1\025\uffa1\026\uffa1\027\uffa1" +
    "\030\uffa1\031\uffa1\032\uffa1\033\uffa1\034\uffa1\043\uffa1\044" +
    "\uffa1\047\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1\056\uffa1" +
    "\060\uffa1\061\uffa1\062\uffa1\063\uffa1\064\uffa1\065\uffa1\066" +
    "\uffa1\067\uffa1\073\uffa1\077\uffa1\101\uffa1\102\uffa1\105\uffa1" +
    "\106\uffa1\113\uffa1\001\002\000\006\047\uffdd\113\125\001" +
    "\002\000\106\004\uff9a\020\uff9a\021\uff9a\025\uff9a\026\uff9a" +
    "\027\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a\043" +
    "\uff9a\044\uff9a\047\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a" +
    "\056\uff9a\060\uff9a\061\uff9a\062\uff9a\063\uff9a\064\uff9a\065" +
    "\uff9a\066\uff9a\067\uff9a\073\uff9a\077\uff9a\101\uff9a\102\uff9a" +
    "\105\uff9a\106\uff9a\113\uff9a\001\002\000\004\047\124\001" +
    "\002\000\012\043\uffe0\047\uffe0\060\uffe0\113\uffe0\001\002" +
    "\000\032\021\110\053\112\057\107\070\106\074\105\075" +
    "\111\076\103\077\116\100\114\105\117\114\115\115\122" +
    "\001\002\000\044\047\uffc8\052\133\053\132\054\135\055" +
    "\130\056\127\060\uffc8\061\145\062\136\063\141\064\140" +
    "\065\131\066\142\067\137\101\134\102\144\113\uffc8\001" +
    "\002\000\032\021\110\053\112\057\107\070\106\074\105" +
    "\075\111\076\103\077\116\100\114\105\117\114\115\115" +
    "\122\001\002\000\032\021\110\053\112\057\107\070\106" +
    "\074\105\075\111\076\103\077\116\100\114\105\117\114" +
    "\115\115\122\001\002\000\032\021\110\053\112\057\107" +
    "\070\106\074\105\075\111\076\103\077\116\100\114\105" +
    "\117\114\115\115\122\001\002\000\032\021\110\053\112" +
    "\057\107\070\106\074\105\075\111\076\103\077\116\100" +
    "\114\105\117\114\115\115\122\001\002\000\032\021\110" +
    "\053\112\057\107\070\106\074\105\075\111\076\103\077" +
    "\116\100\114\105\117\114\115\115\122\001\002\000\032" +
    "\021\uff97\053\uff97\057\uff97\070\uff97\074\uff97\075\uff97\076" +
    "\uff97\077\uff97\100\uff97\105\uff97\114\uff97\115\uff97\001\002" +
    "\000\032\021\110\053\112\057\107\070\106\074\105\075" +
    "\111\076\103\077\116\100\114\105\117\114\115\115\122" +
    "\001\002\000\032\021\uff98\053\uff98\057\uff98\070\uff98\074" +
    "\uff98\075\uff98\076\uff98\077\uff98\100\uff98\105\uff98\114\uff98" +
    "\115\uff98\001\002\000\032\021\110\053\112\057\107\070" +
    "\106\074\105\075\111\076\103\077\116\100\114\105\117" +
    "\114\115\115\122\001\002\000\032\021\uff94\053\uff94\057" +
    "\uff94\070\uff94\074\uff94\075\uff94\076\uff94\077\uff94\100\uff94" +
    "\105\uff94\114\uff94\115\uff94\001\002\000\032\021\uff95\053" +
    "\uff95\057\uff95\070\uff95\074\uff95\075\uff95\076\uff95\077\uff95" +
    "\100\uff95\105\uff95\114\uff95\115\uff95\001\002\000\032\021" +
    "\110\053\112\057\107\070\106\074\105\075\111\076\103" +
    "\077\116\100\114\105\117\114\115\115\122\001\002\000" +
    "\032\021\110\053\112\057\107\070\106\074\105\075\111" +
    "\076\103\077\116\100\114\105\117\114\115\115\122\001" +
    "\002\000\032\021\uff96\053\uff96\057\uff96\070\uff96\074\uff96" +
    "\075\uff96\076\uff96\077\uff96\100\uff96\105\uff96\114\uff96\115" +
    "\uff96\001\002\000\032\021\uff99\053\uff99\057\uff99\070\uff99" +
    "\074\uff99\075\uff99\076\uff99\077\uff99\100\uff99\105\uff99\114" +
    "\uff99\115\uff99\001\002\000\106\004\uffa5\020\uffa5\021\uffa5" +
    "\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033" +
    "\uffa5\034\uffa5\043\uffa5\044\uffa5\047\uffa5\052\133\053\132" +
    "\054\135\055\130\056\127\060\uffa5\061\145\062\136\063" +
    "\141\064\140\065\131\066\142\067\137\073\uffa5\077\uffa5" +
    "\101\134\102\144\105\uffa5\106\uffa5\113\uffa5\001\002\000" +
    "\106\004\uffa7\020\uffa7\021\uffa7\025\uffa7\026\uffa7\027\uffa7" +
    "\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\043\uffa7\044" +
    "\uffa7\047\uffa7\052\133\053\132\054\135\055\130\056\127" +
    "\060\uffa7\061\145\062\136\063\141\064\140\065\uffa7\066" +
    "\uffa7\067\uffa7\073\uffa7\077\uffa7\101\134\102\144\105\uffa7" +
    "\106\uffa7\113\uffa7\001\002\000\106\004\uffa6\020\uffa6\021" +
    "\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6" +
    "\033\uffa6\034\uffa6\043\uffa6\044\uffa6\047\uffa6\052\133\053" +
    "\132\054\135\055\130\056\127\060\uffa6\061\145\062\136" +
    "\063\141\064\140\065\uffa6\066\142\067\uffa6\073\uffa6\077" +
    "\uffa6\101\134\102\144\105\uffa6\106\uffa6\113\uffa6\001\002" +
    "\000\106\004\uffab\020\uffab\021\uffab\025\uffab\026\uffab\027" +
    "\uffab\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab\043\uffab" +
    "\044\uffab\047\uffab\052\uffab\053\uffab\054\uffab\055\uffab\056" +
    "\127\060\uffab\061\uffab\062\uffab\063\uffab\064\uffab\065\uffab" +
    "\066\uffab\067\uffab\073\uffab\077\uffab\101\uffab\102\uffab\105" +
    "\uffab\106\uffab\113\uffab\001\002\000\106\004\uffad\020\uffad" +
    "\021\uffad\025\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032" +
    "\uffad\033\uffad\034\uffad\043\uffad\044\uffad\047\uffad\052\uffad" +
    "\053\uffad\054\135\055\130\056\127\060\uffad\061\uffad\062" +
    "\uffad\063\uffad\064\uffad\065\uffad\066\uffad\067\uffad\073\uffad" +
    "\077\uffad\101\uffad\102\uffad\105\uffad\106\uffad\113\uffad\001" +
    "\002\000\106\004\uffac\020\uffac\021\uffac\025\uffac\026\uffac" +
    "\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac\043" +
    "\uffac\044\uffac\047\uffac\052\uffac\053\uffac\054\135\055\130" +
    "\056\127\060\uffac\061\uffac\062\uffac\063\uffac\064\uffac\065" +
    "\uffac\066\uffac\067\uffac\073\uffac\077\uffac\101\uffac\102\uffac" +
    "\105\uffac\106\uffac\113\uffac\001\002\000\106\004\uffa8\020" +
    "\uffa8\021\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8" +
    "\032\uffa8\033\uffa8\034\uffa8\043\uffa8\044\uffa8\047\uffa8\052" +
    "\133\053\132\054\135\055\130\056\127\060\uffa8\061\145" +
    "\062\136\063\141\064\140\065\uffa8\066\142\067\137\073" +
    "\uffa8\077\uffa8\101\134\102\144\105\uffa8\106\uffa8\113\uffa8" +
    "\001\002\000\106\004\uffaa\020\uffaa\021\uffaa\025\uffaa\026" +
    "\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa" +
    "\043\uffaa\044\uffaa\047\uffaa\052\uffaa\053\uffaa\054\uffaa\055" +
    "\uffaa\056\127\060\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa" +
    "\065\uffaa\066\uffaa\067\uffaa\073\uffaa\077\uffaa\101\uffaa\102" +
    "\uffaa\105\uffaa\106\uffaa\113\uffaa\001\002\000\106\004\uffa9" +
    "\020\uffa9\021\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031" +
    "\uffa9\032\uffa9\033\uffa9\034\uffa9\043\uffa9\044\uffa9\047\uffa9" +
    "\052\uffa9\053\uffa9\054\uffa9\055\uffa9\056\127\060\uffa9\061" +
    "\uffa9\062\uffa9\063\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9" +
    "\073\uffa9\077\uffa9\101\uffa9\102\uffa9\105\uffa9\106\uffa9\113" +
    "\uffa9\001\002\000\004\057\160\001\002\000\032\021\110" +
    "\053\112\057\107\070\106\074\105\075\111\076\103\077" +
    "\116\100\114\105\117\114\115\115\122\001\002\000\006" +
    "\060\162\113\125\001\002\000\106\004\uffc9\020\uffc9\021" +
    "\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9" +
    "\033\uffc9\034\uffc9\043\uffc9\044\uffc9\047\uffc9\052\uffc9\053" +
    "\uffc9\054\uffc9\055\uffc9\056\uffc9\060\uffc9\061\uffc9\062\uffc9" +
    "\063\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9\073\uffc9\077" +
    "\uffc9\101\uffc9\102\uffc9\105\uffc9\106\uffc9\113\uffc9\001\002" +
    "\000\106\004\uffa3\020\uffa3\021\uffa3\025\uffa3\026\uffa3\027" +
    "\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3\043\uffa3" +
    "\044\uffa3\047\uffa3\052\uffa3\053\uffa3\054\135\055\130\056" +
    "\127\060\uffa3\061\uffa3\062\uffa3\063\uffa3\064\uffa3\065\uffa3" +
    "\066\uffa3\067\uffa3\073\uffa3\077\uffa3\101\uffa3\102\uffa3\105" +
    "\uffa3\106\uffa3\113\uffa3\001\002\000\004\057\165\001\002" +
    "\000\032\021\110\053\112\057\107\070\106\074\105\075" +
    "\111\076\103\077\116\100\114\105\117\114\115\115\122" +
    "\001\002\000\006\060\167\113\125\001\002\000\106\004" +
    "\uffca\020\uffca\021\uffca\025\uffca\026\uffca\027\uffca\030\uffca" +
    "\031\uffca\032\uffca\033\uffca\034\uffca\043\uffca\044\uffca\047" +
    "\uffca\052\uffca\053\uffca\054\uffca\055\uffca\056\uffca\060\uffca" +
    "\061\uffca\062\uffca\063\uffca\064\uffca\065\uffca\066\uffca\067" +
    "\uffca\073\uffca\077\uffca\101\uffca\102\uffca\105\uffca\106\uffca" +
    "\113\uffca\001\002\000\040\052\133\053\132\054\135\055" +
    "\130\056\127\060\171\061\145\062\136\063\141\064\140" +
    "\065\131\066\142\067\137\101\134\102\144\001\002\000" +
    "\106\004\uffa2\020\uffa2\021\uffa2\025\uffa2\026\uffa2\027\uffa2" +
    "\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2\043\uffa2\044" +
    "\uffa2\047\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2" +
    "\060\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2\065\uffa2\066" +
    "\uffa2\067\uffa2\073\uffa2\077\uffa2\101\uffa2\102\uffa2\105\uffa2" +
    "\106\uffa2\113\uffa2\001\002\000\106\004\uffa4\020\uffa4\021" +
    "\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4" +
    "\033\uffa4\034\uffa4\043\uffa4\044\uffa4\047\uffa4\052\133\053" +
    "\132\054\135\055\130\056\127\060\uffa4\061\145\062\136" +
    "\063\141\064\140\065\uffa4\066\uffa4\067\uffa4\073\uffa4\077" +
    "\uffa4\101\134\102\144\105\uffa4\106\uffa4\113\uffa4\001\002" +
    "\000\004\047\174\001\002\000\012\043\uffdf\047\uffdf\060" +
    "\uffdf\113\uffdf\001\002\000\010\043\ufffe\044\026\113\ufffe" +
    "\001\002\000\006\043\uffe5\113\uffe5\001\002\000\006\043" +
    "\uffe4\060\uffe4\001\002\000\042\043\uffda\052\133\053\132" +
    "\054\135\055\130\056\127\060\uffda\061\145\062\136\063" +
    "\141\064\140\065\131\066\142\067\137\101\134\102\144" +
    "\001\002\000\004\077\202\001\002\000\004\057\203\001" +
    "\002\000\004\060\204\001\002\000\006\043\uffd9\060\uffd9" +
    "\001\002\000\042\052\133\053\132\054\135\055\130\056" +
    "\127\061\145\062\136\063\141\064\140\065\131\066\142" +
    "\067\137\073\uffdb\101\134\102\144\113\uffdb\001\002\000" +
    "\006\073\210\113\207\001\002\000\032\021\110\053\112" +
    "\057\107\070\106\074\105\075\111\076\103\077\116\100" +
    "\114\105\117\114\115\115\122\001\002\000\012\043\uffae" +
    "\045\uffae\060\uffae\072\uffae\001\002\000\042\052\133\053" +
    "\132\054\135\055\130\056\127\061\145\062\136\063\141" +
    "\064\140\065\131\066\142\067\137\073\uffdc\101\134\102" +
    "\144\113\uffdc\001\002\000\024\004\ufff2\005\ufff2\006\ufff2" +
    "\007\ufff2\010\ufff2\011\ufff2\012\ufff2\047\ufff2\077\ufff2\001" +
    "\002\000\006\002\ufff3\015\ufff3\001\002\000\004\057\215" +
    "\001\002\000\016\005\045\006\040\007\044\010\052\012" +
    "\036\077\055\001\002\000\004\077\360\001\002\000\006" +
    "\060\221\113\220\001\002\000\016\005\045\006\040\007" +
    "\044\010\052\012\036\077\055\001\002\000\006\044\026" +
    "\046\ufffe\001\002\000\004\046\223\001\002\000\032\004" +
    "\053\020\237\021\110\025\235\030\224\031\231\032\232" +
    "\033\242\034\244\077\240\105\117\106\247\001\002\000" +
    "\004\057\333\001\002\000\034\004\053\020\237\021\110" +
    "\025\235\030\224\031\231\032\232\033\242\034\244\047" +
    "\332\077\240\105\117\106\247\001\002\000\040\004\uff8c" +
    "\020\uff8c\021\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c\031" +
    "\uff8c\032\uff8c\033\uff8c\034\uff8c\047\uff8c\077\uff8c\105\uff8c" +
    "\106\uff8c\001\002\000\040\004\uff92\020\uff92\021\uff92\025" +
    "\uff92\026\uff92\027\uff92\030\uff92\031\uff92\032\uff92\033\uff92" +
    "\034\uff92\047\uff92\077\uff92\105\uff92\106\uff92\001\002\000" +
    "\040\004\uff90\020\uff90\021\uff90\025\uff90\026\uff90\027\uff90" +
    "\030\uff90\031\uff90\032\uff90\033\uff90\034\uff90\047\uff90\077" +
    "\uff90\105\uff90\106\uff90\001\002\000\004\057\324\001\002" +
    "\000\004\046\315\001\002\000\040\004\uff8b\020\uff8b\021" +
    "\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b" +
    "\033\uff8b\034\uff8b\047\uff8b\077\uff8b\105\uff8b\106\uff8b\001" +
    "\002\000\040\004\uff89\020\uff89\021\uff89\025\uff89\026\uff89" +
    "\027\uff89\030\uff89\031\uff89\032\uff89\033\uff89\034\uff89\047" +
    "\uff89\077\uff89\105\uff89\106\uff89\001\002\000\004\057\272" +
    "\001\002\000\040\004\uff91\020\uff91\021\uff91\025\uff91\026" +
    "\uff91\027\uff91\030\uff91\031\uff91\032\uff91\033\uff91\034\uff91" +
    "\047\uff91\077\uff91\105\uff91\106\uff91\001\002\000\032\021" +
    "\110\053\112\057\107\070\106\074\105\075\111\076\103" +
    "\077\116\100\114\105\117\114\115\115\122\001\002\000" +
    "\004\045\266\001\002\000\040\004\uff8f\020\uff8f\021\uff8f" +
    "\025\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f\033" +
    "\uff8f\034\uff8f\047\uff8f\077\uff8f\105\uff8f\106\uff8f\001\002" +
    "\000\004\043\265\001\002\000\040\004\uff8d\020\uff8d\021" +
    "\uff8d\025\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\032\uff8d" +
    "\033\uff8d\034\uff8d\047\uff8d\077\uff8d\105\uff8d\106\uff8d\001" +
    "\002\000\004\043\264\001\002\000\040\004\uff8e\020\uff8e" +
    "\021\uff8e\025\uff8e\026\uff8e\027\uff8e\030\uff8e\031\uff8e\032" +
    "\uff8e\033\uff8e\034\uff8e\047\uff8e\077\uff8e\105\uff8e\106\uff8e" +
    "\001\002\000\040\004\uff8a\020\uff8a\021\uff8a\025\uff8a\026" +
    "\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a\034\uff8a" +
    "\047\uff8a\077\uff8a\105\uff8a\106\uff8a\001\002\000\004\057" +
    "\250\001\002\000\032\021\110\053\112\057\107\070\106" +
    "\074\105\075\111\076\103\077\116\100\114\105\117\114" +
    "\115\115\122\001\002\000\040\052\133\053\132\054\135" +
    "\055\130\056\127\060\252\061\145\062\136\063\141\064" +
    "\140\065\131\066\142\067\137\101\134\102\144\001\002" +
    "\000\004\046\253\001\002\000\032\004\053\020\237\021" +
    "\110\025\235\030\224\031\231\032\232\033\242\034\244" +
    "\077\240\105\117\106\247\001\002\000\034\004\053\020" +
    "\237\021\110\025\235\030\224\031\231\032\232\033\242" +
    "\034\244\047\256\077\240\105\117\106\247\001\002\000" +
    "\040\004\uff93\020\uff93\021\uff93\025\uff93\026\uff93\027\uff93" +
    "\030\uff93\031\uff93\032\uff93\033\uff93\034\uff93\047\uff93\077" +
    "\uff93\105\uff93\106\uff93\001\002\000\042\004\uffc0\020\uffc0" +
    "\021\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032" +
    "\uffc0\033\uffc0\034\uffc0\047\uffc0\077\uffc0\105\uffc0\106\uffc0" +
    "\107\257\001\002\000\004\046\261\001\002\000\040\004" +
    "\uffc2\020\uffc2\021\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2" +
    "\031\uffc2\032\uffc2\033\uffc2\034\uffc2\047\uffc2\077\uffc2\105" +
    "\uffc2\106\uffc2\001\002\000\032\004\053\020\237\021\110" +
    "\025\235\030\224\031\231\032\232\033\242\034\244\077" +
    "\240\105\117\106\247\001\002\000\034\004\053\020\237" +
    "\021\110\025\235\030\224\031\231\032\232\033\242\034" +
    "\244\047\263\077\240\105\117\106\247\001\002\000\040" +
    "\004\uffc1\020\uffc1\021\uffc1\025\uffc1\026\uffc1\027\uffc1\030" +
    "\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\047\uffc1\077\uffc1" +
    "\105\uffc1\106\uffc1\001\002\000\040\004\uff87\020\uff87\021" +
    "\uff87\025\uff87\026\uff87\027\uff87\030\uff87\031\uff87\032\uff87" +
    "\033\uff87\034\uff87\047\uff87\077\uff87\105\uff87\106\uff87\001" +
    "\002\000\040\004\uff88\020\uff88\021\uff88\025\uff88\026\uff88" +
    "\027\uff88\030\uff88\031\uff88\032\uff88\033\uff88\034\uff88\047" +
    "\uff88\077\uff88\105\uff88\106\uff88\001\002\000\032\021\110" +
    "\053\112\057\107\070\106\074\105\075\111\076\103\077" +
    "\116\100\114\105\117\114\115\115\122\001\002\000\040" +
    "\043\270\052\133\053\132\054\135\055\130\056\127\061" +
    "\145\062\136\063\141\064\140\065\131\066\142\067\137" +
    "\101\134\102\144\001\002\000\054\004\ufff9\005\ufff9\006" +
    "\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\020\ufff9\021\ufff9" +
    "\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9\033" +
    "\ufff9\034\ufff9\047\ufff9\077\ufff9\105\ufff9\106\ufff9\001\002" +
    "\000\074\004\uffcb\020\uffcb\021\uffcb\025\uffcb\026\uffcb\027" +
    "\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\047\uffcb" +
    "\052\133\053\132\054\135\055\130\056\127\061\145\062" +
    "\136\063\141\064\140\065\131\066\142\067\137\077\uffcb" +
    "\101\134\102\144\105\uffcb\106\uffcb\001\002\000\004\077" +
    "\274\001\002\000\006\060\276\071\275\001\002\000\016" +
    "\045\uffd7\050\uffd7\051\uffd7\060\uffd7\071\uffd7\072\uffd7\001" +
    "\002\000\004\077\314\001\002\000\004\046\277\001\002" +
    "\000\004\026\301\001\002\000\010\026\301\027\307\047" +
    "\uffba\001\002\000\002\001\002\000\010\026\uffbd\027\uffbd" +
    "\047\uffbd\001\002\000\004\044\304\001\002\000\032\004" +
    "\053\020\237\021\110\025\235\030\224\031\231\032\232" +
    "\033\242\034\244\077\240\105\117\106\247\001\002\000" +
    "\040\004\053\020\237\021\110\025\235\026\uffbc\027\uffbc" +
    "\030\224\031\231\032\232\033\242\034\244\047\uffbc\077" +
    "\240\105\117\106\247\001\002\000\004\047\313\001\002" +
    "\000\004\044\311\001\002\000\010\026\uffbe\027\uffbe\047" +
    "\uffbe\001\002\000\032\004\053\020\237\021\110\025\235" +
    "\030\224\031\231\032\232\033\242\034\244\077\240\105" +
    "\117\106\247\001\002\000\034\004\053\020\237\021\110" +
    "\025\235\030\224\031\231\032\232\033\242\034\244\047" +
    "\uffbb\077\240\105\117\106\247\001\002\000\040\004\uffbf" +
    "\020\uffbf\021\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031" +
    "\uffbf\032\uffbf\033\uffbf\034\uffbf\047\uffbf\077\uffbf\105\uffbf" +
    "\106\uffbf\001\002\000\016\045\uffd8\050\uffd8\051\uffd8\060" +
    "\uffd8\071\uffd8\072\uffd8\001\002\000\032\004\053\020\237" +
    "\021\110\025\235\030\224\031\231\032\232\033\242\034" +
    "\244\077\240\105\117\106\247\001\002\000\034\004\053" +
    "\020\237\021\110\025\235\030\224\031\231\032\232\033" +
    "\242\034\244\047\317\077\240\105\117\106\247\001\002" +
    "\000\004\031\320\001\002\000\004\057\321\001\002\000" +
    "\032\021\110\053\112\057\107\070\106\074\105\075\111" +
    "\076\103\077\116\100\114\105\117\114\115\115\122\001" +
    "\002\000\040\052\133\053\132\054\135\055\130\056\127" +
    "\060\323\061\145\062\136\063\141\064\140\065\131\066" +
    "\142\067\137\101\134\102\144\001\002\000\040\004\uffb1" +
    "\020\uffb1\021\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031" +
    "\uffb1\032\uffb1\033\uffb1\034\uffb1\047\uffb1\077\uffb1\105\uffb1" +
    "\106\uffb1\001\002\000\032\021\110\053\112\057\107\070" +
    "\106\074\105\075\111\076\103\077\116\100\114\105\117" +
    "\114\115\115\122\001\002\000\040\052\133\053\132\054" +
    "\135\055\130\056\127\060\326\061\145\062\136\063\141" +
    "\064\140\065\131\066\142\067\137\101\134\102\144\001" +
    "\002\000\004\046\327\001\002\000\032\004\053\020\237" +
    "\021\110\025\235\030\224\031\231\032\232\033\242\034" +
    "\244\077\240\105\117\106\247\001\002\000\034\004\053" +
    "\020\237\021\110\025\235\030\224\031\231\032\232\033" +
    "\242\034\244\047\331\077\240\105\117\106\247\001\002" +
    "\000\040\004\uffb2\020\uffb2\021\uffb2\025\uffb2\026\uffb2\027" +
    "\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\047\uffb2" +
    "\077\uffb2\105\uffb2\106\uffb2\001\002\000\024\004\uffd6\005" +
    "\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\047\uffd6" +
    "\077\uffd6\001\002\000\006\004\053\077\274\001\002\000" +
    "\004\044\uffb8\001\002\000\006\045\354\071\275\001\002" +
    "\000\004\044\337\001\002\000\032\021\110\053\112\057" +
    "\107\070\106\074\105\075\111\076\103\077\116\100\114" +
    "\105\117\114\115\115\122\001\002\000\040\044\341\052" +
    "\133\053\132\054\135\055\130\056\127\061\145\062\136" +
    "\063\141\064\140\065\131\066\142\067\137\101\134\102" +
    "\144\001\002\000\004\077\274\001\002\000\014\045\061" +
    "\050\353\051\352\071\275\072\060\001\002\000\004\060" +
    "\344\001\002\000\004\046\345\001\002\000\032\004\053" +
    "\020\237\021\110\025\235\030\224\031\231\032\232\033" +
    "\242\034\244\077\240\105\117\106\247\001\002\000\034" +
    "\004\053\020\237\021\110\025\235\030\224\031\231\032" +
    "\232\033\242\034\244\047\347\077\240\105\117\106\247" +
    "\001\002\000\040\004\uffb9\020\uffb9\021\uffb9\025\uffb9\026" +
    "\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9" +
    "\047\uffb9\077\uffb9\105\uffb9\106\uffb9\001\002\000\004\060" +
    "\uffb6\001\002\000\004\060\uffb3\001\002\000\004\060\uffb4" +
    "\001\002\000\004\060\uffb5\001\002\000\032\021\110\053" +
    "\112\057\107\070\106\074\105\075\111\076\103\077\116" +
    "\100\114\105\117\114\115\115\122\001\002\000\040\044" +
    "\uffb7\052\133\053\132\054\135\055\130\056\127\061\145" +
    "\062\136\063\141\064\140\065\131\066\142\067\137\101" +
    "\134\102\144\001\002\000\004\077\357\001\002\000\006" +
    "\060\uffcd\113\uffcd\001\002\000\006\060\uffcc\113\uffcc\001" +
    "\002\000\004\057\362\001\002\000\004\060\363\001\002" +
    "\000\004\046\364\001\002\000\032\004\053\020\237\021" +
    "\110\025\235\030\224\031\231\032\232\033\242\034\244" +
    "\077\240\105\117\106\247\001\002\000\034\004\053\020" +
    "\237\021\110\025\235\030\224\031\231\032\232\033\242" +
    "\034\244\047\366\077\240\105\117\106\247\001\002\000" +
    "\024\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6" +
    "\012\uffc6\047\uffc6\077\uffc6\001\002\000\004\024\370\001" +
    "\002\000\004\043\371\001\002\000\006\015\uffc3\023\uffc3" +
    "\001\002\000\004\014\373\001\002\000\004\043\374\001" +
    "\002\000\006\013\ufff6\023\ufff6\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\373\000\010\002\003\003\006\010\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\011\037\010\057\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\016\013\014" +
    "\037\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\017\001\001\000\002\001\001" +
    "\000\004\011\021\001\001\000\004\005\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\007\047\012\050" +
    "\015\036\016\046\025\042\026\040\031\045\036\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\007\047\015\036\016\046\025\042\026\040" +
    "\031\211\036\041\001\001\000\002\001\001\000\004\016" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\056\001\001\000\014\017\065\021\063\027\066\040" +
    "\064\055\061\001\001\000\010\023\204\034\117\056\205" +
    "\001\001\000\010\020\176\023\177\034\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\022\075\055\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\072" +
    "\001\001\000\002\001\001\000\004\060\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\023\112\034\117" +
    "\035\120\060\103\061\172\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\023\112\034\117\035\120\060\103" +
    "\061\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\171\034\117\001\001\000\006" +
    "\023\167\034\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\023\162\034\117\001\001\000\004\063\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\023\125\034\117\001\001\000\004\063\142\001\001" +
    "\000\006\023\155\034\117\001\001\000\006\023\154\034" +
    "\117\001\001\000\006\023\153\034\117\001\001\000\006" +
    "\023\152\034\117\001\001\000\006\023\151\034\117\001" +
    "\001\000\002\001\001\000\006\023\150\034\117\001\001" +
    "\000\002\001\001\000\006\023\147\034\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\023\146\034\117" +
    "\001\001\000\006\023\145\034\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\063\142\001\001\000\004" +
    "\063\142\001\001\000\004\063\142\001\001\000\004\063" +
    "\142\001\001\000\004\063\142\001\001\000\004\063\142" +
    "\001\001\000\004\063\142\001\001\000\004\063\142\001" +
    "\001\000\004\063\142\001\001\000\002\001\001\000\010" +
    "\023\112\034\117\035\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\063\142\001\001\000\002\001\001" +
    "\000\010\023\112\034\117\035\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\063\142\001\001\000\002" +
    "\001\001\000\004\063\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\175\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\063\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\063\142\001\001\000\002\001\001\000\006\023" +
    "\210\034\117\001\001\000\002\001\001\000\004\063\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\215\033\216\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\355\001\001\000\004\005" +
    "\221\001\001\000\002\001\001\000\030\007\235\014\226" +
    "\015\227\030\240\034\244\041\242\043\224\044\225\050" +
    "\232\053\245\054\233\001\001\000\002\001\001\000\026" +
    "\007\235\014\254\015\227\030\240\034\244\041\242\044" +
    "\225\050\232\053\245\054\233\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\023\270\034\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\023\250\034\117" +
    "\001\001\000\004\063\142\001\001\000\002\001\001\000" +
    "\030\007\235\014\226\015\227\030\240\034\244\041\242" +
    "\043\253\044\225\050\232\053\245\054\233\001\001\000" +
    "\026\007\235\014\254\015\227\030\240\034\244\041\242" +
    "\044\225\050\232\053\245\054\233\001\001\000\002\001" +
    "\001\000\004\042\257\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\007\235\014\226\015\227\030\240\034" +
    "\244\041\242\043\261\044\225\050\232\053\245\054\233" +
    "\001\001\000\026\007\235\014\254\015\227\030\240\034" +
    "\244\041\242\044\225\050\232\053\245\054\233\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\023\266\034\117\001\001\000\004\063\142\001\001" +
    "\000\002\001\001\000\004\063\142\001\001\000\004\024" +
    "\272\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\045\277\046\301\001" +
    "\001\000\006\046\307\047\305\001\001\000\004\062\302" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\007" +
    "\235\014\226\015\227\030\240\034\244\041\242\043\304" +
    "\044\225\050\232\053\245\054\233\001\001\000\026\007" +
    "\235\014\254\015\227\030\240\034\244\041\242\044\225" +
    "\050\232\053\245\054\233\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\007\235\014\226" +
    "\015\227\030\240\034\244\041\242\043\311\044\225\050" +
    "\232\053\245\054\233\001\001\000\026\007\235\014\254" +
    "\015\227\030\240\034\244\041\242\044\225\050\232\053" +
    "\245\054\233\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\007\235\014\226\015\227\030\240\034\244\041" +
    "\242\043\315\044\225\050\232\053\245\054\233\001\001" +
    "\000\026\007\235\014\254\015\227\030\240\034\244\041" +
    "\242\044\225\050\232\053\245\054\233\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\023\321\034\117\001" +
    "\001\000\004\063\142\001\001\000\002\001\001\000\006" +
    "\023\324\034\117\001\001\000\004\063\142\001\001\000" +
    "\002\001\001\000\030\007\235\014\226\015\227\030\240" +
    "\034\244\041\242\043\327\044\225\050\232\053\245\054" +
    "\233\001\001\000\026\007\235\014\254\015\227\030\240" +
    "\034\244\041\242\044\225\050\232\053\245\054\233\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\015\333" +
    "\024\334\051\335\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\023\337\034\117\001\001" +
    "\000\004\063\142\001\001\000\006\024\341\032\342\001" +
    "\001\000\012\017\350\021\063\052\347\055\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\007\235\014" +
    "\226\015\227\030\240\034\244\041\242\043\345\044\225" +
    "\050\232\053\245\054\233\001\001\000\026\007\235\014" +
    "\254\015\227\030\240\034\244\041\242\044\225\050\232" +
    "\053\245\054\233\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\023\354\034\117\001\001\000\004\063\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\007\235\014\226\015\227\030\240\034\244\041\242" +
    "\043\364\044\225\050\232\053\245\054\233\001\001\000" +
    "\026\007\235\014\254\015\227\030\240\034\244\041\242" +
    "\044\225\050\232\053\245\054\233\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoG$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoG$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoG$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible

    public void syntax_error(Symbol s){
        TablaErrores.insertarError("Error Sintactico: "+s.value.toString()+" ",s.right,s.left);
        System.out.println(s.value.toString()+" Fila: " +s.right+", Columna: "+s.left);
        HTML.mostrarErrores();
    }

    public void unrecovered_syntax_error(Symbol s){        
        TablaErrores.insertarError("Error Sintactico: "+s.value.toString()+" ",s.right,s.left);
        System.out.println(s.value.toString()+" Fila: " +s.right+", Columna: "+s.left);
        HTML.mostrarErrores();
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoG$actions {

//Codigo de acciones
      

  private final SintacticoG parser;

  /** Constructor */
  CUP$SintacticoG$actions(SintacticoG parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoG$do_action_part00000000(
    int                        CUP$SintacticoG$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoG$parser,
    java.util.Stack            CUP$SintacticoG$stack,
    int                        CUP$SintacticoG$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoG$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoG$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoG$parser.done_parsing();
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= LIMPORTAR LINCLUIR LALS 
            {
              Nodo RESULT =null;
		
        System.out.println("Archivo finalizado");
        
    
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // VISIBILIDAD ::= dospuntos TVISIBILIDAD 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",3, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VISIBILIDAD ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",3, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TVISIBILIDAD ::= privado 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("TVISIBILIDAD",4, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TVISIBILIDAD ::= protegido 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("TVISIBILIDAD",4, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TVISIBILIDAD ::= publico 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("TVISIBILIDAD",4, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TVISIBILIDAD ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("TVISIBILIDAD",4, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ASIGNACION ::= id igual EXP pregc 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LIMPORTAR ::= LIMPORTAR IMPORTAR 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LIMPORTAR",1, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LIMPORTAR ::= IMPORTAR 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LIMPORTAR",1, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IMPORTAR ::= importar id gk pregc 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("IMPORTAR",6, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LALS ::= LALS ALS 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LALS",2, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LALS ::= ALS 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LALS",2, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ALS ::= als id HEREDA VISIBILIDAD llavea CUERPOALS llavec 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ALS",9, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CUERPOALS ::= CUERPOALS SENTALS 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("CUERPOALS",8, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CUERPOALS ::= SENTALS 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("CUERPOALS",8, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTALS ::= DECFUN 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTALS",23, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTALS ::= ASIGNACION 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTALS",23, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTALS ::= DECLARACION 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTALS",23, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTALS ::= INICIO 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTALS",23, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // HEREDA ::= hereda id 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("HEREDA",7, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // HEREDA ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("HEREDA",7, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= var TVAR id VISIBILIDAD DEC2 pregc 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DEC2 ::= IDL 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("DEC2",21, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DEC2 ::= ASIG 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("DEC2",21, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DEC2 ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("DEC2",21, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IDL ::= IDL coma id VISIBILIDAD 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("IDL",30, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IDL ::= coma id VISIBILIDAD 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("IDL",30, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ASIG ::= igual VALASIG 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ASIG",13, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ASIG ::= ARR ASIGARR 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ASIG",13, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ASIGARR ::= igual LLLAVE 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ASIGARR",16, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ASIGARR ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ASIGARR",16, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LLLAVE ::= LLLAVE coma llavea LLAVE llavec 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LLLAVE",46, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LLLAVE ::= llavea LLAVE llavec 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LLLAVE",46, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LLAVE ::= LLLAVE 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LLAVE",47, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LLAVE ::= LPFUN 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LLAVE",47, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LVAL ::= LVAL coma EXP 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LVAL",44, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LVAL ::= EXP 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LVAL",44, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VALASIG ::= EXP 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("VALASIG",14, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VALASIG ::= nuevo id parentesisa parentesisc 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("VALASIG",14, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LID ::= LID punto id 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LID",18, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LID ::= id 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LID",18, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECFUN ::= TFUN id parentesisa PDECFUN parentesisc VISIBILIDAD llavea CUERPO llavec 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("DECFUN",19, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TVAR ::= tentero 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("TVAR",12, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TVAR ::= tdecimal 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("TVAR",12, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TVAR ::= tcaracter 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("TVAR",12, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TVAR ::= tcadena 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("TVAR",12, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TVAR ::= tbool 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("TVAR",12, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TVAR ::= id 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("TVAR",12, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TFUN ::= TVAR 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("TFUN",20, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TFUN ::= tvacio 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("TFUN",20, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PDECFUN ::= PDECFUN coma TVAR id 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("PDECFUN",25, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PDECFUN ::= TVAR id 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("PDECFUN",25, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // RETORNAR ::= retornar EXP 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("RETORNAR",22, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LLAMADO ::= llamar id parentesisa LPFUN parentesisc 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LLAMADO",26, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LLAMADO ::= llamarhk id parentesisa LPFUN parentesisc 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LLAMADO",26, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LPFUN ::= LPFUN coma EXP 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LPFUN",27, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LPFUN ::= EXP 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LPFUN",27, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INICIO ::= tvacio inicio parentesisa parentesisc llavea CUERPO llavec 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("INICIO",28, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LINCLUIR ::= LINCLUIR INCLUIR 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LINCLUIR",45, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LINCLUIR ::= INCLUIR 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LINCLUIR",45, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INCLUIR ::= incluirhk id hk pregc 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("INCLUIR",29, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SI ::= si parentesisa EXP parentesisc llavea CUERPO llavec SINO 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SI",31, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SINO ::= sino llavea CUERPO llavec 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SINO",32, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SINO ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SINO",32, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SELECCION ::= seleccion parentesisa LID parentesisc llavea LCASO DEFECTO llavec 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SELECCION",34, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LCASO ::= LCASO CASO 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LCASO",35, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LCASO ::= CASO 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LCASO",35, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CASO ::= caso VALCASO dospuntos CUERPO 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("CASO",36, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DEFECTO ::= defecto dospuntos CUERPO 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("DEFECTO",37, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DEFECTO ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("DEFECTO",37, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PARA ::= para parentesisa VARPARA dospuntos EXP dospuntos POSTERIOR parentesisc llavea CUERPO llavec 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("PARA",38, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-10)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VARPARA ::= DECLARACION 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("VARPARA",39, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VARPARA ::= LID igual EXP 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("VARPARA",39, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // POSTERIOR ::= LID OPPARA 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("POSTERIOR",24, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPPARA ::= masmas 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("OPPARA",40, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPPARA ::= menosmenos 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("OPPARA",40, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPPARA ::= ASIG 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("OPPARA",40, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // MIENTRAS ::= mientras parentesisa EXP parentesisc llavea CUERPO llavec 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("MIENTRAS",41, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // HACERMIENTRAS ::= hacer llavea CUERPO llavec mientras parentesisa EXP parentesisc 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("HACERMIENTRAS",42, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ARR ::= ARR DIM 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ARR",15, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ARR ::= DIM 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ARR",15, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DIM ::= corchetea LVAL corchetec 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("DIM",43, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= EXP suma EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.suma,op1,op2);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= EXP resta EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.resta,op1,op2);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP ::= EXP mult EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.mult,op1,op2);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP ::= EXP div EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.div,op1,op2);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP ::= EXP potencia EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.pot,op1,op2);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP ::= EXP o EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.o,op1,op2);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP ::= EXP y EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.y,op1,op2);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP ::= EXP xor EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.xor,op1,op2);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP ::= EXP OPREL EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int oprelleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int oprelright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		String oprel = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(oprel,op1,op2);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP ::= not EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.not,op1);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP ::= resta EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.resta,op1);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP ::= parentesisa EXP parentesisc 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		RESULT=exp;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP ::= LLAMADO 
            {
              Nodo RESULT =null;
		int llamadoleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int llamadoright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo llamado = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = llamado;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP ::= num 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(num);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXP ::= cadena 
            {
              Nodo RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(cadena);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXP ::= caracter 
            {
              Nodo RESULT =null;
		int caracterleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int caracterright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		String caracter = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(caracter);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXP ::= id 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(id);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXP ::= decimal 
            {
              Nodo RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(dec);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXP ::= verdadero 
            {
              Nodo RESULT =null;
		int verdaderoleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int verdaderoright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		String verdadero = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(verdadero);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXP ::= falso 
            {
              Nodo RESULT =null;
		int falsoleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int falsoright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		String falso = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(falso);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OPREL ::= mayor 
            {
              String RESULT =null;
		RESULT = Constante.mayor;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("OPREL",49, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OPREL ::= menor 
            {
              String RESULT =null;
		RESULT = Constante.menor;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("OPREL",49, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OPREL ::= mayorigual 
            {
              String RESULT =null;
		RESULT = Constante.mayorigual;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("OPREL",49, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OPREL ::= menorigual 
            {
              String RESULT =null;
		RESULT = Constante.menorigual;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("OPREL",49, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OPREL ::= igualacion 
            {
              String RESULT =null;
		RESULT = Constante.igualacion;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("OPREL",49, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OPREL ::= distinto 
            {
              String RESULT =null;
		RESULT = Constante.distinto;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("OPREL",49, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CUERPO ::= CUERPO SENTENCIA 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("CUERPO",33, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CUERPO ::= SENTENCIA 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("CUERPO",33, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SENTENCIA ::= ASIGNACION 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTENCIA",10, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SENTENCIA ::= DECLARACION 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTENCIA",10, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SENTENCIA ::= RETORNAR 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTENCIA",10, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SENTENCIA ::= LLAMADO 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTENCIA",10, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SENTENCIA ::= SI 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTENCIA",10, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SENTENCIA ::= SELECCION 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTENCIA",10, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SENTENCIA ::= PARA 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTENCIA",10, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SENTENCIA ::= MIENTRAS 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTENCIA",10, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SENTENCIA ::= HACERMIENTRAS 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTENCIA",10, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SENTENCIA ::= continuar pregc 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTENCIA",10, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SENTENCIA ::= terminar pregc 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTENCIA",10, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoG$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoG$do_action(
    int                        CUP$SintacticoG$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoG$parser,
    java.util.Stack            CUP$SintacticoG$stack,
    int                        CUP$SintacticoG$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoG$do_action_part00000000(
                               CUP$SintacticoG$act_num,
                               CUP$SintacticoG$parser,
                               CUP$SintacticoG$stack,
                               CUP$SintacticoG$top);
    }
}

}
