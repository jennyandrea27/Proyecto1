
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisis.HaskellArchivo;

import java_cup.runtime.Symbol;
import Extras.*;
import Analisis.*;
import Reportes.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoH extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TSHaskell.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoH() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoH(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoH(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\165\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\005\000\002\007\005\000\002\007\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\017" +
    "\005\000\002\022\003\000\002\022\003\000\002\020\005" +
    "\000\002\020\003\000\002\021\003\000\002\021\003\000" +
    "\002\011\006\000\002\012\006\000\002\013\006\000\002" +
    "\014\006\000\002\015\006\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\032\006\000\002\033\006" +
    "\000\002\025\006\000\002\026\006\000\002\027\006\000" +
    "\002\030\006\000\002\031\006\000\002\052\006\000\002" +
    "\016\005\000\002\023\005\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\034\007\000\002\034\003\000\002\035\005\000" +
    "\002\035\003\000\002\035\002\000\002\036\004\000\002" +
    "\036\003\000\002\050\003\000\002\050\003\000\002\050" +
    "\003\000\002\050\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\050\003\000\002" +
    "\050\003\000\002\050\003\000\002\050\003\000\002\050" +
    "\003\000\002\050\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\004\006\000\002\037\010\000" +
    "\002\040\005\000\002\040\003\000\002\040\002\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\004\000\002\006\005\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\041\011\000\002\042\005\000\002\042\005\000\002" +
    "\042\003\000\002\043\005\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\044\007\000\002\045\003\000" +
    "\002\045\003\000\002\046\004\000\002\046\003\000\002" +
    "\047\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\305\000\006\037\007\061\010\001\002\000\010\002" +
    "\ufffe\037\ufffe\061\ufffe\001\002\000\010\002\000\037\007" +
    "\061\010\001\002\000\004\002\306\001\002\000\010\002" +
    "\uffd3\037\uffd3\061\uffd3\001\002\000\010\052\uffd0\061\012" +
    "\062\uffd0\001\002\000\006\052\013\062\014\001\002\000" +
    "\006\052\uffd1\062\uffd1\001\002\000\022\007\037\025\053" +
    "\031\021\037\026\053\033\054\030\061\035\063\016\001" +
    "\002\000\004\061\015\001\002\000\006\052\uffd2\062\uffd2" +
    "\001\002\000\054\004\ufffc\005\ufffc\006\ufffc\007\ufffc\025" +
    "\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc" +
    "\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\053\ufffc\054" +
    "\ufffc\061\ufffc\063\ufffc\066\ufffc\001\002\000\034\007\uffbf" +
    "\025\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffd5\037\uffbf\040" +
    "\uffbf\041\uffd5\053\uffbf\054\uffbf\061\uffbf\063\uffbf\001\002" +
    "\000\030\007\uffc4\025\uffc4\027\uffc4\030\uffc4\031\uffc4\037" +
    "\uffc4\040\uffc4\053\uffc4\054\uffc4\061\uffc4\063\uffc4\001\002" +
    "\000\006\053\055\061\062\001\002\000\024\007\037\025" +
    "\053\027\270\031\021\037\026\053\033\054\030\061\035" +
    "\063\016\001\002\000\030\007\uffc5\025\uffc5\027\uffc5\030" +
    "\uffc5\031\uffc5\037\uffc5\040\uffc5\053\uffc5\054\uffc5\061\uffc5" +
    "\063\uffc5\001\002\000\030\007\uffce\025\uffce\027\uffce\030" +
    "\uffce\031\uffce\037\uffce\040\uffce\053\uffce\054\uffce\061\uffce" +
    "\063\uffce\001\002\000\034\007\uffc7\025\uffc7\027\uffc7\030" +
    "\uffc7\031\uffc7\032\ufffd\037\uffc7\040\uffc7\041\ufffd\053\uffc7" +
    "\054\uffc7\061\uffc7\063\uffc7\001\002\000\030\007\uffba\025" +
    "\uffba\027\uffba\030\uffba\031\uffba\037\uffba\040\uffba\053\uffba" +
    "\054\uffba\061\uffba\063\uffba\001\002\000\030\007\uffc6\025" +
    "\uffc6\027\uffc6\030\uffc6\031\uffc6\037\uffc6\040\uffc6\053\uffc6" +
    "\054\uffc6\061\uffc6\063\uffc6\001\002\000\010\053\247\054" +
    "\245\064\253\001\002\000\054\004\ufff9\005\ufff9\006\ufff9" +
    "\007\ufff9\025\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9\033" +
    "\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9" +
    "\053\ufff9\054\ufff9\061\ufff9\063\ufff9\066\ufff9\001\002\000" +
    "\030\007\uffbb\025\uffbb\027\uffbb\030\uffbb\031\uffbb\037\uffbb" +
    "\040\uffbb\053\uffbb\054\uffbb\061\uffbb\063\uffbb\001\002\000" +
    "\036\010\106\011\224\012\220\013\222\014\225\015\223" +
    "\016\226\017\175\020\200\021\176\022\177\023\201\024" +
    "\221\061\107\001\002\000\034\007\uffc3\025\uffc3\027\uffc3" +
    "\030\uffc3\031\uffc3\032\uffd9\037\uffc3\040\uffc3\041\uffd9\053" +
    "\uffc3\054\uffc3\061\uffc3\063\uffc3\001\002\000\054\004\ufffb" +
    "\005\ufffb\006\ufffb\007\ufffb\025\ufffb\027\ufffb\030\ufffb\031" +
    "\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb" +
    "\040\ufffb\041\ufffb\053\ufffb\054\ufffb\061\ufffb\063\ufffb\066" +
    "\ufffb\001\002\000\034\007\uffc1\025\uffc1\027\uffc1\030\uffc1" +
    "\031\uffc1\032\uffd7\037\uffc1\040\uffc1\041\uffd7\053\uffc1\054" +
    "\uffc1\061\uffc1\063\uffc1\001\002\000\004\061\215\001\002" +
    "\000\030\007\uffbe\025\uffbe\027\uffbe\030\uffbe\031\uffbe\037" +
    "\uffbe\040\uffbe\053\uffbe\054\uffbe\061\uffbe\063\uffbe\001\002" +
    "\000\030\007\uffca\025\uffca\027\uffca\030\uffca\031\uffca\037" +
    "\uffca\040\uffca\053\uffca\054\uffca\061\uffca\063\uffca\001\002" +
    "\000\030\007\uffbc\025\uffbc\027\uffbc\030\uffbc\031\uffbc\037" +
    "\uffbc\040\uffbc\053\uffbc\054\uffbc\061\uffbc\063\uffbc\001\002" +
    "\000\030\007\uffcb\025\uffcb\027\uffcb\030\uffcb\031\uffcb\037" +
    "\uffcb\040\uffcb\053\uffcb\054\uffcb\061\uffcb\063\uffcb\001\002" +
    "\000\034\007\uffbd\025\uffbd\027\uffbd\030\uffbd\031\uffbd\032" +
    "\ufffa\037\uffbd\040\uffbd\041\ufffa\053\uffbd\054\uffbd\061\uffbd" +
    "\063\uffbd\001\002\000\030\007\uffc9\025\uffc9\027\uffc9\030" +
    "\uffc9\031\uffc9\037\uffc9\040\uffc9\053\uffc9\054\uffc9\061\uffc9" +
    "\063\uffc9\001\002\000\034\007\uffc0\025\uffc0\027\uffc0\030" +
    "\uffc0\031\uffc0\032\uffd6\037\uffc0\040\uffc0\041\uffd6\053\uffc0" +
    "\054\uffc0\061\uffc0\063\uffc0\001\002\000\006\032\170\041" +
    "\167\001\002\000\030\007\uffcc\025\uffcc\027\uffcc\030\uffcc" +
    "\031\uffcc\037\uffcc\040\uffcc\053\uffcc\054\uffcc\061\uffcc\063" +
    "\uffcc\001\002\000\030\007\uffc8\025\uffc8\027\uffc8\030\uffc8" +
    "\031\uffc8\037\uffc8\040\uffc8\053\uffc8\054\uffc8\061\uffc8\063" +
    "\uffc8\001\002\000\030\007\uffcd\025\uffcd\027\uffcd\030\uffcd" +
    "\031\uffcd\037\uffcd\040\uffcd\053\uffcd\054\uffcd\061\uffcd\063" +
    "\uffcd\001\002\000\006\053\055\061\062\001\002\000\034" +
    "\007\uffc2\025\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffd8\037" +
    "\uffc2\040\uffc2\041\uffd8\053\uffc2\054\uffc2\061\uffc2\063\uffc2" +
    "\001\002\000\006\010\106\061\107\001\002\000\034\026" +
    "\uffe4\037\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4" +
    "\047\uffe4\050\uffe4\051\uffe4\053\uffe4\057\uffe4\062\uffe4\001" +
    "\002\000\034\026\uffe5\037\uffe5\042\uffe5\043\uffe5\044\uffe5" +
    "\045\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\053\uffe5\057" +
    "\uffe5\062\uffe5\001\002\000\010\026\uff9a\042\102\043\103" +
    "\001\002\000\016\044\075\045\074\046\077\047\076\050" +
    "\073\051\100\001\002\000\034\026\uffe6\037\uffe6\042\uffe6" +
    "\043\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051" +
    "\uffe6\053\uffe6\057\uffe6\062\uffe6\001\002\000\004\026\064" +
    "\001\002\000\022\007\037\025\053\031\021\037\026\053" +
    "\033\054\030\061\035\063\016\001\002\000\024\007\037" +
    "\025\053\030\066\031\021\037\026\053\033\054\030\061" +
    "\035\063\016\001\002\000\022\007\037\025\053\031\021" +
    "\037\026\053\033\054\030\061\035\063\016\001\002\000" +
    "\030\007\uffcf\025\uffcf\027\uffcf\030\uffcf\031\uffcf\037\uffcf" +
    "\040\uffcf\053\uffcf\054\uffcf\061\uffcf\063\uffcf\001\002\000" +
    "\024\007\037\025\053\027\071\031\021\037\026\053\033" +
    "\054\030\061\035\063\016\001\002\000\030\007\uff9d\025" +
    "\uff9d\027\uff9d\030\uff9d\031\uff9d\037\uff9d\040\uff9d\053\uff9d" +
    "\054\uff9d\061\uff9d\063\uff9d\001\002\000\006\053\055\061" +
    "\062\001\002\000\006\053\uff94\061\uff94\001\002\000\006" +
    "\053\uff97\061\uff97\001\002\000\006\053\uff98\061\uff98\001" +
    "\002\000\006\053\uff95\061\uff95\001\002\000\006\053\uff96" +
    "\061\uff96\001\002\000\006\053\uff93\061\uff93\001\002\000" +
    "\010\026\uff99\042\uff99\043\uff99\001\002\000\006\053\055" +
    "\061\062\001\002\000\006\053\055\061\062\001\002\000" +
    "\004\026\uff9b\001\002\000\004\026\uff9c\001\002\000\022" +
    "\034\130\053\033\054\030\060\124\061\132\063\016\064" +
    "\126\065\121\001\002\000\004\056\110\001\002\000\012" +
    "\053\055\057\uffb5\061\062\062\uffb5\001\002\000\006\057" +
    "\113\062\114\001\002\000\006\057\uffb6\062\uffb6\001\002" +
    "\000\004\053\116\001\002\000\006\053\055\061\062\001" +
    "\002\000\006\057\uffb7\062\uffb7\001\002\000\102\004\uffb8" +
    "\005\uffb8\006\uffb8\007\uffb8\025\uffb8\026\uffb8\027\uffb8\030" +
    "\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8" +
    "\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045" +
    "\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\053\uffb8\054\uffb8" +
    "\057\uffb8\061\uffb8\062\uffb8\063\uffb8\066\uffb8\001\002\000" +
    "\054\004\uffd5\005\uffd5\006\uffd5\007\uffd5\025\uffd5\027\uffd5" +
    "\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036" +
    "\uffd5\037\uffd5\040\uffd5\041\uffd5\053\uffd5\054\uffd5\061\uffd5" +
    "\063\uffd5\066\uffd5\001\002\000\050\004\uffa3\005\uffa3\006" +
    "\uffa3\007\uffa3\025\uffa3\027\uffa3\030\uffa3\031\uffa3\033\uffa3" +
    "\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\053\uffa3\054" +
    "\uffa3\061\uffa3\063\uffa3\066\uffa3\001\002\000\022\034\130" +
    "\053\033\054\030\060\124\061\132\063\016\064\126\065" +
    "\121\001\002\000\050\004\uffa4\005\uffa4\006\uffa4\007\uffa4" +
    "\025\uffa4\027\uffa4\030\uffa4\031\uffa4\033\uffa4\034\uffa4\035" +
    "\uffa4\036\uffa4\037\uffa4\040\uffa4\053\uffa4\054\uffa4\061\uffa4" +
    "\063\uffa4\066\uffa4\001\002\000\054\004\uffa6\005\uffa6\006" +
    "\uffa6\007\uffa6\025\uffa6\027\uffa6\030\uffa6\031\uffa6\032\ufffd" +
    "\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041" +
    "\ufffd\053\uffa6\054\uffa6\061\uffa6\063\uffa6\066\uffa6\001\002" +
    "\000\050\004\uffa0\005\uffa0\006\uffa0\007\uffa0\025\uffa0\027" +
    "\uffa0\030\uffa0\031\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0" +
    "\037\uffa0\040\uffa0\053\uffa0\054\uffa0\061\uffa0\063\uffa0\066" +
    "\uffa0\001\002\000\050\004\uffa5\005\uffa5\006\uffa5\007\uffa5" +
    "\025\uffa5\027\uffa5\030\uffa5\031\uffa5\033\uffa5\034\uffa5\035" +
    "\uffa5\036\uffa5\037\uffa5\040\uffa5\053\uffa5\054\uffa5\061\uffa5" +
    "\063\uffa5\066\uffa5\001\002\000\050\004\uff9f\005\uff9f\006" +
    "\uff9f\007\uff9f\025\uff9f\027\uff9f\030\uff9f\031\uff9f\033\uff9f" +
    "\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\053\uff9f\054" +
    "\uff9f\061\uff9f\063\uff9f\066\uff9f\001\002\000\022\004\150" +
    "\005\151\006\153\033\146\034\147\035\152\036\154\053" +
    "\164\001\002\000\022\034\130\053\033\054\030\060\124" +
    "\061\132\063\016\064\126\065\121\001\002\000\054\004" +
    "\uffd9\005\uffd9\006\uffd9\007\uffd9\025\uffd9\027\uffd9\030\uffd9" +
    "\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037" +
    "\uffd9\040\uffd9\041\uffd9\053\uffd9\054\uffd9\061\uffd9\063\uffd9" +
    "\066\uffd9\001\002\000\054\004\uff9e\005\uff9e\006\uff9e\007" +
    "\uff9e\025\uff9e\027\uff9e\030\uff9e\031\uff9e\032\ufffb\033\uff9e" +
    "\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041\ufffb\053" +
    "\uff9e\054\uff9e\061\uff9e\063\uff9e\066\uff9e\001\002\000\054" +
    "\004\uffd7\005\uffd7\006\uffd7\007\uffd7\025\uffd7\027\uffd7\030" +
    "\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7" +
    "\037\uffd7\040\uffd7\041\uffd7\053\uffd7\054\uffd7\061\uffd7\063" +
    "\uffd7\066\uffd7\001\002\000\050\004\uffa2\005\uffa2\006\uffa2" +
    "\007\uffa2\025\uffa2\027\uffa2\030\uffa2\031\uffa2\033\uffa2\034" +
    "\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\053\uffa2\054\uffa2" +
    "\061\uffa2\063\uffa2\066\uffa2\001\002\000\050\004\uffa9\005" +
    "\uffa9\006\uffa9\007\uffa9\025\uffa9\027\uffa9\030\uffa9\031\uffa9" +
    "\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\053" +
    "\uffa9\054\uffa9\061\uffa9\063\uffa9\066\uffa9\001\002\000\054" +
    "\004\uffa1\005\uffa1\006\uffa1\007\uffa1\025\uffa1\027\uffa1\030" +
    "\uffa1\031\uffa1\032\ufffa\033\uffa1\034\uffa1\035\uffa1\036\uffa1" +
    "\037\uffa1\040\uffa1\041\ufffa\053\uffa1\054\uffa1\061\uffa1\063" +
    "\uffa1\066\uffa1\001\002\000\050\004\uffaa\005\uffaa\006\uffaa" +
    "\007\uffaa\025\uffaa\027\uffaa\030\uffaa\031\uffaa\033\uffaa\034" +
    "\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\053\uffaa\054\uffaa" +
    "\061\uffaa\063\uffaa\066\uffaa\001\002\000\050\004\uffa8\005" +
    "\uffa8\006\uffa8\007\uffa8\025\uffa8\027\uffa8\030\uffa8\031\uffa8" +
    "\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\053" +
    "\uffa8\054\uffa8\061\uffa8\063\uffa8\066\uffa8\001\002\000\054" +
    "\004\uffd6\005\uffd6\006\uffd6\007\uffd6\025\uffd6\027\uffd6\030" +
    "\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6" +
    "\037\uffd6\040\uffd6\041\uffd6\053\uffd6\054\uffd6\061\uffd6\063" +
    "\uffd6\066\uffd6\001\002\000\050\004\uffa7\005\uffa7\006\uffa7" +
    "\007\uffa7\025\uffa7\027\uffa7\030\uffa7\031\uffa7\033\uffa7\034" +
    "\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\053\uffa7\054\uffa7" +
    "\061\uffa7\063\uffa7\066\uffa7\001\002\000\050\004\uffab\005" +
    "\uffab\006\uffab\007\uffab\025\uffab\027\uffab\030\uffab\031\uffab" +
    "\033\uffab\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab\053" +
    "\uffab\054\uffab\061\uffab\063\uffab\066\uffab\001\002\000\054" +
    "\004\uffd8\005\uffd8\006\uffd8\007\uffd8\025\uffd8\027\uffd8\030" +
    "\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8" +
    "\037\uffd8\040\uffd8\041\uffd8\053\uffd8\054\uffd8\061\uffd8\063" +
    "\uffd8\066\uffd8\001\002\000\050\004\150\005\151\006\153" +
    "\007\uffad\025\uffad\027\uffad\030\uffad\031\uffad\033\uffad\034" +
    "\uffad\035\152\036\154\037\uffad\040\uffad\053\uffad\054\uffad" +
    "\061\uffad\063\uffad\066\uffad\001\002\000\022\034\130\053" +
    "\033\054\030\060\124\061\132\063\016\064\126\065\121" +
    "\001\002\000\022\034\130\053\033\054\030\060\124\061" +
    "\132\063\016\064\126\065\121\001\002\000\022\034\130" +
    "\053\033\054\030\060\124\061\132\063\016\064\126\065" +
    "\121\001\002\000\022\034\130\053\033\054\030\060\124" +
    "\061\132\063\016\064\126\065\121\001\002\000\022\034" +
    "\130\053\033\054\030\060\124\061\132\063\016\064\126" +
    "\065\121\001\002\000\022\034\130\053\033\054\030\060" +
    "\124\061\132\063\016\064\126\065\121\001\002\000\022" +
    "\034\130\053\033\054\030\060\124\061\132\063\016\064" +
    "\126\065\121\001\002\000\050\004\uffb1\005\151\006\153" +
    "\007\uffb1\025\uffb1\027\uffb1\030\uffb1\031\uffb1\033\uffb1\034" +
    "\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\053\uffb1\054\uffb1" +
    "\061\uffb1\063\uffb1\066\uffb1\001\002\000\050\004\uffae\005" +
    "\151\006\153\007\uffae\025\uffae\027\uffae\030\uffae\031\uffae" +
    "\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae\053" +
    "\uffae\054\uffae\061\uffae\063\uffae\066\uffae\001\002\000\050" +
    "\004\uffb2\005\151\006\153\007\uffb2\025\uffb2\027\uffb2\030" +
    "\uffb2\031\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2" +
    "\040\uffb2\053\uffb2\054\uffb2\061\uffb2\063\uffb2\066\uffb2\001" +
    "\002\000\050\004\uffaf\005\151\006\153\007\uffaf\025\uffaf" +
    "\027\uffaf\030\uffaf\031\uffaf\033\uffaf\034\uffaf\035\uffaf\036" +
    "\uffaf\037\uffaf\040\uffaf\053\uffaf\054\uffaf\061\uffaf\063\uffaf" +
    "\066\uffaf\001\002\000\050\004\uffb0\005\151\006\153\007" +
    "\uffb0\025\uffb0\027\uffb0\030\uffb0\031\uffb0\033\uffb0\034\uffb0" +
    "\035\uffb0\036\uffb0\037\uffb0\040\uffb0\053\uffb0\054\uffb0\061" +
    "\uffb0\063\uffb0\066\uffb0\001\002\000\050\004\150\005\151" +
    "\006\153\007\uffb3\025\uffb3\027\uffb3\030\uffb3\031\uffb3\033" +
    "\uffb3\034\uffb3\035\152\036\154\037\uffb3\040\uffb3\053\uffb3" +
    "\054\uffb3\061\uffb3\063\uffb3\066\uffb3\001\002\000\050\004" +
    "\150\005\151\006\153\007\uffb4\025\uffb4\027\uffb4\030\uffb4" +
    "\031\uffb4\033\uffb4\034\uffb4\035\152\036\154\037\uffb4\040" +
    "\uffb4\053\uffb4\054\uffb4\061\uffb4\063\uffb4\066\uffb4\001\002" +
    "\000\100\004\uffeb\005\uffeb\006\uffeb\007\uffeb\025\uffeb\026" +
    "\uffeb\027\uffeb\030\uffeb\031\uffeb\033\uffeb\034\uffeb\035\uffeb" +
    "\036\uffeb\037\uffeb\040\uffeb\042\uffeb\043\uffeb\044\uffeb\045" +
    "\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\053\uffeb\054\uffeb" +
    "\055\uffeb\057\uffeb\061\uffeb\062\uffeb\063\uffeb\066\uffeb\001" +
    "\002\000\022\004\150\005\151\006\153\033\146\034\147" +
    "\035\152\036\154\066\166\001\002\000\050\004\uffac\005" +
    "\uffac\006\uffac\007\uffac\025\uffac\027\uffac\030\uffac\031\uffac" +
    "\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\053" +
    "\uffac\054\uffac\061\uffac\063\uffac\066\uffac\001\002\000\022" +
    "\034\130\053\033\054\030\060\124\061\132\063\016\064" +
    "\126\065\121\001\002\000\012\053\171\054\030\061\035" +
    "\063\016\001\002\000\016\017\175\020\200\021\176\022" +
    "\177\023\201\061\107\001\002\000\054\004\uffdb\005\uffdb" +
    "\006\uffdb\007\uffdb\025\uffdb\027\uffdb\030\uffdb\031\uffdb\032" +
    "\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb" +
    "\041\uffdb\053\uffdb\054\uffdb\061\uffdb\063\uffdb\066\uffdb\001" +
    "\002\000\054\004\ufffd\005\ufffd\006\ufffd\007\ufffd\025\ufffd" +
    "\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\035" +
    "\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\053\ufffd\054\ufffd" +
    "\061\ufffd\063\ufffd\066\ufffd\001\002\000\054\004\ufffa\005" +
    "\ufffa\006\ufffa\007\ufffa\025\ufffa\027\ufffa\030\ufffa\031\ufffa" +
    "\032\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa\040" +
    "\ufffa\041\ufffa\053\ufffa\054\ufffa\061\ufffa\063\ufffa\066\ufffa" +
    "\001\002\000\012\053\171\054\030\061\035\063\016\001" +
    "\002\000\012\053\171\054\030\061\035\063\016\001\002" +
    "\000\012\053\171\054\030\061\035\063\016\001\002\000" +
    "\012\053\171\054\030\061\035\063\016\001\002\000\012" +
    "\053\171\054\030\061\035\063\016\001\002\000\006\032" +
    "\170\053\203\001\002\000\054\004\uffdd\005\uffdd\006\uffdd" +
    "\007\uffdd\025\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033" +
    "\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd" +
    "\053\uffdd\054\uffdd\061\uffdd\063\uffdd\066\uffdd\001\002\000" +
    "\006\032\170\053\205\001\002\000\054\004\uffe0\005\uffe0" +
    "\006\uffe0\007\uffe0\025\uffe0\027\uffe0\030\uffe0\031\uffe0\032" +
    "\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0" +
    "\041\uffe0\053\uffe0\054\uffe0\061\uffe0\063\uffe0\066\uffe0\001" +
    "\002\000\006\032\170\053\207\001\002\000\054\004\uffde" +
    "\005\uffde\006\uffde\007\uffde\025\uffde\027\uffde\030\uffde\031" +
    "\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde" +
    "\040\uffde\041\uffde\053\uffde\054\uffde\061\uffde\063\uffde\066" +
    "\uffde\001\002\000\006\032\170\053\211\001\002\000\054" +
    "\004\uffdf\005\uffdf\006\uffdf\007\uffdf\025\uffdf\027\uffdf\030" +
    "\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf" +
    "\037\uffdf\040\uffdf\041\uffdf\053\uffdf\054\uffdf\061\uffdf\063" +
    "\uffdf\066\uffdf\001\002\000\006\032\170\053\213\001\002" +
    "\000\054\004\uffe1\005\uffe1\006\uffe1\007\uffe1\025\uffe1\027" +
    "\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1" +
    "\036\uffe1\037\uffe1\040\uffe1\041\uffe1\053\uffe1\054\uffe1\061" +
    "\uffe1\063\uffe1\066\uffe1\001\002\000\050\004\uffda\005\uffda" +
    "\006\uffda\007\uffda\025\uffda\027\uffda\030\uffda\031\uffda\033" +
    "\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda\053\uffda" +
    "\054\uffda\061\uffda\063\uffda\066\uffda\001\002\000\004\052" +
    "\216\001\002\000\012\053\171\054\030\061\035\063\016" +
    "\001\002\000\032\007\uffb9\025\uffb9\027\uffb9\030\uffb9\031" +
    "\uffb9\032\170\037\uffb9\040\uffb9\053\uffb9\054\uffb9\061\uffb9" +
    "\063\uffb9\001\002\000\006\053\055\061\062\001\002\000" +
    "\012\053\171\054\030\061\035\063\016\001\002\000\012" +
    "\053\171\054\030\061\035\063\016\001\002\000\012\053" +
    "\171\054\030\061\035\063\016\001\002\000\006\053\055" +
    "\061\062\001\002\000\012\053\171\054\030\061\035\063" +
    "\016\001\002\000\012\053\171\054\030\061\035\063\016" +
    "\001\002\000\006\032\170\053\230\001\002\000\050\004" +
    "\uffe2\005\uffe2\006\uffe2\007\uffe2\025\uffe2\027\uffe2\030\uffe2" +
    "\031\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040" +
    "\uffe2\053\uffe2\054\uffe2\061\uffe2\063\uffe2\066\uffe2\001\002" +
    "\000\006\032\170\053\232\001\002\000\050\004\uffe7\005" +
    "\uffe7\006\uffe7\007\uffe7\025\uffe7\027\uffe7\030\uffe7\031\uffe7" +
    "\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\053" +
    "\uffe7\054\uffe7\061\uffe7\063\uffe7\066\uffe7\001\002\000\004" +
    "\053\234\001\002\000\050\004\uffea\005\uffea\006\uffea\007" +
    "\uffea\025\uffea\027\uffea\030\uffea\031\uffea\033\uffea\034\uffea" +
    "\035\uffea\036\uffea\037\uffea\040\uffea\053\uffea\054\uffea\061" +
    "\uffea\063\uffea\066\uffea\001\002\000\006\032\170\053\236" +
    "\001\002\000\050\004\uffe3\005\uffe3\006\uffe3\007\uffe3\025" +
    "\uffe3\027\uffe3\030\uffe3\031\uffe3\033\uffe3\034\uffe3\035\uffe3" +
    "\036\uffe3\037\uffe3\040\uffe3\053\uffe3\054\uffe3\061\uffe3\063" +
    "\uffe3\066\uffe3\001\002\000\006\032\170\053\240\001\002" +
    "\000\050\004\uffe8\005\uffe8\006\uffe8\007\uffe8\025\uffe8\027" +
    "\uffe8\030\uffe8\031\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8" +
    "\037\uffe8\040\uffe8\053\uffe8\054\uffe8\061\uffe8\063\uffe8\066" +
    "\uffe8\001\002\000\006\032\170\053\242\001\002\000\050" +
    "\004\uffdc\005\uffdc\006\uffdc\007\uffdc\025\uffdc\027\uffdc\030" +
    "\uffdc\031\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc" +
    "\040\uffdc\053\uffdc\054\uffdc\061\uffdc\063\uffdc\066\uffdc\001" +
    "\002\000\004\053\244\001\002\000\050\004\uffe9\005\uffe9" +
    "\006\uffe9\007\uffe9\025\uffe9\027\uffe9\030\uffe9\031\uffe9\033" +
    "\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\053\uffe9" +
    "\054\uffe9\061\uffe9\063\uffe9\066\uffe9\001\002\000\010\053" +
    "\247\063\260\064\264\001\002\000\006\055\ufff6\062\ufff6" +
    "\001\002\000\004\010\106\001\002\000\006\055\255\062" +
    "\254\001\002\000\006\055\ufff5\062\ufff5\001\002\000\006" +
    "\055\ufff3\062\ufff3\001\002\000\006\055\ufff4\062\ufff4\001" +
    "\002\000\010\053\247\054\245\064\253\001\002\000\054" +
    "\004\ufff8\005\ufff8\006\ufff8\007\ufff8\025\ufff8\027\ufff8\030" +
    "\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8" +
    "\037\ufff8\040\ufff8\041\ufff8\053\ufff8\054\ufff8\061\ufff8\063" +
    "\ufff8\066\ufff8\001\002\000\006\055\ufff7\062\ufff7\001\002" +
    "\000\006\055\ufff0\062\266\001\002\000\004\055\ufff1\001" +
    "\002\000\004\055\265\001\002\000\006\055\uffed\062\uffed" +
    "\001\002\000\006\055\uffee\062\uffee\001\002\000\006\055" +
    "\uffec\062\uffec\001\002\000\006\055\ufff2\062\ufff2\001\002" +
    "\000\006\053\247\064\264\001\002\000\006\055\uffef\062" +
    "\uffef\001\002\000\010\002\uffd4\037\uffd4\061\uffd4\001\002" +
    "\000\004\037\272\001\002\000\006\060\273\064\277\001" +
    "\002\000\004\067\uff91\001\002\000\010\027\uff8e\060\uff8e" +
    "\064\uff8e\001\002\000\010\027\305\060\273\064\277\001" +
    "\002\000\004\067\300\001\002\000\004\067\uff90\001\002" +
    "\000\022\007\037\025\053\031\021\037\026\053\033\054" +
    "\030\061\035\063\016\001\002\000\024\007\037\025\053" +
    "\031\021\037\026\040\302\053\033\054\030\061\035\063" +
    "\016\001\002\000\004\037\303\001\002\000\010\027\uff8d" +
    "\060\uff8d\064\uff8d\001\002\000\010\027\uff8f\060\uff8f\064" +
    "\uff8f\001\002\000\030\007\uff92\025\uff92\027\uff92\030\uff92" +
    "\031\uff92\037\uff92\040\uff92\053\uff92\054\uff92\061\uff92\063" +
    "\uff92\001\002\000\004\002\001\001\002\000\010\002\uffff" +
    "\037\uffff\061\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\305\000\010\002\005\003\004\034\003\001\001\000" +
    "\002\001\001\000\004\034\306\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\004\051\005\046\011\047" +
    "\012\042\013\040\014\044\015\050\016\024\023\026\024" +
    "\030\025\033\026\053\027\035\030\045\031\016\032\022" +
    "\033\017\036\021\037\043\041\041\044\031\050\023\052" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\056\037\055\051\270\001\001\000\056\004\051\005\046" +
    "\011\047\012\042\013\040\014\044\015\050\016\024\023" +
    "\026\024\030\025\033\026\053\027\035\030\045\031\016" +
    "\032\022\033\017\037\043\041\041\044\031\050\066\052" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\247\010\245\011\250\017\251\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\011\056\037\055\042\062\043\057" +
    "\051\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\053\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\060\004\051\005\046\011\047\012\042\013\040\014\044" +
    "\015\050\016\024\023\026\024\030\025\033\026\053\027" +
    "\035\030\045\031\016\032\022\033\017\036\064\037\043" +
    "\041\041\044\031\050\023\052\037\001\001\000\056\004" +
    "\051\005\046\011\047\012\042\013\040\014\044\015\050" +
    "\016\024\023\026\024\030\025\033\026\053\027\035\030" +
    "\045\031\016\032\022\033\017\037\043\041\041\044\031" +
    "\050\066\052\037\001\001\000\060\004\051\005\046\011" +
    "\047\012\042\013\040\014\044\015\050\016\024\023\026" +
    "\024\030\025\033\026\053\027\035\030\045\031\016\032" +
    "\022\033\017\036\067\037\043\041\041\044\031\050\023" +
    "\052\037\001\001\000\002\001\001\000\056\004\051\005" +
    "\046\011\047\012\042\013\040\014\044\015\050\016\024" +
    "\023\026\024\030\025\033\026\053\027\035\030\045\031" +
    "\016\032\022\033\017\037\043\041\041\044\031\050\066" +
    "\052\037\001\001\000\002\001\001\000\010\011\056\037" +
    "\055\051\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\011\056\037\055" +
    "\043\104\051\060\001\001\000\012\011\056\037\055\043" +
    "\103\051\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\005\046\006\126\011\142\012\136\013\134\014" +
    "\137\015\141\016\122\023\124\024\030\025\130\026\143" +
    "\027\132\030\140\031\116\032\121\033\117\037\135\052" +
    "\133\001\001\000\002\001\001\000\012\011\056\037\055" +
    "\040\110\051\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\056\037\055\051\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\005\046\006\164\011\142" +
    "\012\136\013\134\014\137\015\141\016\122\023\124\024" +
    "\030\025\130\026\143\027\132\030\140\031\116\032\121" +
    "\033\117\037\135\052\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\005\046\006\144\011" +
    "\142\012\136\013\134\014\137\015\141\016\122\023\124" +
    "\024\030\025\130\026\143\027\132\030\140\031\116\032" +
    "\121\033\117\037\135\052\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\005\046" +
    "\006\162\011\142\012\136\013\134\014\137\015\141\016" +
    "\122\023\124\024\030\025\130\026\143\027\132\030\140" +
    "\031\116\032\121\033\117\037\135\052\133\001\001\000" +
    "\050\005\046\006\161\011\142\012\136\013\134\014\137" +
    "\015\141\016\122\023\124\024\030\025\130\026\143\027" +
    "\132\030\140\031\116\032\121\033\117\037\135\052\133" +
    "\001\001\000\050\005\046\006\160\011\142\012\136\013" +
    "\134\014\137\015\141\016\122\023\124\024\030\025\130" +
    "\026\143\027\132\030\140\031\116\032\121\033\117\037" +
    "\135\052\133\001\001\000\050\005\046\006\157\011\142" +
    "\012\136\013\134\014\137\015\141\016\122\023\124\024" +
    "\030\025\130\026\143\027\132\030\140\031\116\032\121" +
    "\033\117\037\135\052\133\001\001\000\050\005\046\006" +
    "\156\011\142\012\136\013\134\014\137\015\141\016\122" +
    "\023\124\024\030\025\130\026\143\027\132\030\140\031" +
    "\116\032\121\033\117\037\135\052\133\001\001\000\050" +
    "\005\046\006\155\011\142\012\136\013\134\014\137\015" +
    "\141\016\122\023\124\024\030\025\130\026\143\027\132" +
    "\030\140\031\116\032\121\033\117\037\135\052\133\001" +
    "\001\000\050\005\046\006\154\011\142\012\136\013\134" +
    "\014\137\015\141\016\122\023\124\024\030\025\130\026" +
    "\143\027\132\030\140\031\116\032\121\033\117\037\135" +
    "\052\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\005\046\006\213\011\142" +
    "\012\136\013\134\014\137\015\141\016\122\023\124\024" +
    "\030\025\130\026\143\027\132\030\140\031\116\032\121" +
    "\033\117\037\135\052\133\001\001\000\024\005\171\016" +
    "\172\024\030\025\130\026\143\027\132\030\140\031\116" +
    "\037\173\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\005\211\016\172" +
    "\024\030\025\130\026\143\027\132\030\140\031\116\037" +
    "\173\001\001\000\024\005\207\016\172\024\030\025\130" +
    "\026\143\027\132\030\140\031\116\037\173\001\001\000" +
    "\024\005\205\016\172\024\030\025\130\026\143\027\132" +
    "\030\140\031\116\037\173\001\001\000\024\005\203\016" +
    "\172\024\030\025\130\026\143\027\132\030\140\031\116" +
    "\037\173\001\001\000\024\005\201\016\172\024\030\025" +
    "\130\026\143\027\132\030\140\031\116\037\173\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\005\216" +
    "\016\172\024\030\025\130\026\143\027\132\030\140\031" +
    "\116\037\173\001\001\000\002\001\001\000\010\011\056" +
    "\037\055\051\242\001\001\000\024\005\240\016\172\024" +
    "\030\025\130\026\143\027\132\030\140\031\116\037\173" +
    "\001\001\000\024\005\236\016\172\024\030\025\130\026" +
    "\143\027\132\030\140\031\116\037\173\001\001\000\024" +
    "\005\234\016\172\024\030\025\130\026\143\027\132\030" +
    "\140\031\116\037\173\001\001\000\010\011\056\037\055" +
    "\051\232\001\001\000\024\005\230\016\172\024\030\025" +
    "\130\026\143\027\132\030\140\031\116\037\173\001\001" +
    "\000\024\005\226\016\172\024\030\025\130\026\143\027" +
    "\132\030\140\031\116\037\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\011\261\020\256\021\262\022\260\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\255\011\250\017\251\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\261\021\266\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\045\275\046\274\047\273\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\045\275\047\303\001\001\000\002" +
    "\001\001\000\002\001\001\000\060\004\051\005\046\011" +
    "\047\012\042\013\040\014\044\015\050\016\024\023\026" +
    "\024\030\025\033\026\053\027\035\030\045\031\016\032" +
    "\022\033\017\036\300\037\043\041\041\044\031\050\023" +
    "\052\037\001\001\000\056\004\051\005\046\011\047\012" +
    "\042\013\040\014\044\015\050\016\024\023\026\024\030" +
    "\025\033\026\053\027\035\030\045\031\016\032\022\033" +
    "\017\037\043\041\041\044\031\050\066\052\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoH$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoH$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoH$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible

    public void syntax_error(Symbol s){
        TablaErrores.insertarError("Error Sintactico: "+s.value.toString()+" ",s.right,s.left);
        System.out.println(s.value.toString()+" Fila: " +s.right+", Columna: "+s.left);
    }

    public void unrecovered_syntax_error(Symbol s){        
        TablaErrores.insertarError("Error Sintactico: "+s.value.toString()+" ",s.right,s.left);
        System.out.println(s.value.toString()+" Fila: " +s.right+", Columna: "+s.left);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoH$actions {

//Codigo de acciones
      

  private final SintacticoH parser;

  /** Constructor */
  CUP$SintacticoH$actions(SintacticoH parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoH$do_action_part00000000(
    int                        CUP$SintacticoH$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoH$parser,
    java.util.Stack            CUP$SintacticoH$stack,
    int                        CUP$SintacticoH$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoH$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoH$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoH$parser.done_parsing();
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= HASKELL 
            {
              Nodo RESULT =null;
		int hkleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int hkright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo hk = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		
        System.out.println("Archivo finalizado");
        RESULT = hk;
    
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // HASKELL ::= HASKELL DECFUN 
            {
              Nodo RESULT =null;
		int hkleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int hkright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo hk = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		int decfunleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int decfunright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo decfun = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = Fabrica.insertarFuncion(hk,decfun);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("HASKELL",1, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // HASKELL ::= DECFUN 
            {
              Nodo RESULT =null;
		int decfunleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int decfunright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo decfun = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = Fabrica.crearNodoFunciones(decfun);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("HASKELL",1, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VALLISTA ::= CONCAT 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALLISTA",3, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VALLISTA ::= cadena 
            {
              Nodo RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(cadena);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALLISTA",3, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VALLISTA ::= id 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(id);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALLISTA",3, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VALLISTA ::= LLAMADO 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALLISTA",3, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VALLISTA ::= OPLISTA 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALLISTA",3, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VALLISTA ::= corchetea LPARLISTA corchetec 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALLISTA",3, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LPARLISTA ::= LPARLISTA coma PARLISTA 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LPARLISTA",5, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LPARLISTA ::= PARLISTA 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LPARLISTA",5, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PARLISTA ::= CALCULAR 
            {
              Nodo RESULT =null;
		int calcleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int calcright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo calc = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = calc;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("PARLISTA",6, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PARLISTA ::= caracter 
            {
              Nodo RESULT =null;
		int caracterleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int caracterright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String caracter = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(caracter);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("PARLISTA",6, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PARLISTA ::= OTRA 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("PARLISTA",6, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // OTRA ::= corchetea VALOTRA corchetec 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OTRA",13, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VALOTRA ::= cadena 
            {
              Nodo RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(cadena);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALOTRA",16, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VALOTRA ::= LVOTRA 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALOTRA",16, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LVOTRA ::= LVOTRA coma VOTRA 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LVOTRA",14, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LVOTRA ::= VOTRA 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LVOTRA",14, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VOTRA ::= CALCULAR 
            {
              Nodo RESULT =null;
		int calcleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int calcright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo calc = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = calc;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VOTRA",15, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VOTRA ::= caracter 
            {
              Nodo RESULT =null;
		int caracterleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int caracterright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String caracter = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(caracter);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VOTRA",15, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CALCULAR ::= dolar calcular EXP dolar 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		RESULT=exp;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CALCULAR",7, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SUCC ::= dolar succ VALFUN dolar 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SUCC",8, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECC ::= dolar decc VALFUN dolar 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("DECC",9, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MIN ::= dolar min VALLISTA dolar 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("MIN",10, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // MAX ::= dolar max VALLISTA dolar 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("MAX",11, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VALFUN ::= id 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(id);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALFUN",39, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VALFUN ::= CALCULAR 
            {
              Nodo RESULT =null;
		int calcleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int calcright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo calc = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = calc;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALFUN",39, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VALFUN ::= LLAMADO 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALFUN",39, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SUM ::= dolar sum VALLISTA dolar 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SUM",24, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PRODUCT ::= dolar product VALLISTA dolar 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("PRODUCT",25, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // REVERS ::= dolar revers VALLISTA dolar 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("REVERS",19, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IMPR ::= dolar impr VALLISTA dolar 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("IMPR",20, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PAR ::= dolar par VALLISTA dolar 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("PAR",21, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ASC ::= dolar asc VALLISTA dolar 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("ASC",22, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DESC ::= dolar desc VALLISTA dolar 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("DESC",23, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LENGTH ::= dolar length VALLISTA dolar 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LENGTH",40, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CONCAT ::= VALLISTA concatenacion VALLISTA 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CONCAT",12, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ACCESO ::= VALLISTA acceso EXP 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("ACCESO",17, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPLISTA ::= REVERS 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPLISTA",18, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPLISTA ::= IMPR 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPLISTA",18, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPLISTA ::= PAR 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPLISTA",18, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPLISTA ::= ASC 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPLISTA",18, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPLISTA ::= DESC 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPLISTA",18, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECFUN ::= id PDECFUN igual CUERPO fin 
            {
              Nodo RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo cuerpo = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		RESULT = cuerpo;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("DECFUN",26, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECFUN ::= eol 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("DECFUN",26, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PDECFUN ::= PDECFUN coma id 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("PDECFUN",27, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PDECFUN ::= id 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(id);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("PDECFUN",27, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PDECFUN ::= 
            {
              Nodo RESULT =null;
		
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("PDECFUN",27, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CUERPO ::= CUERPO SENTENCIAS 
            {
              Nodo RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo cuerpo = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = Fabrica.insertarSentencia(cuerpo,sent);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CUERPO",28, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CUERPO ::= SENTENCIAS 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=Fabrica.crearNodoCuerpo(sent);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CUERPO",28, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIAS ::= LISTA 
            {
              Nodo RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo list = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = list;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIAS ::= CALCULAR 
            {
              Nodo RESULT =null;
		int calcleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int calcright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo calc = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = calc;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIAS ::= SUCC 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIAS ::= DECC 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIAS ::= MIN 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIAS ::= MAX 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIAS ::= CONCAT 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIAS ::= ACCESO 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIAS ::= SUM 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIAS ::= PRODUCT 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIAS ::= REVERS 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTENCIAS ::= IMPR 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTENCIAS ::= PAR 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIAS ::= ASC 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIAS ::= DESC 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIAS ::= LENGTH 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIAS ::= LLAMADO 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIAS ::= SI 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIAS ::= CASO 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIAS ::= eol 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LISTA ::= let id igual VALLISTA 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = new Nodo("");
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LISTA",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LLAMADO ::= dolar id llavea LPFUN llavec dolar 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LLAMADO",29, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LPFUN ::= LPFUN coma VALFUN 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LPFUN",30, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LPFUN ::= VALFUN 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LPFUN",30, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LPFUN ::= 
            {
              Nodo RESULT =null;
		
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LPFUN",30, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP ::= EXP suma EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.suma,op1,op2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP ::= EXP resta EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.resta,op1,op2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP ::= EXP mult EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.mult,op1,op2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP ::= EXP div EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.div,op1,op2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP ::= EXP mod EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.mod,op1,op2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= EXP sqrt EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.sqrt,op1,op2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= EXP pot EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.pot,op1,op2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= resta EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.resta,op1);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= parentesisa EXP parentesisc 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		RESULT=exp;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP ::= CALCULAR 
            {
              Nodo RESULT =null;
		int calcleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int calcright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo calc = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = calc;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP ::= SUCC 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP ::= DECC 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP ::= MIN 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP ::= MAX 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP ::= CONCAT 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP ::= ACCESO 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP ::= SUM 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP ::= PRODUCT 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP ::= LENGTH 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP ::= LLAMADO 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP ::= num 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(num);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXP ::= caracter 
            {
              Nodo RESULT =null;
		int caracterleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int caracterright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String caracter = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(caracter);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXP ::= id 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(id);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SI ::= si COND entonces CUERPO sino CUERPO fin 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SI",31, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // COND ::= REL o REL 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.o,op1,op2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("COND",32, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // COND ::= REL y REL 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.y,op1,op2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("COND",32, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // COND ::= REL 
            {
              Nodo RESULT =null;
		int relleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int relright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo rel = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=rel;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("COND",32, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // REL ::= VALFUN OPREL VALFUN 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		String operador = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(operador,op1,op2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("REL",33, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OPREL ::= mayor 
            {
              String RESULT =null;
		RESULT = Constante.mayor;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPREL",41, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OPREL ::= menor 
            {
              String RESULT =null;
		RESULT = Constante.menor;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPREL",41, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OPREL ::= mayorigual 
            {
              String RESULT =null;
		RESULT = Constante.mayorigual;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPREL",41, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OPREL ::= menorigual 
            {
              String RESULT =null;
		RESULT = Constante.menorigual;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPREL",41, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OPREL ::= igualacion 
            {
              String RESULT =null;
		RESULT = Constante.igualacion;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPREL",41, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OPREL ::= distinto 
            {
              String RESULT =null;
		RESULT = Constante.distinto;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPREL",41, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CASO ::= caso VALFUN eol LCASOS fin 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CASO",34, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // VCASO ::= num 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(num);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VCASO",35, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // VCASO ::= caracter 
            {
              Nodo RESULT =null;
		int caracterleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int caracterright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String caracter = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(caracter);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VCASO",35, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // LCASOS ::= LCASOS CASOS 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LCASOS",36, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // LCASOS ::= CASOS 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LCASOS",36, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CASOS ::= VCASO dospuntos CUERPO puntoycoma eol 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CASOS",37, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoH$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoH$do_action(
    int                        CUP$SintacticoH$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoH$parser,
    java.util.Stack            CUP$SintacticoH$stack,
    int                        CUP$SintacticoH$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoH$do_action_part00000000(
                               CUP$SintacticoH$act_num,
                               CUP$SintacticoH$parser,
                               CUP$SintacticoH$stack,
                               CUP$SintacticoH$top);
    }
}

}
