/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyecto1;

import Analisis.ArchivoDot;
import Analisis.Graphik.*;
import Analisis.HaskellArchivo.*;
import Analisis.HaskellTerminal.*;
import Analisis.MemoriaHaskell;
import Analisis.Recorrido;
import Analisis.RecorridoHT;
import Analisis.SemanticoGraphik;
import Analisis.Valor;
import Extras.Constante;
import Reportes.HTML;
import Reportes.TablaErrores;
import TablaSimbolos.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.ScrollPane;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.util.LinkedList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter.DefaultHighlightPainter;
import javax.swing.text.Highlighter;

/**
 *
 * @author Jenny
 */
public class FormInicio extends javax.swing.JFrame {
    public static String texto_salida="";    
    //para uso de funcion Datos
    public static LinkedList <Dato> tabla_datos=new LinkedList<>();
    public static int fila=0;
    public static int col=0;    
    public static String ruta="";
    
    /**
     * Creates new form FormInicio
     */
    public FormInicio() {
        initComponents();      
        Ambito a=new Ambito(-1,0);
        TSH.lista_ambitos.add(a);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem3 = new javax.swing.JMenuItem();
        tpPestanas = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbSalida = new javax.swing.JTextArea();
        tbEntrada = new javax.swing.JTextField();
        bIniciarSesion = new javax.swing.JButton();
        bPublicar = new javax.swing.JButton();
        bImportar = new javax.swing.JButton();
        bCargarHK = new javax.swing.JButton();
        bCargarGK = new javax.swing.JButton();
        bCargar = new javax.swing.JButton();
        bCerrar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        bAbrir = new javax.swing.JMenu();
        bNuevo = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        bGuardar = new javax.swing.JMenuItem();
        bGuardarComo = new javax.swing.JMenuItem();
        bCerrarPestana = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        jMenuItem3.setText("jMenuItem3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Haskell++ y GraphiK");
        setBackground(new java.awt.Color(153, 255, 153));
        getContentPane().setLayout(null);

        tpPestanas.setBackground(new java.awt.Color(0, 153, 102));
        tpPestanas.setOpaque(true);
        getContentPane().add(tpPestanas);
        tpPestanas.setBounds(12, 92, 889, 410);

        tbSalida.setBackground(new java.awt.Color(0, 0, 0));
        tbSalida.setColumns(20);
        tbSalida.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        tbSalida.setForeground(new java.awt.Color(255, 255, 255));
        tbSalida.setRows(5);
        tbSalida.setName("tbSalida"); // NOI18N
        jScrollPane1.setViewportView(tbSalida);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(12, 520, 1250, 211);

        tbEntrada.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        tbEntrada.setText("> ");
        tbEntrada.setToolTipText("");
        tbEntrada.setName("tbEntrada"); // NOI18N
        tbEntrada.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tbEntradaKeyPressed(evt);
            }
        });
        getContentPane().add(tbEntrada);
        tbEntrada.setBounds(12, 749, 1250, 43);

        bIniciarSesion.setBackground(new java.awt.Color(0, 204, 204));
        bIniciarSesion.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        bIniciarSesion.setText("Iniciar Sesion");
        bIniciarSesion.setContentAreaFilled(false);
        bIniciarSesion.setEnabled(false);
        bIniciarSesion.setOpaque(true);
        getContentPane().add(bIniciarSesion);
        bIniciarSesion.setBounds(952, 92, 139, 31);

        bPublicar.setBackground(new java.awt.Color(0, 204, 204));
        bPublicar.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        bPublicar.setText("Publicar");
        bPublicar.setContentAreaFilled(false);
        bPublicar.setEnabled(false);
        bPublicar.setOpaque(true);
        getContentPane().add(bPublicar);
        bPublicar.setBounds(952, 141, 139, 31);

        bImportar.setBackground(new java.awt.Color(0, 204, 204));
        bImportar.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        bImportar.setText("Importar");
        bImportar.setContentAreaFilled(false);
        bImportar.setEnabled(false);
        bImportar.setOpaque(true);
        getContentPane().add(bImportar);
        bImportar.setBounds(952, 190, 139, 31);

        bCargarHK.setBackground(new java.awt.Color(0, 204, 204));
        bCargarHK.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        bCargarHK.setText("Cargar HK");
        bCargarHK.setContentAreaFilled(false);
        bCargarHK.setOpaque(true);
        bCargarHK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCargarHKActionPerformed(evt);
            }
        });
        getContentPane().add(bCargarHK);
        bCargarHK.setBounds(952, 351, 139, 31);

        bCargarGK.setBackground(new java.awt.Color(0, 204, 204));
        bCargarGK.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        bCargarGK.setText("Cargar GK");
        bCargarGK.setToolTipText("");
        bCargarGK.setContentAreaFilled(false);
        bCargarGK.setOpaque(true);
        bCargarGK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCargarGKActionPerformed(evt);
            }
        });
        getContentPane().add(bCargarGK);
        bCargarGK.setBounds(950, 410, 140, 31);

        bCargar.setBackground(new java.awt.Color(0, 204, 204));
        bCargar.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        bCargar.setText("CSV");
        bCargar.setPreferredSize(new java.awt.Dimension(139, 31));
        bCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCargarActionPerformed(evt);
            }
        });
        getContentPane().add(bCargar);
        bCargar.setBounds(950, 250, 140, 30);

        bCerrar.setBackground(new java.awt.Color(153, 0, 0));
        bCerrar.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        bCerrar.setForeground(new java.awt.Color(255, 255, 255));
        bCerrar.setText("X");
        bCerrar.setMargin(new java.awt.Insets(2, 2, 2, 2));
        bCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCerrarActionPerformed(evt);
            }
        });
        getContentPane().add(bCerrar);
        bCerrar.setBounds(850, 60, 51, 33);

        jLabel2.setBackground(new java.awt.Color(204, 255, 204));
        jLabel2.setOpaque(true);
        getContentPane().add(jLabel2);
        jLabel2.setBounds(0, 0, 1280, 810);

        jMenuBar1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        bAbrir.setText("Archivo");
        bAbrir.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N

        bNuevo.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        bNuevo.setText("Nuevo Graphik");
        bNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNuevoActionPerformed(evt);
            }
        });
        bAbrir.add(bNuevo);

        jMenuItem2.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jMenuItem2.setText("Nuevo Haskell");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        bAbrir.add(jMenuItem2);

        jMenuItem1.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jMenuItem1.setText("Abrir");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        bAbrir.add(jMenuItem1);

        bGuardar.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        bGuardar.setText("Guardar");
        bGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bGuardarActionPerformed(evt);
            }
        });
        bAbrir.add(bGuardar);

        bGuardarComo.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        bGuardarComo.setText("Guardar Como");
        bGuardarComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bGuardarComoActionPerformed(evt);
            }
        });
        bAbrir.add(bGuardarComo);

        bCerrarPestana.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        bCerrarPestana.setText("Cerrar Pestaña");
        bCerrarPestana.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCerrarPestanaActionPerformed(evt);
            }
        });
        bAbrir.add(bCerrarPestana);

        jMenuBar1.add(bAbrir);

        jMenu2.setText("Reportes");
        jMenu2.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        setSize(new java.awt.Dimension(1298, 883));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void bGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bGuardarActionPerformed
        // TODO add your handling code here:
        if(tpPestanas.getSelectedIndex()>=0){            
            JScrollPane sp=(JScrollPane)tpPestanas.getSelectedComponent().getComponentAt(0,0);
            JTextArea tb=(JTextArea)sp.getViewport().getView();
            String texto=tb.getText();                        
            try{            
                FileWriter fw = new FileWriter(tpPestanas.getTitleAt(tpPestanas.getSelectedIndex()));
                PrintWriter pw = new PrintWriter(fw);
                pw.print(texto);
                fw.close();        
                JOptionPane.showMessageDialog(null, "Archivo guardado, "+tpPestanas.getTitleAt(tpPestanas.getSelectedIndex()));
            }catch(Exception e){
                System.out.println("No se pudo guardar archivo "+tpPestanas.getTitleAt(tpPestanas.getSelectedIndex()));
            }
        }
        
    }//GEN-LAST:event_bGuardarActionPerformed

    private void tbEntradaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbEntradaKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            String texto=tbEntrada.getText();
            texto_salida="";            
            if(texto.equals("")){
                JOptionPane.showMessageDialog(null, "Entrada incorrecta");
            }else{
                tbSalida.append(texto+"\n");
                String entrada=texto.substring(1);
                tbEntrada.setText(">");
                LexicoHT lexico = new LexicoHT(new BufferedReader( new StringReader(entrada)));
                SintacticoHT sintactico= new SintacticoHT(lexico);
                try {
                    sintactico.parse();
                    ArchivoDot.graficar(sintactico.raiz, "ASTHaskellT");
                } catch (Exception ex) {
                    System.out.println("Error "+ex.getMessage());
                }
                if(sintactico.raiz!=null){                    
                    if(TablaErrores.error){                        
                        JOptionPane.showMessageDialog(null,"Verifique errores lexio y sintacticos.");
                        HTML.mostrarErrores();
                    }else{                                                
                        try{                            
                            RecorridoHT.recorrerArbol(sintactico.raiz);
                        }catch(Exception e){
                            System.out.println("No se ha podido ejecutar instruccion en Terminal Haskell.");
                        }
                    }
                    if(TablaErrores.error){
                        JOptionPane.showMessageDialog(null,"Verifique errores semanticos.");
                        HTML.mostrarErrores();
                    }else{                                                
                        //TS.recorrerListaAmbitos();
                        tbSalida.append(texto_salida+"\n");
                    }
                }
            }
            
        }
    }//GEN-LAST:event_tbEntradaKeyPressed

    private void bCargarHKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCargarHKActionPerformed
        // TODO add your handling code here:
        JScrollPane sp=(JScrollPane)tpPestanas.getSelectedComponent().getComponentAt(0,0);
        JTextArea tb=(JTextArea)sp.getViewport().getView();
        String entrada=tb.getText();
        texto_salida="";
            if(entrada.equals("")){
                JOptionPane.showMessageDialog(null, "Entrada incorrecta");
            }else{                
                LexicoH lexico = new LexicoH(new BufferedReader( new StringReader(entrada)));
                SintacticoH sintactico= new SintacticoH(lexico);
                try {
                    sintactico.parse();
                } catch (Exception ex) {
                    System.out.println("Error "+ex.getMessage());
                }
                if(sintactico.raiz!=null){                    
                    if(TablaErrores.error){                        
                        JOptionPane.showMessageDialog(null,"Verifique errores lexicos y sintacticos.");
                        HTML.mostrarErrores();
                    }else{                                                
                        //TS.recorrerListaAmbitos();                        
                        
                        MemoriaHaskell.raiz.hijos.addAll(sintactico.raiz.hijos);
                        texto_salida+="Archivo Haskell ha sido cargado a memoria.";
                        try {
                            ArchivoDot.graficar(MemoriaHaskell.raiz, "ASTHaskell");
                        } catch (IOException ex) {
                            Logger.getLogger(FormInicio.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        tbSalida.append(texto_salida+"\n");
                    }
                }
            }
    }//GEN-LAST:event_bCargarHKActionPerformed

    private void bCargarGKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCargarGKActionPerformed
        // TODO add your handling code here:
        pintar();
        JScrollPane sp=(JScrollPane)tpPestanas.getSelectedComponent().getComponentAt(0,0);
        JTextArea tb=(JTextArea)sp.getViewport().getView();
        String entrada=tb.getText();      
        texto_salida="";
            if(entrada.equals("")){
                JOptionPane.showMessageDialog(null, "Entrada incorrecta");
            }else{                
                LexicoG lexico = new LexicoG(new BufferedReader( new StringReader(entrada)));
                SintacticoG sintactico= new SintacticoG(lexico);
                try {
                    sintactico.parse();                    
                    ArchivoDot.graficar(sintactico.raiz, "ASTGraphik");
                } catch (Exception ex) {
                    System.out.println("Error "+ex.getMessage());
                }
                if(sintactico.raiz!=null){                    
                    if(TablaErrores.error){                        
                        JOptionPane.showMessageDialog(null,"Verifique errores lexicos y sintacticos.");
                        HTML.mostrarErrores();
                    }else{     
                        Recorrido.recorrerArbol(sintactico.raiz);                        
                    }
                    if(TablaErrores.error){
                        JOptionPane.showMessageDialog(null,"Verifique errores semanticos.");
                        HTML.mostrarErrores();
                    }else{                                                
                        TS.recorrerListaAmbitos();
                        tbSalida.setText(texto_salida);
                    }
                }
            }
    }//GEN-LAST:event_bCargarGKActionPerformed

    private void bCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCargarActionPerformed
        // TODO add your handling code here:
        tabla_datos.clear();
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        fileChooser.setFileFilter(new FileNameExtensionFilter("CSV","csv"));
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            // user selects a file
            File arch = fileChooser.getSelectedFile();            
            File archivo = new File(arch.getAbsolutePath());            
          BufferedReader br = null;      
          try {
             br =new BufferedReader(new FileReader(arch.getAbsolutePath()));
             String lineas = br.readLine();             
             while (null!=lineas) {               
                //fields = removeTrailingQuotes(fields);
                //lineas contiene cada renglo que se reconocio en el archivo                
                //campos tiene los datos que van en cada columna
                lineas=lineas.replace("[", "");
                lineas=lineas.replace("]", "");
                lineas=lineas.replace("{", "");
                lineas=lineas.replace("}", "");                
                String [] campos=lineas.split(",");                
                Dato dato=new Dato();
                for(int i=0;i<campos.length;i++){
                    Valor v=new Valor();
                    String d=campos[i];                    
                    while(d.charAt(0)==' '){
                        d=d.substring(1,d.length());
                    }
                    while(d.charAt(d.length()-1)==' '){
                        d=d.substring(0,d.length()-1);
                    }
                    try{
                        int valor=Integer.parseInt(d);
                        v=new Valor(Constante.tnum, valor+"");
                    }catch(Exception e1){
                        try{
                            double valor=Double.parseDouble(d);
                            v=new Valor(Constante.tdecimal, valor+"");
                        }catch(Exception e2){                            
                            if(d.contains("\"")){
                                String valor=d.replace("\"", "");
                                v=new Valor(Constante.tcadena, valor);
                            }else{
                                TablaErrores.insertarError("Error, archivo CSV solamente puede contener datos de tipo Entero, Decimal o Cadena.", i, NORMAL);
                            }                            
                        }
                    }
                    dato.columnas.add(v);
                }
                tabla_datos.add(dato);                
                lineas = br.readLine();                
             }        
          } catch (Exception e) {
             System.err.println("Error: "+e.getMessage());
          } finally {
             if (null!=br){
                try {
                   br.close();
                } catch (IOException e) {
                   System.err.println("Error al cerrar elarchivo"+e.getMessage());
                }
             }
          }            
        }        
        texto_salida+="Archivo CSV cargado a memoria.";
        tbSalida.setText(texto_salida);
    }//GEN-LAST:event_bCargarActionPerformed

    public JScrollPane crearTextBox(String texto)
        {
            JTextArea tb = new JTextArea();
            tb.setSize(tpPestanas.getWidth()-1, tpPestanas.getHeight()-30);            
            tb.setFont(new Font("Times New Roman",0,24));
            tb.setAutoscrolls(true);           
            tb.setText(texto);                        
            JScrollPane sp=new JScrollPane(tb);
            return sp;
        }
    public void pintar()
    {        
        JScrollPane sp=(JScrollPane)tpPestanas.getSelectedComponent().getComponentAt(0,0);
        JTextArea tb=(JTextArea)sp.getViewport().getView();
        try {
            pintarPalabra(tb,"(?i)(entero|decimal|cadena|vacio|caracter|bool|publico|privado|protegido|var|importar|als|hereda|nuevo|retornar|llamarhk|llamar|inicio|incluir|sino|seleccion|caso|defecto|para|mientras|hacer|continuar|terminar|graphikar_funcion|datos|columa|procesar|dondecada|dondetodo|donde|imprimir|falso|verdadero)",new Color(48,179,245));//palabras reservadas
            pintarPalabra(tb,"\\w", Color.ORANGE);//identificador
            pintarPalabra(tb,"([\"](.)*[\"])|(['](.)*['])",Color.green);
            pintarPalabra(tb,"[#][/](.|\n)*[/][#]",Color.DARK_GRAY);//comentarios
            pintarPalabra(tb,"[#](.)*[\n]",Color.DARK_GRAY);//comentario una linea
            
            
        } catch (BadLocationException ex) {
            System.out.println("Error al pintar archivo.");
        }
    }
    
    public void pintarPalabra(JTextArea tb, String texto, Color color) throws BadLocationException {
        if (texto.length() >= 1) {
            DefaultHighlightPainter highlightPainter = new DefaultHighlightPainter(color);
            Highlighter h = tb.getHighlighter();
            //h.removeAllHighlights();
            String text = tb.getText();
            String caracteres = texto;
            Pattern p = Pattern.compile(caracteres);
            Matcher m = p.matcher(text);
            while (m.find()) {
                h.addHighlight(m.start(), m.end(), highlightPainter);
            }
        } else {
            JOptionPane.showMessageDialog(tb, "Error al seleccionar palabra a pintar.");
        }
    }
    
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        fileChooser.setFileFilter(new FileNameExtensionFilter("HK - GK","hk","gk"));
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            // user selects a file
            File arch = fileChooser.getSelectedFile();            
            File archivo = new File(arch.getAbsolutePath());            
            ruta=arch.getAbsolutePath();            
          BufferedReader br = null;      
          try {
             br =new BufferedReader(new FileReader(ruta));             
             String lineas= br.readLine();
             String texto="";
             while (lineas!=null) {               
                texto+=lineas+"\n";
                lineas = br.readLine();                
             }             
             tpPestanas.add(ruta, crearTextBox(texto));             
             tpPestanas.setSelectedIndex(tpPestanas.getComponentCount()-1);             
             //quitar nombre del archivo a ruta
             while(!ruta.endsWith("\\")){
                 ruta=ruta.substring(0,ruta.length()-1);
             }              
          } catch (Exception e) {
             System.err.println("Error: "+e.getMessage());
          } finally {
             if (null!=br){
                try {
                   br.close();
                } catch (IOException e) {
                   System.err.println("Error al cerrar archivo. "+e.getMessage());
                }
             }
          }                      
        }        
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void bNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNuevoActionPerformed
        // TODO add your handling code here:               
        tpPestanas.add("Nuevo.gk",crearTextBox(""));        
        tpPestanas.setSelectedIndex(tpPestanas.getTabCount()-1);                 
    }//GEN-LAST:event_bNuevoActionPerformed

    private void bCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCerrarActionPerformed
        // TODO add your handling code here:        
        if(tpPestanas.getSelectedIndex()>=0)
            tpPestanas.remove(tpPestanas.getSelectedIndex());
    }//GEN-LAST:event_bCerrarActionPerformed

    private void bCerrarPestanaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCerrarPestanaActionPerformed
        // TODO add your handling code here:        
        if(tpPestanas.getSelectedIndex()>=0)
            tpPestanas.remove(tpPestanas.getSelectedIndex());
    }//GEN-LAST:event_bCerrarPestanaActionPerformed

    private void bGuardarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bGuardarComoActionPerformed
        // TODO add your handling code here:
        if(tpPestanas.getSelectedIndex()>=0){            
            JScrollPane sp=(JScrollPane)tpPestanas.getSelectedComponent().getComponentAt(0,0);
            JTextArea tb=(JTextArea)sp.getViewport().getView();
            String texto=tb.getText();
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
            fileChooser.setFileFilter(new FileNameExtensionFilter("HK - GK","hk","gk"));
            int result = fileChooser.showSaveDialog(this);
            if (result == JFileChooser.APPROVE_OPTION) {            
                File arch = fileChooser.getSelectedFile();                        
                try{            
                    FileWriter fw = new FileWriter(arch.getAbsolutePath());
                    PrintWriter pw = new PrintWriter(fw);
                    pw.print(texto);
                    fw.close();    
                    tpPestanas.setTitleAt(tpPestanas.getSelectedIndex(), arch.getAbsolutePath());
                    JOptionPane.showMessageDialog(null, "Archivo guardado, "+arch.getAbsolutePath());
                }catch(Exception e){
                    System.out.println("No se pudo guardar archivo "+arch.getAbsolutePath());
                }
            }
        }
    }//GEN-LAST:event_bGuardarComoActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        tpPestanas.add("Nuevo.hk",crearTextBox(""));        
        tpPestanas.setSelectedIndex(tpPestanas.getTabCount()-1);                 
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormInicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormInicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormInicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormInicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormInicio().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu bAbrir;
    private javax.swing.JButton bCargar;
    private javax.swing.JButton bCargarGK;
    private javax.swing.JButton bCargarHK;
    private javax.swing.JButton bCerrar;
    private javax.swing.JMenuItem bCerrarPestana;
    private javax.swing.JMenuItem bGuardar;
    private javax.swing.JMenuItem bGuardarComo;
    private javax.swing.JButton bImportar;
    private javax.swing.JButton bIniciarSesion;
    private javax.swing.JMenuItem bNuevo;
    private javax.swing.JButton bPublicar;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField tbEntrada;
    private javax.swing.JTextArea tbSalida;
    private javax.swing.JTabbedPane tpPestanas;
    // End of variables declaration//GEN-END:variables
}
