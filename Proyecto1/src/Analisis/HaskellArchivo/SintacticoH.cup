package Analisis.HaskellArchivo;

import java_cup.runtime.Symbol;
import Extras.*;
import Analisis.*;
import Reportes.*;

parser code
{://Codigo visible

    public void syntax_error(Symbol s){
        TablaErrores.insertarError("Error Sintactico: "+s.value.toString()+" ",s.right,s.left);
        System.out.println(s.value.toString()+" Fila: " +s.right+", Columna: "+s.left);
        HTML.mostrarErrores();
    }

    public void unrecovered_syntax_error(Symbol s){        
        TablaErrores.insertarError("Error Sintactico: "+s.value.toString()+" ",s.right,s.left);
        System.out.println(s.value.toString()+" Fila: " +s.right+", Columna: "+s.left);
        HTML.mostrarErrores();
    }

:}

action code
{://Codigo de acciones
      
:}

terminal String mod, sqrt, pot, let, calcular, succ, decc, min, max, sum, product, revers, impr, par, asc, desc, length, si, entonces, fin, sino, caso, concatenacion, suma, resta, mult, div,eol,puntoycoma, acceso;
terminal String o, y, mayor, menor, mayorigual, menorigual, igualacion, distinto, igual, dolar, corchetea, corchetec, llavea, llavec, num, id, coma, cadena,caracter, parentesisa, parentesisc,dospuntos;
nonterminal Nodo S, HASKELL, LISTA, VALLISTA, EXP, LPARLISTA, PARLISTA, CALCULAR, SUCC, DECC, MIN, MAX, CONCAT, OTRA;
nonterminal Nodo LVOTRA, VOTRA, ACCESO, OPLISTA, REVERS, IMPR, PAR, ASC, DESC, SUM, PRODUCT, DECFUN, PDECFUN,CUERPO, OPLENGUAJE;
nonterminal Nodo LLAMADO, LPFUN, SI, COND, REL, CASO, VCASO, LCASOS, CASOS, SENTENCIAS, VALFUN, VALCASE, LENGTH, OPLISTAEXP;
nonterminal String OPREL;

precedence left o;
precedence left y;
precedence left mayor, menor, mayorigual,menorigual, distinto, igualacion;
precedence left suma, resta;
precedence left mult, div, mod; 
precedence right pot,sqrt; 
precedence left concatenacion, acceso;

start with S;

S ::=   HASKELL:hk
    {:
        System.out.println("Archivo finalizado");
        SemanticoHaskell.raiz=hk;
        SemanticoHaskell.graficar();
    :};
HASKELL ::= HASKELL:hk DECFUN:decfun{:RESULT=Fabrica.insertarFuncion(hk,decfun);:}
                        | DECFUN:decfun {:RESULT = Fabrica.crearNodoLFunciones(decfun);:};

LISTA ::=  dolar let id:id igual VALLISTA:val dolar{:RESULT = Fabrica.crearNodoLista(id,val);:};

VALLISTA ::=   CONCAT:concat{:RESULT = Fabrica.crearNodoAsigLista(Constante.concat,concat);:}
                          | cadena:cadena 
                            {:                               
                                Nodo cad= Fabrica.crearNodoHoja(cadena);
                                RESULT=Fabrica.crearNodoAsigLista(Constante.cadena,cad);
                            :}
                          | id:id
                            {:
                                Nodo identificador= Fabrica.crearNodoHoja(id);
                                RESULT = Fabrica.crearNodoAsigLista(Constante.id,identificador);
                            :}
                          | OPLISTA:oplista{:RESULT = oplista;:}
                          | corchetea LPARLISTA:lparlista corchetec{:RESULT = lparlista;:}
                          | LLAMADO:llamado{:RESULT = llamado;:};

LPARLISTA ::= LPARLISTA:lparlista coma PARLISTA:parlista{:RESULT = Fabrica.insertarAsigLista(lparlista,parlista);:}
                          | PARLISTA:parlista{:RESULT = Fabrica.crearNodoAsigLista(parlista.getValor(),parlista);:};
PARLISTA ::= CALCULAR:calc{:RESULT = calc;RESULT.setValor(Constante.dim1);:}
                         | caracter:caracter {:RESULT = Fabrica.crearNodoHoja(caracter);RESULT.setValor(Constante.dim1);:}
                         | OTRA:otra{:RESULT = otra;RESULT.setValor(Constante.dim2);:};
OTRA::= corchetea LVOTRA:valotra corchetec{:RESULT = valotra;:};


LVOTRA ::= LVOTRA:lvotra coma VOTRA:votra{:RESULT = Fabrica.insertarAsigLista(lvotra,votra);:}
                    | VOTRA:votra{:RESULT = Fabrica.crearNodoAsigLista(Constante.dim,votra);:};
VOTRA ::= CALCULAR:calc{:RESULT = calc;:}
                  | caracter:caracter {:RESULT = Fabrica.crearNodoHoja(caracter);:} ;

CALCULAR ::= dolar calcular EXP:exp dolar{:RESULT=Fabrica.crearNodoEXP(exp);:};

SUCC ::=    dolar succ VALFUN:valfun dolar{:RESULT = Fabrica.crearNodoFunHK(Constante.succ,valfun);:};

DECC ::=    dolar decc VALFUN:valfun dolar{:RESULT = Fabrica.crearNodoFunHK(Constante.decc,valfun);:};

MIN ::=     dolar min VALLISTA:valfun dolar{:RESULT = Fabrica.crearNodoFunHK(Constante.min,valfun);:}
;

MAX ::=    dolar max VALLISTA:valfun dolar{:RESULT = Fabrica.crearNodoFunHK(Constante.max,valfun);:};

VALFUN ::= CALCULAR:calc{:RESULT = calc;:}
                    | ACCESO:acceso{:RESULT = acceso;:}
                    | OPLISTAEXP:oplistaexp{:RESULT = oplistaexp; :}
                    | CONCAT:concat{:RESULT = concat;:}
                    | cadena:cadena {:RESULT=Fabrica.crearNodoHoja(cadena);:}
                    | id:id{:RESULT = Fabrica.crearNodoHoja(id);:}
                    | OPLISTA:oplista{:RESULT = oplista;:}
                    | corchetea LPARLISTA:lparlista corchetec{:RESULT = lparlista;:}
                    | LLAMADO:llamado{:RESULT = llamado;:}
                    | OPLENGUAJE:oplenguaje{:RESULT = oplenguaje;:};

SUM ::= dolar sum VALLISTA:vallista dolar{:RESULT = Fabrica.crearNodoOpLista(Constante.sum,vallista);:};
PRODUCT ::= dolar product VALLISTA:vallista dolar{:RESULT = Fabrica.crearNodoOpLista(Constante.product,vallista);:};
REVERS ::= dolar revers VALLISTA:vallista dolar{:RESULT = Fabrica.crearNodoOpLista(Constante.revers,vallista);:};
IMPR::= dolar impr VALLISTA:vallista dolar{:RESULT = Fabrica.crearNodoOpLista(Constante.impr,vallista);:};
PAR ::= dolar par VALLISTA:vallista dolar{:RESULT = Fabrica.crearNodoOpLista(Constante.par,vallista);:};
ASC ::= dolar asc VALLISTA:vallista dolar{:RESULT = Fabrica.crearNodoOpLista(Constante.asc,vallista);:};
DESC ::= dolar desc VALLISTA:vallista dolar{:RESULT = Fabrica.crearNodoOpLista(Constante.desc,vallista);:};
LENGTH ::= dolar length VALLISTA:vallista dolar{:RESULT = Fabrica.crearNodoOpLista(Constante.length,vallista);:};

CONCAT ::= VALLISTA:op1 concatenacion VALLISTA:op2{:RESULT = Fabrica.crearNodoConcat(op1,op2);:};

ACCESO ::= VALLISTA:vallista acceso CALCULAR:calcular{:RESULT = Fabrica.crearNodoAcceso(vallista,calcular);:};

OPLISTA ::= REVERS:revers{:RESULT = revers;:}
                     | IMPR:impr{:RESULT = impr;:}
                     | PAR:par{:RESULT = par;:}
                     | ASC:asc{:RESULT = asc;:}
                     | DESC:desc{:RESULT = desc;:};

DECFUN ::= id:id PDECFUN:lpar igual CUERPO:cuerpo fin {:RESULT = Fabrica.crearNodoFuncion(id,lpar,cuerpo);:}
                       | eol{:RESULT=null;:};

PDECFUN ::= PDECFUN:lpar coma id:id
                        {:
                            Nodo par = Fabrica.crearNodoHoja(id);
                            RESULT=Fabrica.insertarPar(lpar,par);
                        :}
                        |id:id
                        {:
                            Nodo par = Fabrica.crearNodoHoja(id);
                            RESULT=Fabrica.crearNodoLPAR(par);
                        :}
                        |{:RESULT=Fabrica.crearNodoLPAR(null);:};
CUERPO ::= CUERPO:cuerpo SENTENCIAS:sent {:RESULT = Fabrica.insertarSentencia(cuerpo,sent);:}
                     | SENTENCIAS:sent {:RESULT=Fabrica.crearNodoCuerpo(sent);:};

SENTENCIAS ::= LISTA:list {:RESULT = list;:}
                             | CALCULAR:calc{:RESULT = calc;:}
                             | SUCC:succ{:RESULT = succ;:}
                             | DECC:decc{:RESULT = decc;:}
                             | MIN:min{:RESULT = min;:}
                             | MAX:max{:RESULT = max;:}
                             | CONCAT:concat{:RESULT = concat;:}
                             | ACCESO:acceso{:RESULT = acceso;:}
                             | SUM:sum{:RESULT = sum;:}
                             | PRODUCT:product{:RESULT = product;:}
                             | REVERS:revers{:RESULT = revers;:}
                             | IMPR:impr{:RESULT = impr;:}
                             | PAR:par{:RESULT = par;:}
                             | ASC:asc{:RESULT = asc;:}
                             | DESC:desc{:RESULT = desc;:}
                             | LENGTH:length{:RESULT = length;:}
                             | LLAMADO:llamado{:RESULT = llamado;:}
                             | SI:si{:RESULT = si;:}
                             | CASO:caso{:RESULT = caso;:}
                             | eol{:RESULT = null;:};

LLAMADO ::= dolar id:id llavea LPFUN:lparfun llavec dolar{:RESULT=Fabrica.crearNodoLlamado(id,lparfun);:};

LPFUN ::= LPFUN:lpar coma VALFUN:par{:RESULT=Fabrica.insertarPar(lpar,par);:}
                        | VALFUN:valfun {:RESULT=Fabrica.crearNodoLPAR(valfun);:}
                        | {:RESULT=Fabrica.crearNodoLPAR(null);:};

EXP ::= EXP:op1 suma EXP:op2{:RESULT=Fabrica.crearNodoOperacion(Constante.suma,op1,op2);:}
             | EXP:op1 resta EXP:op2 {:RESULT=Fabrica.crearNodoOperacion(Constante.resta,op1,op2);:}
             | EXP:op1 mult EXP:op2 {:RESULT=Fabrica.crearNodoOperacion(Constante.mult,op1,op2);:}             
             | EXP:op1 div EXP:op2 {:RESULT=Fabrica.crearNodoOperacion(Constante.div,op1,op2);:}             
             | EXP:op1 mod EXP:op2{:RESULT=Fabrica.crearNodoOperacion(Constante.mod,op1,op2);:}
             | EXP:op1 sqrt EXP:op2 {:RESULT=Fabrica.crearNodoOperacion(Constante.sqrt,op1,op2);:}
             | EXP:op1 pot EXP:op2 {:RESULT=Fabrica.crearNodoOperacion(Constante.pot,op1,op2);:}             
             | resta EXP:op1 {:RESULT=Fabrica.crearNodoOperacion(Constante.resta,op1);:}             
             | parentesisa EXP:exp parentesisc {:RESULT=exp;:}
             | CALCULAR:calc{:RESULT = calc;:}
             | SUCC:succ{:RESULT = succ;:}
             | DECC:decc{:RESULT = decc;:}
             | MIN:min{:RESULT = min;:}
             | MAX:max{:RESULT = max;:}
             | CONCAT:concat{:RESULT = concat;:}
             | ACCESO:acceso{:RESULT = acceso;:}   
             | SUM:sum{:RESULT = sum;:}
             | PRODUCT:product{:RESULT = product;:}
             | LENGTH:length{:RESULT = length;:}
             | LLAMADO:llamado{:RESULT = llamado;:}
             | num:num {:RESULT = Fabrica.crearNodoHoja(num);:}
             | caracter:caracter {:RESULT = Fabrica.crearNodoHoja(caracter);:}
             | id:id{:RESULT = Fabrica.crearNodoHoja(id);:};

SI ::= si COND:cond entonces CUERPO:lv sino CUERPO:lf fin{:RESULT = Fabrica.crearNodoSi(cond,lv,lf);:};

COND ::= REL:op1 o REL:op2{:RESULT=Fabrica.crearNodoOperacion(Constante.o,op1,op2);:}
                | REL:op1 y REL:op2 {:RESULT=Fabrica.crearNodoOperacion(Constante.y,op1,op2);:}
                | REL:rel {:RESULT=rel;:};

REL ::= VALFUN:op1 OPREL:operador VALFUN:op2  {:RESULT=Fabrica.crearNodoOperacion(operador,op1,op2);:};

OPREL ::= mayor {:RESULT = Constante.mayor;:}
                    | menor{:RESULT = Constante.menor;:}
                    | mayorigual{:RESULT = Constante.mayorigual;:}
                    | menorigual{:RESULT = Constante.menorigual;:}
                    | igualacion{:RESULT = Constante.igualacion;:}
                    | distinto{:RESULT = Constante.distinto;:};

CASO ::= caso VALCASE:valcase eol LCASOS:lcasos fin{:RESULT = Fabrica.crearNodoSentCaso(valcase,lcasos);:};

VALCASE ::= LLAMADO:llamado{:RESULT = llamado;:}
                        | id:id{:RESULT = Fabrica.crearNodoHoja(id);:}
                        | ACCESO:acceso{:RESULT = acceso;:}
                        | CALCULAR:calcular{:RESULT = calcular;:}
                        | OPLISTAEXP:oplistaexp{:RESULT = oplistaexp;:}
                        | OPLENGUAJE:oplenguaje{:RESULT = oplenguaje;:};

OPLISTAEXP ::= SUM:sum{:RESULT = sum;:}
                              | PRODUCT:product{:RESULT = product;:}
                              | LENGTH:length{:RESULT = length;:};

OPLENGUAJE ::= SUCC:succ{:RESULT = succ;:}
                               | DECC:decc{:RESULT = decc;:}
                               | MIN:min{:RESULT = min;:}
                               | MAX:max{:RESULT = max;:};

VCASO ::= num:num {:RESULT = Fabrica.crearNodoHoja(num);:}
                    | caracter:caracter {:RESULT = Fabrica.crearNodoHoja(caracter);:};

LCASOS ::= LCASOS:lcasos CASOS:caso{:RESULT = Fabrica.insertarCaso(lcasos,caso);:}
                    | CASOS:caso{:RESULT = Fabrica.crearNodoLCasos(caso);:};

CASOS ::= VCASO:vcaso dospuntos CUERPO:cuerpo puntoycoma eol{:RESULT = Fabrica.crearNodoCaso(vcaso,cuerpo);:};














