
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisis;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoH extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TSHaskell.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoH() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoH(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoH(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\062\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\003\004\000\002\003" +
    "\004\000\002\003\004\000\002\004\006\000\002\005\005" +
    "\000\002\005\003\000\002\006\003\000\002\006\003\000" +
    "\002\010\005\000\002\010\003\000\002\011\006\000\002" +
    "\012\006\000\002\013\006\000\002\014\006\000\002\015" +
    "\006\000\002\016\005\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\020\010\000\002\023\005\000" +
    "\002\023\003\000\002\024\003\000\002\024\003\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\136\000\034\007\023\015\010\016\006\017\007\020" +
    "\022\021\017\022\025\023\031\024\011\050\020\052\016" +
    "\057\021\061\005\001\002\000\004\032\137\001\002\000" +
    "\016\002\uffee\032\uffee\050\uffee\053\uffee\055\uffee\060\uffee" +
    "\001\002\000\014\050\037\051\036\056\040\062\043\063" +
    "\035\001\002\000\014\050\037\051\036\056\040\062\043" +
    "\063\035\001\002\000\014\050\037\051\036\056\040\062" +
    "\043\063\035\001\002\000\014\050\037\051\036\056\040" +
    "\062\043\063\035\001\002\000\004\002\132\001\002\000" +
    "\004\002\ufff9\001\002\000\004\002\uffff\001\002\000\004" +
    "\002\000\001\002\000\010\052\016\061\005\062\126\001" +
    "\002\000\014\050\037\051\036\056\040\062\043\063\035" +
    "\001\002\000\016\010\106\011\103\012\107\013\105\014" +
    "\104\057\062\001\002\000\010\002\uffe3\032\uffe3\050\uffe3" +
    "\001\002\000\014\050\037\051\036\056\040\062\043\063" +
    "\035\001\002\000\004\057\077\001\002\000\004\002\ufffc" +
    "\001\002\000\014\050\037\051\036\056\040\062\043\063" +
    "\035\001\002\000\010\002\uffe1\032\uffe1\050\uffe1\001\002" +
    "\000\004\002\ufffd\001\002\000\004\002\ufffb\001\002\000" +
    "\014\050\037\051\036\056\040\062\043\063\035\001\002" +
    "\000\004\002\ufffa\001\002\000\004\002\ufffe\001\002\000" +
    "\010\002\uffe2\032\uffe2\050\uffe2\001\002\000\014\050\037" +
    "\051\036\056\040\062\043\063\035\001\002\000\032\002" +
    "\uffd0\004\uffd0\005\uffd0\006\uffd0\033\uffd0\034\uffd0\035\uffd0" +
    "\036\uffd0\050\uffd0\055\uffd0\060\uffd0\064\uffd0\001\002\000" +
    "\004\057\062\001\002\000\032\002\uffd2\004\uffd2\005\uffd2" +
    "\006\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\050\uffd2\055" +
    "\uffd2\060\uffd2\064\uffd2\001\002\000\022\002\ufff2\004\046" +
    "\005\047\006\051\033\045\034\044\035\050\036\052\001" +
    "\002\000\032\002\uffd3\004\uffd3\005\uffd3\006\uffd3\033\uffd3" +
    "\034\uffd3\035\uffd3\036\uffd3\050\uffd3\055\uffd3\060\uffd3\064" +
    "\uffd3\001\002\000\032\002\uffd1\004\uffd1\005\uffd1\006\uffd1" +
    "\033\uffd1\034\uffd1\035\uffd1\036\uffd1\050\uffd1\055\uffd1\060" +
    "\uffd1\064\uffd1\001\002\000\014\050\037\051\036\056\040" +
    "\062\043\063\035\001\002\000\014\050\037\051\036\056" +
    "\040\062\043\063\035\001\002\000\014\050\037\051\036" +
    "\056\040\062\043\063\035\001\002\000\014\050\037\051" +
    "\036\056\040\062\043\063\035\001\002\000\014\050\037" +
    "\051\036\056\040\062\043\063\035\001\002\000\014\050" +
    "\037\051\036\056\040\062\043\063\035\001\002\000\014" +
    "\050\037\051\036\056\040\062\043\063\035\001\002\000" +
    "\032\002\uffd8\004\uffd8\005\047\006\051\033\uffd8\034\uffd8" +
    "\035\uffd8\036\uffd8\050\uffd8\055\uffd8\060\uffd8\064\uffd8\001" +
    "\002\000\032\002\uffd5\004\uffd5\005\047\006\051\033\uffd5" +
    "\034\uffd5\035\uffd5\036\uffd5\050\uffd5\055\uffd5\060\uffd5\064" +
    "\uffd5\001\002\000\032\002\uffd9\004\uffd9\005\047\006\051" +
    "\033\uffd9\034\uffd9\035\uffd9\036\uffd9\050\uffd9\055\uffd9\060" +
    "\uffd9\064\uffd9\001\002\000\032\002\uffd6\004\uffd6\005\047" +
    "\006\051\033\uffd6\034\uffd6\035\uffd6\036\uffd6\050\uffd6\055" +
    "\uffd6\060\uffd6\064\uffd6\001\002\000\032\002\uffd7\004\uffd7" +
    "\005\047\006\051\033\uffd7\034\uffd7\035\uffd7\036\uffd7\050" +
    "\uffd7\055\uffd7\060\uffd7\064\uffd7\001\002\000\032\002\uffdb" +
    "\004\046\005\047\006\051\033\uffdb\034\uffdb\035\050\036" +
    "\052\050\uffdb\055\uffdb\060\uffdb\064\uffdb\001\002\000\032" +
    "\002\uffda\004\046\005\047\006\051\033\uffda\034\uffda\035" +
    "\050\036\052\050\uffda\055\uffda\060\uffda\064\uffda\001\002" +
    "\000\004\054\063\001\002\000\020\050\037\051\036\052" +
    "\016\056\040\061\005\062\043\063\035\001\002\000\006" +
    "\055\uffdc\060\uffdc\001\002\000\006\055\uffde\060\uffde\001" +
    "\002\000\024\004\046\005\047\006\051\033\045\034\044" +
    "\035\050\036\052\055\uffdd\060\uffdd\001\002\000\006\055" +
    "\070\060\071\001\002\000\004\050\073\001\002\000\020" +
    "\050\037\051\036\052\016\056\040\061\005\062\043\063" +
    "\035\001\002\000\006\055\uffdf\060\uffdf\001\002\000\034" +
    "\002\uffe0\004\uffe0\005\uffe0\006\uffe0\032\uffe0\033\uffe0\034" +
    "\uffe0\035\uffe0\036\uffe0\050\uffe0\055\uffe0\060\uffe0\064\uffe0" +
    "\001\002\000\022\004\046\005\047\006\051\033\045\034" +
    "\044\035\050\036\052\064\075\001\002\000\032\002\uffd4" +
    "\004\uffd4\005\uffd4\006\uffd4\033\uffd4\034\uffd4\035\uffd4\036" +
    "\uffd4\050\uffd4\055\uffd4\060\uffd4\064\uffd4\001\002\000\022" +
    "\002\ufff3\004\046\005\047\006\051\033\045\034\044\035" +
    "\050\036\052\001\002\000\004\047\100\001\002\000\006" +
    "\052\016\061\005\001\002\000\004\002\ufff0\001\002\000" +
    "\022\002\ufff5\004\046\005\047\006\051\033\045\034\044" +
    "\035\050\036\052\001\002\000\014\050\037\051\036\056" +
    "\040\062\043\063\035\001\002\000\012\050\037\052\016" +
    "\057\021\061\005\001\002\000\012\050\037\052\016\057" +
    "\021\061\005\001\002\000\014\050\037\051\036\056\040" +
    "\062\043\063\035\001\002\000\014\050\037\051\036\056" +
    "\040\062\043\063\035\001\002\000\022\004\046\005\047" +
    "\006\051\033\045\034\044\035\050\036\052\050\111\001" +
    "\002\000\004\002\uffe7\001\002\000\022\004\046\005\047" +
    "\006\051\033\045\034\044\035\050\036\052\050\113\001" +
    "\002\000\004\002\uffe9\001\002\000\004\050\115\001\002" +
    "\000\004\002\uffe6\001\002\000\004\050\117\001\002\000" +
    "\004\002\uffe5\001\002\000\022\004\046\005\047\006\051" +
    "\033\045\034\044\035\050\036\052\050\121\001\002\000" +
    "\004\002\uffe8\001\002\000\022\002\ufff4\004\046\005\047" +
    "\006\051\033\045\034\044\035\050\036\052\001\002\000" +
    "\006\053\uffea\060\uffea\001\002\000\006\053\uffec\060\uffec" +
    "\001\002\000\006\053\130\060\127\001\002\000\006\053" +
    "\uffed\060\uffed\001\002\000\010\052\016\061\005\062\126" +
    "\001\002\000\016\002\uffef\032\uffef\050\uffef\053\uffef\055" +
    "\uffef\060\uffef\001\002\000\006\053\uffeb\060\uffeb\001\002" +
    "\000\004\002\001\001\002\000\022\002\ufff1\004\046\005" +
    "\047\006\051\033\045\034\044\035\050\036\052\001\002" +
    "\000\022\002\ufff8\004\046\005\047\006\051\033\045\034" +
    "\044\035\050\036\052\001\002\000\022\002\ufff6\004\046" +
    "\005\047\006\051\033\045\034\044\035\050\036\052\001" +
    "\002\000\022\002\ufff7\004\046\005\047\006\051\033\045" +
    "\034\044\035\050\036\052\001\002\000\012\050\037\052" +
    "\016\057\021\061\005\001\002\000\004\002\uffe4\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\136\000\032\002\011\003\014\004\013\005\033\011" +
    "\032\012\026\013\023\014\027\015\031\016\012\017\003" +
    "\020\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\135\020\041\001\001\000\006\007\134\020\041" +
    "\001\001\000\006\007\133\020\041\001\001\000\006\007" +
    "\132\020\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\123\006" +
    "\122\010\124\001\001\000\006\007\121\020\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\101\020" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\075\020\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\040\020\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\073\020\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\060\020\041\001\001" +
    "\000\006\007\057\020\041\001\001\000\006\007\056\020" +
    "\041\001\001\000\006\007\055\020\041\001\001\000\006" +
    "\007\054\020\041\001\001\000\006\007\053\020\041\001" +
    "\001\000\006\007\052\020\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\005\063\007\065\020\041\023\066\024" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\005" +
    "\063\007\065\020\041\024\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\117\020" +
    "\041\001\001\000\010\005\033\017\115\020\025\001\001" +
    "\000\010\005\033\017\113\020\025\001\001\000\006\007" +
    "\111\020\041\001\001\000\006\007\107\020\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\123\006" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\033\017\137\020\025" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoH$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoH$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoH$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible

    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("T.T");
        System.err.println(s);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoH$actions {

//Codigo de acciones
      

  private final SintacticoH parser;

  /** Constructor */
  CUP$SintacticoH$actions(SintacticoH parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoH$do_action_part00000000(
    int                        CUP$SintacticoH$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoH$parser,
    java.util.Stack            CUP$SintacticoH$stack,
    int                        CUP$SintacticoH$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoH$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoH$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoH$parser.done_parsing();
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= CONSOLA 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CONSOLA ::= LISTAS 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CONSOLA",1, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CONSOLA ::= CALCULAR 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CONSOLA",1, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CONSOLA ::= SUCC 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CONSOLA",1, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CONSOLA ::= DECC 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CONSOLA",1, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CONSOLA ::= MIN 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CONSOLA",1, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONSOLA ::= MAX 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CONSOLA",1, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONSOLA ::= CONCAT 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CONSOLA",1, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONSOLA ::= sum EXP 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CONSOLA",1, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONSOLA ::= product EXP 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CONSOLA",1, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONSOLA ::= revers EXP 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CONSOLA",1, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONSOLA ::= impr EXP 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CONSOLA",1, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONSOLA ::= par EXP 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CONSOLA",1, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONSOLA ::= asc EXP 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CONSOLA",1, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONSOLA ::= desc EXP 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CONSOLA",1, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONSOLA ::= length EXP 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CONSOLA",1, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LISTAS ::= let id igual LISTA 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LISTAS",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LISTA ::= corchetea LVALLISTA corchetec 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LISTA",3, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTA ::= cadena 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LISTA",3, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VALLISTA ::= caracter 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALLISTA",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VALLISTA ::= LISTA 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALLISTA",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LVALLISTA ::= LVALLISTA coma VALLISTA 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LVALLISTA",6, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LVALLISTA ::= VALLISTA 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LVALLISTA",6, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CALCULAR ::= dolar calcular EXP dolar 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CALCULAR",7, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SUCC ::= dolar succ EXP dolar 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SUCC",8, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECC ::= dolar decc EXP dolar 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("DECC",9, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MIN ::= dolar min VAL dolar 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("MIN",10, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MAX ::= dolar max VAL dolar 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("MAX",11, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONCAT ::= VAL concatenacion VAL 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CONCAT",12, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VAL ::= id 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VAL",13, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VAL ::= LISTA 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VAL",13, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VAL ::= LLAMADO 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VAL",13, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LLAMADO ::= dolar id llavea LPARFUN llavec dolar 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LLAMADO",14, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LPARFUN ::= LPARFUN coma PARFUN 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LPARFUN",17, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LPARFUN ::= PARFUN 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LPARFUN",17, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PARFUN ::= EXP 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("PARFUN",18, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PARFUN ::= LISTA 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("PARFUN",18, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXP ::= EXP suma EXP 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXP ::= EXP resta EXP 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXP ::= EXP mult EXP 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXP ::= EXP div EXP 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXP ::= EXP mod EXP 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXP ::= EXP sqrt EXP 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXP ::= EXP pot EXP 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXP ::= parentesisa EXP parentesisc 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXP ::= LLAMADO 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXP ::= num 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXP ::= caracter 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXP ::= porcentaje 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoH$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoH$do_action(
    int                        CUP$SintacticoH$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoH$parser,
    java.util.Stack            CUP$SintacticoH$stack,
    int                        CUP$SintacticoH$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoH$do_action_part00000000(
                               CUP$SintacticoH$act_num,
                               CUP$SintacticoH$parser,
                               CUP$SintacticoH$stack,
                               CUP$SintacticoH$top);
    }
}

}
