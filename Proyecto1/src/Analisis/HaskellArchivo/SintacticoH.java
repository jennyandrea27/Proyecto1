
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisis.HaskellArchivo;

import java_cup.runtime.Symbol;
import Extras.*;
import Analisis.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoH extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TSHaskell.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoH() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoH(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoH(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\164\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\006\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\005\000\002\007\005\000\002" +
    "\007\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\017\005\000\002\022\003\000\002\022\003" +
    "\000\002\020\005\000\002\020\003\000\002\021\003\000" +
    "\002\021\003\000\002\011\006\000\002\012\006\000\002" +
    "\013\006\000\002\014\006\000\002\015\006\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\032\006" +
    "\000\002\033\006\000\002\025\006\000\002\026\006\000" +
    "\002\027\006\000\002\030\006\000\002\031\006\000\002" +
    "\054\006\000\002\016\005\000\002\023\005\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\034\007\000\002\035\005\000" +
    "\002\035\003\000\002\035\002\000\002\036\004\000\002" +
    "\036\003\000\002\052\003\000\002\052\003\000\002\052" +
    "\003\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\052\003\000" +
    "\002\052\003\000\002\052\003\000\002\052\003\000\002" +
    "\052\003\000\002\052\003\000\002\052\003\000\002\052" +
    "\003\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\037\010\000\002\040\005\000" +
    "\002\040\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\002\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\042\011\000" +
    "\002\043\005\000\002\043\005\000\002\043\003\000\002" +
    "\044\005\000\002\045\003\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\045\003\000\002\045\003" +
    "\000\002\046\007\000\002\047\003\000\002\047\003\000" +
    "\002\050\004\000\002\050\003\000\002\051\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\303\000\004\061\007\001\002\000\006\002\ufffe\061" +
    "\ufffe\001\002\000\006\002\000\061\007\001\002\000\004" +
    "\002\304\001\002\000\010\052\uffd0\061\011\062\uffd0\001" +
    "\002\000\006\052\012\062\013\001\002\000\006\052\uffd1" +
    "\062\uffd1\001\002\000\022\007\036\025\052\031\021\037" +
    "\025\053\032\054\027\061\033\063\015\001\002\000\004" +
    "\061\014\001\002\000\006\052\uffd2\062\uffd2\001\002\000" +
    "\102\004\ufffb\005\ufffb\006\ufffb\007\ufffb\025\ufffb\026\ufffb" +
    "\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\035" +
    "\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb" +
    "\044\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\053" +
    "\ufffb\054\ufffb\057\ufffb\061\ufffb\062\ufffb\063\ufffb\066\ufffb" +
    "\001\002\000\034\007\uffbf\025\uffbf\027\uffbf\030\uffbf\031" +
    "\uffbf\032\uffd4\037\uffbf\040\uffbf\041\uffd4\053\uffbf\054\uffbf" +
    "\061\uffbf\063\uffbf\001\002\000\030\007\uffc4\025\uffc4\027" +
    "\uffc4\030\uffc4\031\uffc4\037\uffc4\040\uffc4\053\uffc4\054\uffc4" +
    "\061\uffc4\063\uffc4\001\002\000\024\007\036\025\052\027" +
    "\303\031\021\037\025\053\032\054\027\061\033\063\015" +
    "\001\002\000\006\053\223\061\226\001\002\000\030\007" +
    "\uffc5\025\uffc5\027\uffc5\030\uffc5\031\uffc5\037\uffc5\040\uffc5" +
    "\053\uffc5\054\uffc5\061\uffc5\063\uffc5\001\002\000\030\007" +
    "\uffce\025\uffce\027\uffce\030\uffce\031\uffce\037\uffce\040\uffce" +
    "\053\uffce\054\uffce\061\uffce\063\uffce\001\002\000\034\007" +
    "\uffc7\025\uffc7\027\uffc7\030\uffc7\031\uffc7\032\ufffc\037\uffc7" +
    "\040\uffc7\041\ufffc\053\uffc7\054\uffc7\061\uffc7\063\uffc7\001" +
    "\002\000\030\007\uffba\025\uffba\027\uffba\030\uffba\031\uffba" +
    "\037\uffba\040\uffba\053\uffba\054\uffba\061\uffba\063\uffba\001" +
    "\002\000\030\007\uffc6\025\uffc6\027\uffc6\030\uffc6\031\uffc6" +
    "\037\uffc6\040\uffc6\053\uffc6\054\uffc6\061\uffc6\063\uffc6\001" +
    "\002\000\010\053\245\054\243\064\251\001\002\000\102" +
    "\004\ufff8\005\ufff8\006\ufff8\007\ufff8\025\ufff8\026\ufff8\027" +
    "\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8" +
    "\036\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\044" +
    "\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8\053\ufff8" +
    "\054\ufff8\057\ufff8\061\ufff8\062\ufff8\063\ufff8\066\ufff8\001" +
    "\002\000\030\007\uffbb\025\uffbb\027\uffbb\030\uffbb\031\uffbb" +
    "\037\uffbb\040\uffbb\053\uffbb\054\uffbb\061\uffbb\063\uffbb\001" +
    "\002\000\036\010\212\011\214\012\207\013\211\014\215" +
    "\015\213\016\216\017\152\020\155\021\153\022\154\023" +
    "\156\024\210\061\157\001\002\000\102\004\ufffa\005\ufffa" +
    "\006\ufffa\007\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031" +
    "\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa" +
    "\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\045\ufffa\046" +
    "\ufffa\047\ufffa\050\ufffa\051\ufffa\053\ufffa\054\ufffa\057\ufffa" +
    "\061\ufffa\062\ufffa\063\ufffa\066\ufffa\001\002\000\034\007" +
    "\uffc3\025\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffd8\037\uffc3" +
    "\040\uffc3\041\uffd8\053\uffc3\054\uffc3\061\uffc3\063\uffc3\001" +
    "\002\000\034\007\uffc1\025\uffc1\027\uffc1\030\uffc1\031\uffc1" +
    "\032\uffd6\037\uffc1\040\uffc1\041\uffd6\053\uffc1\054\uffc1\061" +
    "\uffc1\063\uffc1\001\002\000\004\061\204\001\002\000\030" +
    "\007\uffbe\025\uffbe\027\uffbe\030\uffbe\031\uffbe\037\uffbe\040" +
    "\uffbe\053\uffbe\054\uffbe\061\uffbe\063\uffbe\001\002\000\030" +
    "\007\uffca\025\uffca\027\uffca\030\uffca\031\uffca\037\uffca\040" +
    "\uffca\053\uffca\054\uffca\061\uffca\063\uffca\001\002\000\030" +
    "\007\uffbc\025\uffbc\027\uffbc\030\uffbc\031\uffbc\037\uffbc\040" +
    "\uffbc\053\uffbc\054\uffbc\061\uffbc\063\uffbc\001\002\000\030" +
    "\007\uffcb\025\uffcb\027\uffcb\030\uffcb\031\uffcb\037\uffcb\040" +
    "\uffcb\053\uffcb\054\uffcb\061\uffcb\063\uffcb\001\002\000\034" +
    "\007\uffbd\025\uffbd\027\uffbd\030\uffbd\031\uffbd\032\ufff9\037" +
    "\uffbd\040\uffbd\041\ufff9\053\uffbd\054\uffbd\061\uffbd\063\uffbd" +
    "\001\002\000\030\007\uffc9\025\uffc9\027\uffc9\030\uffc9\031" +
    "\uffc9\037\uffc9\040\uffc9\053\uffc9\054\uffc9\061\uffc9\063\uffc9" +
    "\001\002\000\034\007\uffc0\025\uffc0\027\uffc0\030\uffc0\031" +
    "\uffc0\032\uffd5\037\uffc0\040\uffc0\041\uffd5\053\uffc0\054\uffc0" +
    "\061\uffc0\063\uffc0\001\002\000\006\032\145\041\144\001" +
    "\002\000\030\007\uffcc\025\uffcc\027\uffcc\030\uffcc\031\uffcc" +
    "\037\uffcc\040\uffcc\053\uffcc\054\uffcc\061\uffcc\063\uffcc\001" +
    "\002\000\030\007\uffc8\025\uffc8\027\uffc8\030\uffc8\031\uffc8" +
    "\037\uffc8\040\uffc8\053\uffc8\054\uffc8\061\uffc8\063\uffc8\001" +
    "\002\000\030\007\uffcd\025\uffcd\027\uffcd\030\uffcd\031\uffcd" +
    "\037\uffcd\040\uffcd\053\uffcd\054\uffcd\061\uffcd\063\uffcd\001" +
    "\002\000\020\053\032\054\027\060\062\061\033\063\015" +
    "\064\064\065\056\001\002\000\034\007\uffc2\025\uffc2\027" +
    "\uffc2\030\uffc2\031\uffc2\032\uffd7\037\uffc2\040\uffc2\041\uffd7" +
    "\053\uffc2\054\uffc2\061\uffc2\063\uffc2\001\002\000\102\004" +
    "\uffd4\005\uffd4\006\uffd4\007\uffd4\025\uffd4\026\uffd4\027\uffd4" +
    "\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036" +
    "\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4" +
    "\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\053\uffd4\054" +
    "\uffd4\057\uffd4\061\uffd4\062\uffd4\063\uffd4\066\uffd4\001\002" +
    "\000\076\004\uffa3\005\uffa3\006\uffa3\007\uffa3\025\uffa3\026" +
    "\uffa3\027\uffa3\030\uffa3\031\uffa3\033\uffa3\034\uffa3\035\uffa3" +
    "\036\uffa3\037\uffa3\040\uffa3\042\uffa3\043\uffa3\044\uffa3\045" +
    "\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3\053\uffa3\054\uffa3" +
    "\057\uffa3\061\uffa3\062\uffa3\063\uffa3\066\uffa3\001\002\000" +
    "\020\053\032\054\027\060\062\061\033\063\015\064\064" +
    "\065\056\001\002\000\076\004\uffa4\005\uffa4\006\uffa4\007" +
    "\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\033\uffa4" +
    "\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\042\uffa4\043" +
    "\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4" +
    "\053\uffa4\054\uffa4\057\uffa4\061\uffa4\062\uffa4\063\uffa4\066" +
    "\uffa4\001\002\000\010\026\uff9b\042\136\043\137\001\002" +
    "\000\102\004\uffa6\005\uffa6\006\uffa6\007\uffa6\025\uffa6\026" +
    "\uffa6\027\uffa6\030\uffa6\031\uffa6\032\ufffc\033\uffa6\034\uffa6" +
    "\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041\ufffc\042\uffa6\043" +
    "\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6" +
    "\053\uffa6\054\uffa6\057\uffa6\061\uffa6\062\uffa6\063\uffa6\066" +
    "\uffa6\001\002\000\076\004\uffa0\005\uffa0\006\uffa0\007\uffa0" +
    "\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\033\uffa0\034" +
    "\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\042\uffa0\043\uffa0" +
    "\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\053" +
    "\uffa0\054\uffa0\057\uffa0\061\uffa0\062\uffa0\063\uffa0\066\uffa0" +
    "\001\002\000\076\004\uffa5\005\uffa5\006\uffa5\007\uffa5\025" +
    "\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\033\uffa5\034\uffa5" +
    "\035\uffa5\036\uffa5\037\uffa5\040\uffa5\042\uffa5\043\uffa5\044" +
    "\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\053\uffa5" +
    "\054\uffa5\057\uffa5\061\uffa5\062\uffa5\063\uffa5\066\uffa5\001" +
    "\002\000\076\004\uff9f\005\uff9f\006\uff9f\007\uff9f\025\uff9f" +
    "\026\uff9f\027\uff9f\030\uff9f\031\uff9f\033\uff9f\034\uff9f\035" +
    "\uff9f\036\uff9f\037\uff9f\040\uff9f\042\uff9f\043\uff9f\044\uff9f" +
    "\045\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f\053\uff9f\054" +
    "\uff9f\057\uff9f\061\uff9f\062\uff9f\063\uff9f\066\uff9f\001\002" +
    "\000\034\004\121\005\124\006\117\033\112\034\111\035" +
    "\114\036\110\044\125\045\115\046\113\047\123\050\120" +
    "\051\116\001\002\000\102\004\uffd8\005\uffd8\006\uffd8\007" +
    "\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8" +
    "\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041" +
    "\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8" +
    "\050\uffd8\051\uffd8\053\uffd8\054\uffd8\057\uffd8\061\uffd8\062" +
    "\uffd8\063\uffd8\066\uffd8\001\002\000\102\004\uffd6\005\uffd6" +
    "\006\uffd6\007\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031" +
    "\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6" +
    "\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046" +
    "\uffd6\047\uffd6\050\uffd6\051\uffd6\053\uffd6\054\uffd6\057\uffd6" +
    "\061\uffd6\062\uffd6\063\uffd6\066\uffd6\001\002\000\076\004" +
    "\uffa2\005\uffa2\006\uffa2\007\uffa2\025\uffa2\026\uffa2\027\uffa2" +
    "\030\uffa2\031\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037" +
    "\uffa2\040\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2" +
    "\047\uffa2\050\uffa2\051\uffa2\053\uffa2\054\uffa2\057\uffa2\061" +
    "\uffa2\062\uffa2\063\uffa2\066\uffa2\001\002\000\076\004\uffa9" +
    "\005\uffa9\006\uffa9\007\uffa9\025\uffa9\026\uffa9\027\uffa9\030" +
    "\uffa9\031\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9" +
    "\040\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047" +
    "\uffa9\050\uffa9\051\uffa9\053\uffa9\054\uffa9\057\uffa9\061\uffa9" +
    "\062\uffa9\063\uffa9\066\uffa9\001\002\000\102\004\uffa1\005" +
    "\uffa1\006\uffa1\007\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1" +
    "\031\uffa1\032\ufff9\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037" +
    "\uffa1\040\uffa1\041\ufff9\042\uffa1\043\uffa1\044\uffa1\045\uffa1" +
    "\046\uffa1\047\uffa1\050\uffa1\051\uffa1\053\uffa1\054\uffa1\057" +
    "\uffa1\061\uffa1\062\uffa1\063\uffa1\066\uffa1\001\002\000\076" +
    "\004\uffaa\005\uffaa\006\uffaa\007\uffaa\025\uffaa\026\uffaa\027" +
    "\uffaa\030\uffaa\031\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa" +
    "\037\uffaa\040\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046" +
    "\uffaa\047\uffaa\050\uffaa\051\uffaa\053\uffaa\054\uffaa\057\uffaa" +
    "\061\uffaa\062\uffaa\063\uffaa\066\uffaa\001\002\000\004\026" +
    "\102\001\002\000\102\004\uffd5\005\uffd5\006\uffd5\007\uffd5" +
    "\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033" +
    "\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5" +
    "\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050" +
    "\uffd5\051\uffd5\053\uffd5\054\uffd5\057\uffd5\061\uffd5\062\uffd5" +
    "\063\uffd5\066\uffd5\001\002\000\076\004\uffa8\005\uffa8\006" +
    "\uffa8\007\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8" +
    "\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\042" +
    "\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8" +
    "\051\uffa8\053\uffa8\054\uffa8\057\uffa8\061\uffa8\062\uffa8\063" +
    "\uffa8\066\uffa8\001\002\000\076\004\uffa7\005\uffa7\006\uffa7" +
    "\007\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\033" +
    "\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\042\uffa7" +
    "\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051" +
    "\uffa7\053\uffa7\054\uffa7\057\uffa7\061\uffa7\062\uffa7\063\uffa7" +
    "\066\uffa7\001\002\000\076\004\uffab\005\uffab\006\uffab\007" +
    "\uffab\025\uffab\026\uffab\027\uffab\030\uffab\031\uffab\033\uffab" +
    "\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab\042\uffab\043" +
    "\uffab\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab" +
    "\053\uffab\054\uffab\057\uffab\061\uffab\062\uffab\063\uffab\066" +
    "\uffab\001\002\000\102\004\uffd7\005\uffd7\006\uffd7\007\uffd7" +
    "\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033" +
    "\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7" +
    "\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7\050" +
    "\uffd7\051\uffd7\053\uffd7\054\uffd7\057\uffd7\061\uffd7\062\uffd7" +
    "\063\uffd7\066\uffd7\001\002\000\022\007\036\025\052\031" +
    "\021\037\025\053\032\054\027\061\033\063\015\001\002" +
    "\000\024\007\036\025\052\030\104\031\021\037\025\053" +
    "\032\054\027\061\033\063\015\001\002\000\022\007\036" +
    "\025\052\031\021\037\025\053\032\054\027\061\033\063" +
    "\015\001\002\000\030\007\uffcf\025\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\037\uffcf\040\uffcf\053\uffcf\054\uffcf\061\uffcf\063" +
    "\uffcf\001\002\000\024\007\036\025\052\027\107\031\021" +
    "\037\025\053\032\054\027\061\033\063\015\001\002\000" +
    "\030\007\uff9e\025\uff9e\027\uff9e\030\uff9e\031\uff9e\037\uff9e" +
    "\040\uff9e\053\uff9e\054\uff9e\061\uff9e\063\uff9e\001\002\000" +
    "\020\053\032\054\027\060\062\061\033\063\015\064\064" +
    "\065\056\001\002\000\020\053\032\054\027\060\062\061" +
    "\033\063\015\064\064\065\056\001\002\000\020\053\032" +
    "\054\027\060\062\061\033\063\015\064\064\065\056\001" +
    "\002\000\020\053\uff97\054\uff97\060\uff97\061\uff97\063\uff97" +
    "\064\uff97\065\uff97\001\002\000\020\053\032\054\027\060" +
    "\062\061\033\063\015\064\064\065\056\001\002\000\020" +
    "\053\uff98\054\uff98\060\uff98\061\uff98\063\uff98\064\uff98\065" +
    "\uff98\001\002\000\020\053\uff94\054\uff94\060\uff94\061\uff94" +
    "\063\uff94\064\uff94\065\uff94\001\002\000\020\053\032\054" +
    "\027\060\062\061\033\063\015\064\064\065\056\001\002" +
    "\000\020\053\uff95\054\uff95\060\uff95\061\uff95\063\uff95\064" +
    "\uff95\065\uff95\001\002\000\020\053\032\054\027\060\062" +
    "\061\033\063\015\064\064\065\056\001\002\000\020\053" +
    "\032\054\027\060\062\061\033\063\015\064\064\065\056" +
    "\001\002\000\020\053\uff96\054\uff96\060\uff96\061\uff96\063" +
    "\uff96\064\uff96\065\uff96\001\002\000\020\053\032\054\027" +
    "\060\062\061\033\063\015\064\064\065\056\001\002\000" +
    "\020\053\uff99\054\uff99\060\uff99\061\uff99\063\uff99\064\uff99" +
    "\065\uff99\001\002\000\076\004\uffae\005\124\006\117\007" +
    "\uffae\025\uffae\026\uffae\027\uffae\030\uffae\031\uffae\033\uffae" +
    "\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae\042\uffae\043" +
    "\uffae\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae" +
    "\053\uffae\054\uffae\057\uffae\061\uffae\062\uffae\063\uffae\066" +
    "\uffae\001\002\000\026\004\121\005\124\006\117\026\uff9a" +
    "\033\112\034\111\035\114\036\110\042\uff9a\043\uff9a\001" +
    "\002\000\076\004\uffaf\005\124\006\117\007\uffaf\025\uffaf" +
    "\026\uffaf\027\uffaf\030\uffaf\031\uffaf\033\uffaf\034\uffaf\035" +
    "\uffaf\036\uffaf\037\uffaf\040\uffaf\042\uffaf\043\uffaf\044\uffaf" +
    "\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\053\uffaf\054" +
    "\uffaf\057\uffaf\061\uffaf\062\uffaf\063\uffaf\066\uffaf\001\002" +
    "\000\076\004\uffad\005\124\006\117\007\uffad\025\uffad\026" +
    "\uffad\027\uffad\030\uffad\031\uffad\033\uffad\034\uffad\035\uffad" +
    "\036\uffad\037\uffad\040\uffad\042\uffad\043\uffad\044\uffad\045" +
    "\uffad\046\uffad\047\uffad\050\uffad\051\uffad\053\uffad\054\uffad" +
    "\057\uffad\061\uffad\062\uffad\063\uffad\066\uffad\001\002\000" +
    "\076\004\uffb1\005\124\006\117\007\uffb1\025\uffb1\026\uffb1" +
    "\027\uffb1\030\uffb1\031\uffb1\033\uffb1\034\uffb1\035\uffb1\036" +
    "\uffb1\037\uffb1\040\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1" +
    "\046\uffb1\047\uffb1\050\uffb1\051\uffb1\053\uffb1\054\uffb1\057" +
    "\uffb1\061\uffb1\062\uffb1\063\uffb1\066\uffb1\001\002\000\076" +
    "\004\121\005\124\006\117\007\uffb3\025\uffb3\026\uffb3\027" +
    "\uffb3\030\uffb3\031\uffb3\033\uffb3\034\uffb3\035\114\036\110" +
    "\037\uffb3\040\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046" +
    "\uffb3\047\uffb3\050\uffb3\051\uffb3\053\uffb3\054\uffb3\057\uffb3" +
    "\061\uffb3\062\uffb3\063\uffb3\066\uffb3\001\002\000\076\004" +
    "\121\005\124\006\117\007\uffb2\025\uffb2\026\uffb2\027\uffb2" +
    "\030\uffb2\031\uffb2\033\uffb2\034\uffb2\035\114\036\110\037" +
    "\uffb2\040\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2" +
    "\047\uffb2\050\uffb2\051\uffb2\053\uffb2\054\uffb2\057\uffb2\061" +
    "\uffb2\062\uffb2\063\uffb2\066\uffb2\001\002\000\076\004\uffb0" +
    "\005\124\006\117\007\uffb0\025\uffb0\026\uffb0\027\uffb0\030" +
    "\uffb0\031\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0" +
    "\040\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047" +
    "\uffb0\050\uffb0\051\uffb0\053\uffb0\054\uffb0\057\uffb0\061\uffb0" +
    "\062\uffb0\063\uffb0\066\uffb0\001\002\000\020\053\032\054" +
    "\027\060\062\061\033\063\015\064\064\065\056\001\002" +
    "\000\020\053\032\054\027\060\062\061\033\063\015\064" +
    "\064\065\056\001\002\000\004\026\uff9c\001\002\000\004" +
    "\026\uff9d\001\002\000\022\004\121\005\124\006\117\033" +
    "\112\034\111\035\114\036\110\066\143\001\002\000\076" +
    "\004\uffac\005\uffac\006\uffac\007\uffac\025\uffac\026\uffac\027" +
    "\uffac\030\uffac\031\uffac\033\uffac\034\uffac\035\uffac\036\uffac" +
    "\037\uffac\040\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046" +
    "\uffac\047\uffac\050\uffac\051\uffac\053\uffac\054\uffac\057\uffac" +
    "\061\uffac\062\uffac\063\uffac\066\uffac\001\002\000\020\053" +
    "\032\054\027\060\062\061\033\063\015\064\064\065\056" +
    "\001\002\000\012\053\146\054\027\061\033\063\015\001" +
    "\002\000\016\017\152\020\155\021\153\022\154\023\156" +
    "\061\157\001\002\000\102\004\uffda\005\uffda\006\uffda\007" +
    "\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda" +
    "\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041" +
    "\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046\uffda\047\uffda" +
    "\050\uffda\051\uffda\053\uffda\054\uffda\057\uffda\061\uffda\062" +
    "\uffda\063\uffda\066\uffda\001\002\000\102\004\ufffc\005\ufffc" +
    "\006\ufffc\007\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031" +
    "\ufffc\032\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc" +
    "\040\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc\046" +
    "\ufffc\047\ufffc\050\ufffc\051\ufffc\053\ufffc\054\ufffc\057\ufffc" +
    "\061\ufffc\062\ufffc\063\ufffc\066\ufffc\001\002\000\102\004" +
    "\ufff9\005\ufff9\006\ufff9\007\ufff9\025\ufff9\026\ufff9\027\ufff9" +
    "\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036" +
    "\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9" +
    "\045\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9\053\ufff9\054" +
    "\ufff9\057\ufff9\061\ufff9\062\ufff9\063\ufff9\066\ufff9\001\002" +
    "\000\012\053\146\054\027\061\033\063\015\001\002\000" +
    "\012\053\146\054\027\061\033\063\015\001\002\000\012" +
    "\053\146\054\027\061\033\063\015\001\002\000\012\053" +
    "\146\054\027\061\033\063\015\001\002\000\012\053\146" +
    "\054\027\061\033\063\015\001\002\000\004\056\160\001" +
    "\002\000\024\053\032\054\027\057\uffb4\060\062\061\162" +
    "\062\uffb4\063\015\064\064\065\056\001\002\000\024\004" +
    "\121\005\124\006\117\033\112\034\111\035\114\036\110" +
    "\057\uffb6\062\uffb6\001\002\000\012\032\ufffa\041\ufffa\057" +
    "\uffb5\062\uffb5\001\002\000\006\057\165\062\166\001\002" +
    "\000\006\057\uffb7\062\uffb7\001\002\000\004\053\170\001" +
    "\002\000\024\053\032\054\027\057\uffb4\060\062\061\162" +
    "\062\uffb4\063\015\064\064\065\056\001\002\000\006\057" +
    "\uffb8\062\uffb8\001\002\000\102\004\uffb9\005\uffb9\006\uffb9" +
    "\007\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032" +
    "\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9" +
    "\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047" +
    "\uffb9\050\uffb9\051\uffb9\053\uffb9\054\uffb9\057\uffb9\061\uffb9" +
    "\062\uffb9\063\uffb9\066\uffb9\001\002\000\006\032\145\053" +
    "\172\001\002\000\102\004\uffdc\005\uffdc\006\uffdc\007\uffdc" +
    "\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033" +
    "\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc" +
    "\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\050" +
    "\uffdc\051\uffdc\053\uffdc\054\uffdc\057\uffdc\061\uffdc\062\uffdc" +
    "\063\uffdc\066\uffdc\001\002\000\006\032\145\053\174\001" +
    "\002\000\102\004\uffdf\005\uffdf\006\uffdf\007\uffdf\025\uffdf" +
    "\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034" +
    "\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf" +
    "\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051" +
    "\uffdf\053\uffdf\054\uffdf\057\uffdf\061\uffdf\062\uffdf\063\uffdf" +
    "\066\uffdf\001\002\000\006\032\145\053\176\001\002\000" +
    "\102\004\uffdd\005\uffdd\006\uffdd\007\uffdd\025\uffdd\026\uffdd" +
    "\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035" +
    "\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd" +
    "\044\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\053" +
    "\uffdd\054\uffdd\057\uffdd\061\uffdd\062\uffdd\063\uffdd\066\uffdd" +
    "\001\002\000\006\032\145\053\200\001\002\000\102\004" +
    "\uffde\005\uffde\006\uffde\007\uffde\025\uffde\026\uffde\027\uffde" +
    "\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036" +
    "\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde\044\uffde" +
    "\045\uffde\046\uffde\047\uffde\050\uffde\051\uffde\053\uffde\054" +
    "\uffde\057\uffde\061\uffde\062\uffde\063\uffde\066\uffde\001\002" +
    "\000\006\032\145\053\202\001\002\000\102\004\uffe0\005" +
    "\uffe0\006\uffe0\007\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0" +
    "\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037" +
    "\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0" +
    "\046\uffe0\047\uffe0\050\uffe0\051\uffe0\053\uffe0\054\uffe0\057" +
    "\uffe0\061\uffe0\062\uffe0\063\uffe0\066\uffe0\001\002\000\076" +
    "\004\uffd9\005\uffd9\006\uffd9\007\uffd9\025\uffd9\026\uffd9\027" +
    "\uffd9\030\uffd9\031\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9" +
    "\037\uffd9\040\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046" +
    "\uffd9\047\uffd9\050\uffd9\051\uffd9\053\uffd9\054\uffd9\057\uffd9" +
    "\061\uffd9\062\uffd9\063\uffd9\066\uffd9\001\002\000\004\052" +
    "\205\001\002\000\012\053\146\054\027\061\033\063\015" +
    "\001\002\000\032\007\ufffd\025\ufffd\027\ufffd\030\ufffd\031" +
    "\ufffd\032\145\037\ufffd\040\ufffd\053\ufffd\054\ufffd\061\ufffd" +
    "\063\ufffd\001\002\000\006\053\223\061\226\001\002\000" +
    "\012\053\146\054\027\061\033\063\015\001\002\000\012" +
    "\053\146\054\027\061\033\063\015\001\002\000\020\053" +
    "\032\054\027\060\062\061\033\063\015\064\064\065\056" +
    "\001\002\000\012\053\146\054\027\061\033\063\015\001" +
    "\002\000\006\053\223\061\226\001\002\000\012\053\146" +
    "\054\027\061\033\063\015\001\002\000\012\053\146\054" +
    "\027\061\033\063\015\001\002\000\006\032\145\053\220" +
    "\001\002\000\076\004\uffe1\005\uffe1\006\uffe1\007\uffe1\025" +
    "\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\033\uffe1\034\uffe1" +
    "\035\uffe1\036\uffe1\037\uffe1\040\uffe1\042\uffe1\043\uffe1\044" +
    "\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1\053\uffe1" +
    "\054\uffe1\057\uffe1\061\uffe1\062\uffe1\063\uffe1\066\uffe1\001" +
    "\002\000\006\032\145\053\222\001\002\000\076\004\uffe6" +
    "\005\uffe6\006\uffe6\007\uffe6\025\uffe6\026\uffe6\027\uffe6\030" +
    "\uffe6\031\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6" +
    "\040\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6\047" +
    "\uffe6\050\uffe6\051\uffe6\053\uffe6\054\uffe6\057\uffe6\061\uffe6" +
    "\062\uffe6\063\uffe6\066\uffe6\001\002\000\006\010\212\061" +
    "\157\001\002\000\006\037\uffe4\053\uffe4\001\002\000\006" +
    "\037\uffe3\053\uffe3\001\002\000\006\037\uffe5\053\uffe5\001" +
    "\002\000\004\053\230\001\002\000\076\004\uffe9\005\uffe9" +
    "\006\uffe9\007\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031" +
    "\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9" +
    "\042\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9\050" +
    "\uffe9\051\uffe9\053\uffe9\054\uffe9\057\uffe9\061\uffe9\062\uffe9" +
    "\063\uffe9\066\uffe9\001\002\000\006\032\145\053\232\001" +
    "\002\000\076\004\uffe2\005\uffe2\006\uffe2\007\uffe2\025\uffe2" +
    "\026\uffe2\027\uffe2\030\uffe2\031\uffe2\033\uffe2\034\uffe2\035" +
    "\uffe2\036\uffe2\037\uffe2\040\uffe2\042\uffe2\043\uffe2\044\uffe2" +
    "\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\053\uffe2\054" +
    "\uffe2\057\uffe2\061\uffe2\062\uffe2\063\uffe2\066\uffe2\001\002" +
    "\000\022\004\121\005\124\006\117\033\112\034\111\035" +
    "\114\036\110\053\234\001\002\000\102\004\uffea\005\uffea" +
    "\006\uffea\007\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031" +
    "\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea" +
    "\042\uffea\043\uffea\044\uffea\045\uffea\046\uffea\047\uffea\050" +
    "\uffea\051\uffea\053\uffea\054\uffea\055\uffea\057\uffea\061\uffea" +
    "\062\uffea\063\uffea\066\uffea\067\uffea\001\002\000\006\032" +
    "\145\053\236\001\002\000\076\004\uffe7\005\uffe7\006\uffe7" +
    "\007\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\033" +
    "\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\042\uffe7" +
    "\043\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7\051" +
    "\uffe7\053\uffe7\054\uffe7\057\uffe7\061\uffe7\062\uffe7\063\uffe7" +
    "\066\uffe7\001\002\000\006\032\145\053\240\001\002\000" +
    "\076\004\uffdb\005\uffdb\006\uffdb\007\uffdb\025\uffdb\026\uffdb" +
    "\027\uffdb\030\uffdb\031\uffdb\033\uffdb\034\uffdb\035\uffdb\036" +
    "\uffdb\037\uffdb\040\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb" +
    "\046\uffdb\047\uffdb\050\uffdb\051\uffdb\053\uffdb\054\uffdb\057" +
    "\uffdb\061\uffdb\062\uffdb\063\uffdb\066\uffdb\001\002\000\004" +
    "\053\242\001\002\000\076\004\uffe8\005\uffe8\006\uffe8\007" +
    "\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\033\uffe8" +
    "\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\042\uffe8\043" +
    "\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8" +
    "\053\uffe8\054\uffe8\057\uffe8\061\uffe8\062\uffe8\063\uffe8\066" +
    "\uffe8\001\002\000\010\053\245\063\256\064\262\001\002" +
    "\000\006\055\ufff5\062\ufff5\001\002\000\004\010\212\001" +
    "\002\000\006\055\253\062\252\001\002\000\006\055\ufff4" +
    "\062\ufff4\001\002\000\006\055\ufff2\062\ufff2\001\002\000" +
    "\006\055\ufff3\062\ufff3\001\002\000\010\053\245\054\243" +
    "\064\251\001\002\000\102\004\ufff7\005\ufff7\006\ufff7\007" +
    "\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7" +
    "\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041" +
    "\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7" +
    "\050\ufff7\051\ufff7\053\ufff7\054\ufff7\057\ufff7\061\ufff7\062" +
    "\ufff7\063\ufff7\066\ufff7\001\002\000\006\055\ufff6\062\ufff6" +
    "\001\002\000\006\055\uffef\062\264\001\002\000\004\055" +
    "\ufff0\001\002\000\004\055\263\001\002\000\006\055\uffec" +
    "\062\uffec\001\002\000\006\055\uffed\062\uffed\001\002\000" +
    "\006\055\uffeb\062\uffeb\001\002\000\006\055\ufff1\062\ufff1" +
    "\001\002\000\006\053\245\064\262\001\002\000\006\055" +
    "\uffee\062\uffee\001\002\000\004\037\267\001\002\000\006" +
    "\053\245\064\274\001\002\000\010\027\uff8f\053\uff8f\064" +
    "\uff8f\001\002\000\010\027\302\053\245\064\274\001\002" +
    "\000\004\067\uff92\001\002\000\004\067\275\001\002\000" +
    "\004\067\uff91\001\002\000\022\007\036\025\052\031\021" +
    "\037\025\053\032\054\027\061\033\063\015\001\002\000" +
    "\024\007\036\025\052\031\021\037\025\040\277\053\032" +
    "\054\027\061\033\063\015\001\002\000\004\037\300\001" +
    "\002\000\010\027\uff8e\053\uff8e\064\uff8e\001\002\000\010" +
    "\027\uff90\053\uff90\064\uff90\001\002\000\030\007\uff93\025" +
    "\uff93\027\uff93\030\uff93\031\uff93\037\uff93\040\uff93\053\uff93" +
    "\054\uff93\061\uff93\063\uff93\001\002\000\006\002\uffd3\061" +
    "\uffd3\001\002\000\004\002\001\001\002\000\006\002\uffff" +
    "\061\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\303\000\010\002\005\003\004\034\003\001\001\000" +
    "\002\001\001\000\004\034\304\001\001\000\002\001\001" +
    "\000\004\035\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\004\050\005\045\011\046\012\041\013\037" +
    "\014\043\015\047\016\023\023\025\024\027\025\033\026" +
    "\052\027\034\030\044\031\015\032\021\033\016\036\017" +
    "\037\042\042\040\046\030\052\022\054\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\004\050\005\045\011" +
    "\046\012\041\013\037\014\043\015\047\016\023\023\025" +
    "\024\027\025\033\026\052\027\034\030\044\031\015\032" +
    "\021\033\016\037\042\042\040\046\030\052\104\054\036" +
    "\001\001\000\010\011\223\037\224\053\265\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\245\010\243\011" +
    "\246\017\247\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\005\045\006\064\011\077\012\072\013\070\014\075" +
    "\015\076\016\060\023\062\024\027\025\065\026\100\027" +
    "\066\030\074\031\053\032\056\033\054\037\071\043\073" +
    "\044\057\054\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\005\045\006\141\011\077" +
    "\012\072\013\070\014\075\015\076\016\060\023\062\024" +
    "\027\025\065\026\100\027\066\030\074\031\053\032\056" +
    "\033\054\037\071\054\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\045\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\060\004\050\005" +
    "\045\011\046\012\041\013\037\014\043\015\047\016\023" +
    "\023\025\024\027\025\033\026\052\027\034\030\044\031" +
    "\015\032\021\033\016\036\102\037\042\042\040\046\030" +
    "\052\022\054\036\001\001\000\056\004\050\005\045\011" +
    "\046\012\041\013\037\014\043\015\047\016\023\023\025" +
    "\024\027\025\033\026\052\027\034\030\044\031\015\032" +
    "\021\033\016\037\042\042\040\046\030\052\104\054\036" +
    "\001\001\000\060\004\050\005\045\011\046\012\041\013" +
    "\037\014\043\015\047\016\023\023\025\024\027\025\033" +
    "\026\052\027\034\030\044\031\015\032\021\033\016\036" +
    "\105\037\042\042\040\046\030\052\022\054\036\001\001" +
    "\000\002\001\001\000\056\004\050\005\045\011\046\012" +
    "\041\013\037\014\043\015\047\016\023\023\025\024\027" +
    "\025\033\026\052\027\034\030\044\031\015\032\021\033" +
    "\016\037\042\042\040\046\030\052\104\054\036\001\001" +
    "\000\002\001\001\000\050\005\045\006\134\011\077\012" +
    "\072\013\070\014\075\015\076\016\060\023\062\024\027" +
    "\025\065\026\100\027\066\030\074\031\053\032\056\033" +
    "\054\037\071\054\067\001\001\000\050\005\045\006\133" +
    "\011\077\012\072\013\070\014\075\015\076\016\060\023" +
    "\062\024\027\025\065\026\100\027\066\030\074\031\053" +
    "\032\056\033\054\037\071\054\067\001\001\000\050\005" +
    "\045\006\132\011\077\012\072\013\070\014\075\015\076" +
    "\016\060\023\062\024\027\025\065\026\100\027\066\030" +
    "\074\031\053\032\056\033\054\037\071\054\067\001\001" +
    "\000\002\001\001\000\050\005\045\006\131\011\077\012" +
    "\072\013\070\014\075\015\076\016\060\023\062\024\027" +
    "\025\065\026\100\027\066\030\074\031\053\032\056\033" +
    "\054\037\071\054\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\005\045\006\130\011\077\012\072\013" +
    "\070\014\075\015\076\016\060\023\062\024\027\025\065" +
    "\026\100\027\066\030\074\031\053\032\056\033\054\037" +
    "\071\054\067\001\001\000\002\001\001\000\050\005\045" +
    "\006\127\011\077\012\072\013\070\014\075\015\076\016" +
    "\060\023\062\024\027\025\065\026\100\027\066\030\074" +
    "\031\053\032\056\033\054\037\071\054\067\001\001\000" +
    "\050\005\045\006\126\011\077\012\072\013\070\014\075" +
    "\015\076\016\060\023\062\024\027\025\065\026\100\027" +
    "\066\030\074\031\053\032\056\033\054\037\071\054\067" +
    "\001\001\000\002\001\001\000\050\005\045\006\125\011" +
    "\077\012\072\013\070\014\075\015\076\016\060\023\062" +
    "\024\027\025\065\026\100\027\066\030\074\031\053\032" +
    "\056\033\054\037\071\054\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\005\045\006\064\011" +
    "\077\012\072\013\070\014\075\015\076\016\060\023\062" +
    "\024\027\025\065\026\100\027\066\030\074\031\053\032" +
    "\056\033\054\037\071\044\140\054\067\001\001\000\052" +
    "\005\045\006\064\011\077\012\072\013\070\014\075\015" +
    "\076\016\060\023\062\024\027\025\065\026\100\027\066" +
    "\030\074\031\053\032\056\033\054\037\071\044\137\054" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\005\045\006\202\011" +
    "\077\012\072\013\070\014\075\015\076\016\060\023\062" +
    "\024\027\025\065\026\100\027\066\030\074\031\053\032" +
    "\056\033\054\037\071\054\067\001\001\000\024\005\146" +
    "\016\147\024\027\025\065\026\100\027\066\030\074\031" +
    "\053\037\150\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\005\200\016" +
    "\147\024\027\025\065\026\100\027\066\030\074\031\053" +
    "\037\150\001\001\000\024\005\176\016\147\024\027\025" +
    "\065\026\100\027\066\030\074\031\053\037\150\001\001" +
    "\000\024\005\174\016\147\024\027\025\065\026\100\027" +
    "\066\030\074\031\053\037\150\001\001\000\024\005\172" +
    "\016\147\024\027\025\065\026\100\027\066\030\074\031" +
    "\053\037\150\001\001\000\024\005\170\016\147\024\027" +
    "\025\065\026\100\027\066\030\074\031\053\037\150\001" +
    "\001\000\002\001\001\000\054\005\045\006\160\011\077" +
    "\012\072\013\070\014\075\015\076\016\060\023\062\024" +
    "\027\025\065\026\100\027\066\030\074\031\053\032\056" +
    "\033\054\037\071\040\162\041\163\054\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\005\045\006\160\011" +
    "\077\012\072\013\070\014\075\015\076\016\060\023\062" +
    "\024\027\025\065\026\100\027\066\030\074\031\053\032" +
    "\056\033\054\037\071\041\166\054\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\005\205\016\147\024\027\025\065\026" +
    "\100\027\066\030\074\031\053\037\150\001\001\000\002" +
    "\001\001\000\010\011\223\037\224\053\240\001\001\000" +
    "\024\005\236\016\147\024\027\025\065\026\100\027\066" +
    "\030\074\031\053\037\150\001\001\000\024\005\234\016" +
    "\147\024\027\025\065\026\100\027\066\030\074\031\053" +
    "\037\150\001\001\000\050\005\045\006\232\011\077\012" +
    "\072\013\070\014\075\015\076\016\060\023\062\024\027" +
    "\025\065\026\100\027\066\030\074\031\053\032\056\033" +
    "\054\037\071\054\067\001\001\000\024\005\230\016\147" +
    "\024\027\025\065\026\100\027\066\030\074\031\053\037" +
    "\150\001\001\000\010\011\223\037\224\053\226\001\001" +
    "\000\024\005\220\016\147\024\027\025\065\026\100\027" +
    "\066\030\074\031\053\037\150\001\001\000\024\005\216" +
    "\016\147\024\027\025\065\026\100\027\066\030\074\031" +
    "\053\037\150\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\011\257\020\254" +
    "\021\260\022\256\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\253\011\246\017\247\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\257\021\264\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\011\271\047\272\050\270\051\267\001\001" +
    "\000\002\001\001\000\010\011\271\047\272\051\300\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\060\004\050\005\045\011\046\012\041\013\037\014" +
    "\043\015\047\016\023\023\025\024\027\025\033\026\052" +
    "\027\034\030\044\031\015\032\021\033\016\036\275\037" +
    "\042\042\040\046\030\052\022\054\036\001\001\000\056" +
    "\004\050\005\045\011\046\012\041\013\037\014\043\015" +
    "\047\016\023\023\025\024\027\025\033\026\052\027\034" +
    "\030\044\031\015\032\021\033\016\037\042\042\040\046" +
    "\030\052\104\054\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoH$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoH$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoH$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible

    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("T.T");
        System.err.println(s);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoH$actions {

//Codigo de acciones
      

  private final SintacticoH parser;

  /** Constructor */
  CUP$SintacticoH$actions(SintacticoH parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoH$do_action_part00000000(
    int                        CUP$SintacticoH$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoH$parser,
    java.util.Stack            CUP$SintacticoH$stack,
    int                        CUP$SintacticoH$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoH$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoH$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoH$parser.done_parsing();
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= HASKELL 
            {
              Nodo RESULT =null;
		System.out.println("Archivo finalizado");
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // HASKELL ::= HASKELL DECFUN 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("HASKELL",1, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // HASKELL ::= DECFUN 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("HASKELL",1, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LISTA ::= let id igual VALLISTA 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LISTA",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VALLISTA ::= CONCAT 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALLISTA",3, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VALLISTA ::= cadena 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALLISTA",3, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VALLISTA ::= id 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALLISTA",3, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VALLISTA ::= LLAMADO 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALLISTA",3, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VALLISTA ::= OPLISTA 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALLISTA",3, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VALLISTA ::= corchetea LPARLISTA corchetec 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALLISTA",3, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LPARLISTA ::= LPARLISTA coma PARLISTA 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LPARLISTA",5, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LPARLISTA ::= PARLISTA 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LPARLISTA",5, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PARLISTA ::= CALCULAR 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("PARLISTA",6, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PARLISTA ::= caracter 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("PARLISTA",6, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PARLISTA ::= OTRA 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("PARLISTA",6, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // OTRA ::= corchetea VALOTRA corchetec 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OTRA",13, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VALOTRA ::= cadena 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALOTRA",16, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VALOTRA ::= LVOTRA 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALOTRA",16, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LVOTRA ::= LVOTRA coma VOTRA 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LVOTRA",14, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LVOTRA ::= VOTRA 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LVOTRA",14, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VOTRA ::= CALCULAR 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VOTRA",15, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VOTRA ::= caracter 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VOTRA",15, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CALCULAR ::= dolar calcular EXP dolar 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CALCULAR",7, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SUCC ::= dolar succ VALFUN dolar 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SUCC",8, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECC ::= dolar decc VALFUN dolar 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("DECC",9, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // MIN ::= dolar min VALLISTA dolar 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("MIN",10, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MAX ::= dolar max VALLISTA dolar 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("MAX",11, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VALFUN ::= id 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALFUN",41, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VALFUN ::= CALCULAR 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALFUN",41, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VALFUN ::= LLAMADO 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALFUN",41, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SUM ::= dolar sum VALLISTA dolar 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SUM",24, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PRODUCT ::= dolar product VALLISTA dolar 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("PRODUCT",25, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // REVERS ::= dolar revers VALLISTA dolar 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("REVERS",19, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IMPR ::= dolar impr VALLISTA dolar 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("IMPR",20, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PAR ::= dolar par VALLISTA dolar 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("PAR",21, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ASC ::= dolar asc VALLISTA dolar 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("ASC",22, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DESC ::= dolar desc VALLISTA dolar 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("DESC",23, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LENGTH ::= dolar length VALLISTA dolar 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LENGTH",42, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CONCAT ::= VALLISTA concatenacion VALLISTA 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CONCAT",12, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ACCESO ::= VALLISTA acceso EXP 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("ACCESO",17, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPLISTA ::= REVERS 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPLISTA",18, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPLISTA ::= IMPR 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPLISTA",18, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPLISTA ::= PAR 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPLISTA",18, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPLISTA ::= ASC 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPLISTA",18, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPLISTA ::= DESC 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPLISTA",18, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECFUN ::= id PDECFUN igual CUERPO fin 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("DECFUN",26, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PDECFUN ::= PDECFUN coma id 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("PDECFUN",27, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PDECFUN ::= id 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("PDECFUN",27, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PDECFUN ::= 
            {
              Nodo RESULT =null;
		
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("PDECFUN",27, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CUERPO ::= CUERPO SENTENCIAS 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CUERPO",28, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CUERPO ::= SENTENCIAS 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CUERPO",28, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIAS ::= LISTA 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",40, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIAS ::= CALCULAR 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",40, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIAS ::= SUCC 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",40, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIAS ::= DECC 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",40, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIAS ::= MIN 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",40, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIAS ::= MAX 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",40, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIAS ::= CONCAT 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",40, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIAS ::= ACCESO 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",40, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIAS ::= SUM 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",40, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIAS ::= PRODUCT 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",40, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIAS ::= REVERS 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",40, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTENCIAS ::= IMPR 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",40, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTENCIAS ::= PAR 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",40, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIAS ::= ASC 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",40, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIAS ::= DESC 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",40, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIAS ::= LENGTH 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",40, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIAS ::= LLAMADO 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",40, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIAS ::= SI 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",40, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIAS ::= CASO 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",40, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIAS ::= eol 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",40, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LLAMADO ::= dolar id llavea LPFUN llavec dolar 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LLAMADO",29, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LPFUN ::= LPFUN coma PFUN 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LPFUN",30, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LPFUN ::= PFUN 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LPFUN",30, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PFUN ::= EXP 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("PFUN",31, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PFUN ::= id 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("PFUN",31, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PFUN ::= 
            {
              Nodo RESULT =null;
		
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("PFUN",31, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP ::= EXP suma EXP 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP ::= EXP resta EXP 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP ::= EXP mult EXP 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP ::= EXP div EXP 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= EXP mod EXP 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= EXP sqrt EXP 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= EXP pot EXP 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= parentesisa EXP parentesisc 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP ::= CALCULAR 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP ::= SUCC 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP ::= DECC 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP ::= MIN 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP ::= MAX 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP ::= CONCAT 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP ::= ACCESO 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP ::= SUM 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP ::= PRODUCT 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP ::= LENGTH 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP ::= LLAMADO 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP ::= num 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXP ::= caracter 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SI ::= si COND entonces CUERPO sino CUERPO fin 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SI",32, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // COND ::= REL o REL 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("COND",33, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // COND ::= REL y REL 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("COND",33, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // COND ::= REL 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("COND",33, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // REL ::= EXP OPREL EXP 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("REL",34, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OPREL ::= mayor 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPREL",35, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OPREL ::= menor 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPREL",35, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OPREL ::= mayorigual 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPREL",35, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OPREL ::= menorigual 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPREL",35, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OPREL ::= igualacion 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPREL",35, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OPREL ::= distinto 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPREL",35, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CASO ::= caso VALFUN eol LCASOS fin 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CASO",36, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // VCASO ::= CALCULAR 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VCASO",37, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // VCASO ::= caracter 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VCASO",37, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // LCASOS ::= LCASOS CASOS 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LCASOS",38, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // LCASOS ::= CASOS 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LCASOS",38, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CASOS ::= VCASO dospuntos CUERPO puntoycoma eol 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CASOS",39, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoH$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoH$do_action(
    int                        CUP$SintacticoH$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoH$parser,
    java.util.Stack            CUP$SintacticoH$stack,
    int                        CUP$SintacticoH$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoH$do_action_part00000000(
                               CUP$SintacticoH$act_num,
                               CUP$SintacticoH$parser,
                               CUP$SintacticoH$stack,
                               CUP$SintacticoH$top);
    }
}

}
