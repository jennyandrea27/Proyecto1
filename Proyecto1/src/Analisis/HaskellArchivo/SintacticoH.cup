package Analisis.HaskellArchivo;

import java_cup.runtime.Symbol;
import Extras.*;
import Analisis.*;
import Reportes.*;

parser code
{://Codigo visible

    public void syntax_error(Symbol s){
        TablaErrores.insertarError("Error Sintactico: "+s.value.toString()+" ",s.right,s.left);
        System.out.println(s.value.toString()+" Fila: " +s.right+", Columna: "+s.left);
    }

    public void unrecovered_syntax_error(Symbol s){        
        TablaErrores.insertarError("Error Sintactico: "+s.value.toString()+" ",s.right,s.left);
        System.out.println(s.value.toString()+" Fila: " +s.right+", Columna: "+s.left);
    }

:}

action code
{://Codigo de acciones
      
:}

terminal String mod, sqrt, pot, let, calcular, succ, decc, min, max, sum, product, revers, impr, par, asc, desc, length, si, entonces, fin, sino, caso, concatenacion, suma, resta, mult, div,eol,puntoycoma, acceso;
terminal String o, y, mayor, menor, mayorigual, menorigual, igualacion, distinto, igual, dolar, corchetea, corchetec, llavea, llavec, num, id, coma, cadena,caracter, parentesisa, parentesisc,dospuntos;
nonterminal Nodo S, HASKELL, LISTA, VALLISTA, EXP, LPARLISTA, PARLISTA, CALCULAR, SUCC, DECC, MIN, MAX, CONCAT, OTRA;
nonterminal Nodo LVOTRA, VOTRA, VALOTRA, ACCESO, OPLISTA, REVERS, IMPR, PAR, ASC, DESC, SUM, PRODUCT, DECFUN, PDECFUN,CUERPO;
nonterminal Nodo LLAMADO, LPFUN, SI, COND, REL, OPREL, CASO, VCASO, LCASOS, CASOS, SENTENCIAS, VALFUN, LENGTH;

precedence left o;
precedence left y;
precedence left mayor, menor, mayorigual,menorigual, distinto, igualacion;
precedence left suma, resta;
precedence left mult, div, mod; 
precedence right pot,sqrt; 
precedence left concatenacion, acceso;

start with S;

S ::=   HASKELL{:System.out.println("Archivo finalizado");:};
HASKELL ::= HASKELL DECFUN
                        | DECFUN;

LISTA ::=  let id igual VALLISTA;

VALLISTA ::=   CONCAT
                          | cadena
                          | id:id{:RESULT = Fabrica.crearNodoId(id);:}
                          | LLAMADO
                          | OPLISTA
                          | corchetea LPARLISTA corchetec;

LPARLISTA ::= LPARLISTA coma PARLISTA
                          | PARLISTA;
PARLISTA ::= CALCULAR
                         | caracter
                         | OTRA;
OTRA::= corchetea VALOTRA corchetec;

VALOTRA ::= cadena
                        | LVOTRA;

LVOTRA ::= LVOTRA coma VOTRA
                    | VOTRA;
VOTRA ::= CALCULAR
                  | caracter;

CALCULAR ::= dolar calcular EXP dolar;

SUCC ::=    dolar succ VALFUN dolar;

DECC ::=    dolar decc VALFUN dolar;

MIN ::=     dolar min VALLISTA dolar;

MAX ::=    dolar max VALLISTA dolar;

VALFUN ::= id:id{:RESULT = Fabrica.crearNodoId(id);:}
                    | CALCULAR
                    | LLAMADO;

SUM ::= dolar sum VALLISTA dolar;
PRODUCT ::= dolar product VALLISTA dolar;
REVERS ::= dolar revers VALLISTA dolar;
IMPR::= dolar impr VALLISTA dolar;
PAR ::= dolar par VALLISTA dolar;
ASC ::= dolar asc VALLISTA dolar;
DESC ::= dolar desc VALLISTA dolar;
LENGTH ::= dolar length VALLISTA dolar;

CONCAT ::= VALLISTA concatenacion VALLISTA;

ACCESO ::= VALLISTA acceso EXP;

OPLISTA ::= REVERS
                     | IMPR
                     | PAR
                     | ASC
                     | DESC;

DECFUN ::= id PDECFUN igual CUERPO fin
                       | eol;

PDECFUN ::= PDECFUN coma id
                        |id:id{:RESULT = Fabrica.crearNodoId(id);:}
                        |{::};
CUERPO ::= CUERPO SENTENCIAS
                     | SENTENCIAS;

SENTENCIAS ::= LISTA
                             | CALCULAR
                             | SUCC
                             | DECC
                             | MIN
                             | MAX
                             | CONCAT
                             | ACCESO
                             | SUM
                             | PRODUCT
                             | REVERS
                             | IMPR
                             | PAR
                             | ASC  
                             | DESC
                             | LENGTH
                             | LLAMADO
                             | SI
                             | CASO
                             | eol;

LLAMADO ::= dolar id llavea LPFUN llavec dolar;

LPFUN ::= LPFUN coma VALFUN
                        | VALFUN
                        | ;

EXP ::= EXP suma EXP
             | EXP resta EXP
             | EXP mult EXP             
             | EXP div EXP             
             | EXP mod EXP
             | EXP sqrt EXP
             | EXP pot EXP             
             | resta EXP
             | parentesisa EXP parentesisc
             | CALCULAR
             | SUCC
             | DECC
             | MIN
             | MAX
             | CONCAT
             | ACCESO   
             | SUM
             | PRODUCT
             | LENGTH
             | LLAMADO             
             | num
             | caracter
             | id:id{:RESULT = Fabrica.crearNodoId(id);:};

SI ::= si COND entonces CUERPO sino CUERPO fin;
COND ::= REL o REL
                | REL y REL
                | REL;
REL ::= VALFUN OPREL VALFUN  ;
OPREL ::= mayor
                    | menor
                    | mayorigual
                    | menorigual 
                    | igualacion
                    | distinto;

CASO ::= caso VALFUN eol LCASOS fin;
VCASO ::= num
                    | caracter;
LCASOS ::= LCASOS CASOS
                    | CASOS;
CASOS ::= VCASO dospuntos CUERPO puntoycoma eol;














