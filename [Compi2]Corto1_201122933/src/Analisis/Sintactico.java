
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Mar 19 15:08:35 CST 2017
//----------------------------------------------------

package Analisis;

import java_cup.runtime.Symbol;
import C3D.*;
import Principal.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Mar 19 15:08:35 CST 2017
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\016\000\002\002\004\000\002\002\003\000\002\007" +
    "\004\000\002\007\003\000\002\006\003\000\002\006\003" +
    "\000\002\003\004\000\002\005\006\000\002\005\006\000" +
    "\002\010\003\000\002\010\005\000\002\004\004\000\002" +
    "\011\004\000\002\011\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\031\000\006\004\006\007\010\001\002\000\010\002" +
    "\ufffe\004\ufffe\007\ufffe\001\002\000\004\002\033\001\002" +
    "\000\004\011\021\001\002\000\010\002\ufffc\004\ufffc\007" +
    "\ufffc\001\002\000\004\011\015\001\002\000\010\002\ufffd" +
    "\004\ufffd\007\ufffd\001\002\000\010\002\000\004\006\007" +
    "\010\001\002\000\010\002\uffff\004\uffff\007\uffff\001\002" +
    "\000\012\002\ufff6\004\ufff6\007\ufff6\010\017\001\002\000" +
    "\004\010\016\001\002\000\012\002\ufff4\004\ufff4\007\ufff4" +
    "\010\ufff4\001\002\000\012\002\ufff5\004\ufff5\007\ufff5\010" +
    "\ufff5\001\002\000\012\002\ufffb\004\ufffb\005\030\007\ufffb" +
    "\001\002\000\004\005\022\001\002\000\004\010\023\001" +
    "\002\000\006\006\ufff8\012\026\001\002\000\004\006\025" +
    "\001\002\000\012\002\ufff9\004\ufff9\005\ufff9\007\ufff9\001" +
    "\002\000\004\010\027\001\002\000\004\006\ufff7\001\002" +
    "\000\004\010\023\001\002\000\004\006\032\001\002\000" +
    "\012\002\ufffa\004\ufffa\005\ufffa\007\ufffa\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\031\000\014\002\004\003\010\004\006\006\003\007" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\017\001\001\000\002\001\001\000\004\011\013\001" +
    "\001\000\002\001\001\000\010\003\010\004\006\006\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
    
    public void syntax_error(Symbol s){        
        System.out.println(s.value.toString()+" Fila: " +s.right+", Columna: "+s.left);        
    }

    public void unrecovered_syntax_error(Symbol s){                
        System.out.println(s.value.toString()+" Fila: " +s.right+", Columna: "+s.left);        
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {

//Codigo de acciones
      

  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LNUM ::= id num 
            {
              NodoC3D RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Arreglo arr=Tabla.getArreglo(id);
                    if(arr == null){
                        FInicio.cad_errores+="Error semantico, el arreglo "+id+" no ha sido declarado.\n";
                        RESULT=new NodoC3D("","",-1);                    
                    }else{
                        Dim dim=arr.getDim(arr.getContDim());                        
                        String t=ControlC3D.generaTemp();
                        if(dim.getPos_inicio() < Integer.parseInt(num) && Integer.parseInt(num) < dim.getPos_fin()){                            
                            ControlC3D.agregarC3D(t+"="+num+"-"+dim.getPos_inicio()+"\n");
                            arr.setContDim();
                            RESULT = new NodoC3D(t,id,arr.getContDim());                        
                        }else{
                            FInicio.cad_errores+="Error semantico, la posicion "+num+" no puede accederse en arrego "+id+"\n";
                            arr.setContDim();
                            RESULT=new NodoC3D(t,id,arr.getContDim());                    
                        }
                    }
                 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LNUM",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LNUM ::= LNUM num 
            {
              NodoC3D RESULT =null;
		int lnumleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lnumright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		NodoC3D lnum = (NodoC3D)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    if(!lnum.getId().equals("")){
                            Arreglo arr=Tabla.getArreglo(lnum.getId());
                            Dim dim=arr.getDim(lnum.getDim());  
                            String t1=ControlC3D.generaTemp();
                            if(dim.getPos_inicio() < Integer.parseInt(num) && Integer.parseInt(num) < dim.getPos_fin()){                            
                                ControlC3D.agregarC3D(t1+"="+num+"-"+dim.getPos_inicio()+"\n");
                                String t2=ControlC3D.generaTemp();
                                ControlC3D.agregarC3D(t2+"="+t1+"- 1\n");
                                int tam=arr.getTamano(lnum.getDim());
                                String t3=ControlC3D.generaTemp();
                                ControlC3D.agregarC3D(t3+"="+t2+"*"+tam+"\n");
                                String t4=ControlC3D.generaTemp();
                                ControlC3D.agregarC3D(t4+"="+lnum.getCad()+"+"+t3+"\n"); 
                                lnum.aumentarDim();
                                RESULT=new NodoC3D(t3,lnum.getId(),lnum.getDim());
                          }else{
                            FInicio.cad_errores+="Error semantico, la posicion "+num+" no puede accederse en arrego "+lnum.getId()+"\n";
                            arr.setContDim();
                            RESULT=new NodoC3D(t1,lnum.getId(),arr.getContDim());                    
                        }
                            
                    }
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LNUM",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // UBICAR ::= ubicar LNUM 
            {
              Arreglo RESULT =null;
		int lnumleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lnumright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoC3D lnum = (NodoC3D)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        if(!lnum.getId().equals("")){                            
                            String t1=ControlC3D.generaTemp();
                            ControlC3D.agregarC3D(t1+"="+lnum.getId()+" ["+lnum.getCad()+" ]\n");
                            ControlC3D.agregarC3D("//la posicion esta almacenada en "+t1+"\n");
                        }
                                                
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("UBICAR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VAL ::= num puntopunto num 
            {
              Dim RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String num1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String num2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		              
                RESULT=new Dim(Integer.parseInt(num1),Integer.parseInt(num2));                
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VAL",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VAL ::= num 
            {
              Dim RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		                
                RESULT=new Dim(0,Integer.parseInt(num));                
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VAL",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LDIM ::= id corchetea VAL corchetec 
            {
              Arreglo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Dim val = (Dim)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    RESULT = new Arreglo(id);
                    if(val.correcto()){
                        RESULT.insertarDim(val);
                    }else{
                        FInicio.cad_errores+="Error semantico, dimensiones fuera de rango en arreglo "+id+"\n";
                        RESULT.setError(true);
                    }
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LDIM",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LDIM ::= LDIM corchetea VAL corchetec 
            {
              Arreglo RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Arreglo arr = (Arreglo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Dim val = (Dim)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    arr.insertarDim(val);
                    RESULT = arr;                    
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LDIM",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ARR ::= arreglo LDIM 
            {
              Arreglo RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Arreglo arr = (Arreglo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    if(!arr.getError()){
                        Tabla.insertarArreglo(arr);
                    }
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARR",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // A ::= UBICAR 
            {
              Arreglo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("A",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // A ::= ARR 
            {
              Arreglo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("A",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LA ::= A 
            {
              Arreglo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LA ::= LA A 
            {
              Arreglo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= LA 
            {
              Arreglo RESULT =null;
		Tabla.recorrer();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Arreglo start_val = (Arreglo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

