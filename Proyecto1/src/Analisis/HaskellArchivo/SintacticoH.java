
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisis.HaskellArchivo;

import java_cup.runtime.Symbol;
import Extras.*;
import Analisis.*;
import Reportes.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoH extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TSHaskell.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoH() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoH(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoH(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\207\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\010\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\005\000\002\005\003\000\002\007\005\000\002" +
    "\007\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\017\005\000\002\020\005\000\002\020\003" +
    "\000\002\021\003\000\002\021\003\000\002\011\006\000" +
    "\002\012\006\000\002\013\006\000\002\014\006\000\002" +
    "\015\006\000\002\051\003\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\051\005\000\002\051\003\000" +
    "\002\051\003\000\002\031\006\000\002\032\006\000\002" +
    "\024\006\000\002\025\006\000\002\026\006\000\002\027" +
    "\006\000\002\030\006\000\002\053\006\000\002\016\005" +
    "\000\002\022\005\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\033\007\000\002\033\003\000\002\034\005\000\002\034" +
    "\003\000\002\034\002\000\002\035\004\000\002\035\003" +
    "\000\002\050\003\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\050\003\000\002" +
    "\050\003\000\002\050\003\000\002\050\003\000\002\050" +
    "\003\000\002\050\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\050\003\000\002" +
    "\050\003\000\002\037\010\000\002\040\005\000\002\040" +
    "\003\000\002\040\002\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\004\000\002" +
    "\006\005\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\041\011\000\002\042" +
    "\005\000\002\042\005\000\002\042\003\000\002\043\005" +
    "\000\002\055\003\000\002\055\003\000\002\055\003\000" +
    "\002\055\003\000\002\055\003\000\002\055\003\000\002" +
    "\044\007\000\002\052\003\000\002\052\003\000\002\052" +
    "\003\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\054\003\000\002\054\003\000\002\054\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\045\003\000\002\045\003\000\002\046" +
    "\004\000\002\046\003\000\002\047\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\006\037\007\061\010\001\002\000\010\002" +
    "\ufffe\037\ufffe\061\ufffe\001\002\000\010\002\000\037\007" +
    "\061\010\001\002\000\004\002\333\001\002\000\010\002" +
    "\uffcd\037\uffcd\061\uffcd\001\002\000\010\052\uffca\061\012" +
    "\062\uffca\001\002\000\006\052\013\062\014\001\002\000" +
    "\006\052\uffcb\062\uffcb\001\002\000\020\025\052\031\021" +
    "\037\026\053\033\054\030\061\035\063\016\001\002\000" +
    "\004\061\015\001\002\000\006\052\uffcc\062\uffcc\001\002" +
    "\000\100\004\ufffb\005\ufffb\006\ufffb\025\ufffb\026\ufffb\027" +
    "\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb" +
    "\036\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044" +
    "\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\053\ufffb" +
    "\054\ufffb\057\ufffb\061\ufffb\062\ufffb\063\ufffb\066\ufffb\001" +
    "\002\000\032\025\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffcf" +
    "\037\uffb9\040\uffb9\041\uffcf\053\uffb9\054\uffb9\061\uffb9\063" +
    "\uffb9\001\002\000\026\025\uffbe\027\uffbe\030\uffbe\031\uffbe" +
    "\037\uffbe\040\uffbe\053\uffbe\054\uffbe\061\uffbe\063\uffbe\001" +
    "\002\000\012\053\067\054\030\061\314\063\016\001\002" +
    "\000\022\025\052\027\307\031\021\037\026\053\033\054" +
    "\030\061\035\063\016\001\002\000\026\025\uffbf\027\uffbf" +
    "\030\uffbf\031\uffbf\037\uffbf\040\uffbf\053\uffbf\054\uffbf\061" +
    "\uffbf\063\uffbf\001\002\000\026\025\uffc8\027\uffc8\030\uffc8" +
    "\031\uffc8\037\uffc8\040\uffc8\053\uffc8\054\uffc8\061\uffc8\063" +
    "\uffc8\001\002\000\032\025\uffc1\027\uffc1\030\uffc1\031\uffc1" +
    "\032\ufffc\037\uffc1\040\uffc1\041\ufffc\053\uffc1\054\uffc1\061" +
    "\uffc1\063\uffc1\001\002\000\026\025\uffb4\027\uffb4\030\uffb4" +
    "\031\uffb4\037\uffb4\040\uffb4\053\uffb4\054\uffb4\061\uffb4\063" +
    "\uffb4\001\002\000\026\025\uffc0\027\uffc0\030\uffc0\031\uffc0" +
    "\037\uffc0\040\uffc0\053\uffc0\054\uffc0\061\uffc0\063\uffc0\001" +
    "\002\000\010\053\253\054\251\064\257\001\002\000\100" +
    "\004\ufff9\005\ufff9\006\ufff9\025\ufff9\026\ufff9\027\ufff9\030" +
    "\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9" +
    "\037\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9\045" +
    "\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9\053\ufff9\054\ufff9" +
    "\057\ufff9\061\ufff9\062\ufff9\063\ufff9\066\ufff9\001\002\000" +
    "\026\025\uffb5\027\uffb5\030\uffb5\031\uffb5\037\uffb5\040\uffb5" +
    "\053\uffb5\054\uffb5\061\uffb5\063\uffb5\001\002\000\040\007" +
    "\300\010\131\011\136\012\124\013\130\014\137\015\133" +
    "\016\141\017\135\020\127\021\134\022\140\023\132\024" +
    "\126\061\125\001\002\000\032\025\uffbd\027\uffbd\030\uffbd" +
    "\031\uffbd\032\uffd3\037\uffbd\040\uffbd\041\uffd3\053\uffbd\054" +
    "\uffbd\061\uffbd\063\uffbd\001\002\000\100\004\ufffa\005\ufffa" +
    "\006\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032" +
    "\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa" +
    "\041\ufffa\042\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047" +
    "\ufffa\050\ufffa\051\ufffa\053\ufffa\054\ufffa\057\ufffa\061\ufffa" +
    "\062\ufffa\063\ufffa\066\ufffa\001\002\000\032\025\uffbb\027" +
    "\uffbb\030\uffbb\031\uffbb\032\uffd1\037\uffbb\040\uffbb\041\uffd1" +
    "\053\uffbb\054\uffbb\061\uffbb\063\uffbb\001\002\000\026\025" +
    "\uffb8\027\uffb8\030\uffb8\031\uffb8\037\uffb8\040\uffb8\053\uffb8" +
    "\054\uffb8\061\uffb8\063\uffb8\001\002\000\026\025\uffc4\027" +
    "\uffc4\030\uffc4\031\uffc4\037\uffc4\040\uffc4\053\uffc4\054\uffc4" +
    "\061\uffc4\063\uffc4\001\002\000\026\025\uffb6\027\uffb6\030" +
    "\uffb6\031\uffb6\037\uffb6\040\uffb6\053\uffb6\054\uffb6\061\uffb6" +
    "\063\uffb6\001\002\000\032\025\uffb7\027\uffb7\030\uffb7\031" +
    "\uffb7\032\ufff7\037\uffb7\040\uffb7\041\ufff7\053\uffb7\054\uffb7" +
    "\061\uffb7\063\uffb7\001\002\000\026\025\uffc5\027\uffc5\030" +
    "\uffc5\031\uffc5\037\uffc5\040\uffc5\053\uffc5\054\uffc5\061\uffc5" +
    "\063\uffc5\001\002\000\026\025\uffc3\027\uffc3\030\uffc3\031" +
    "\uffc3\037\uffc3\040\uffc3\053\uffc3\054\uffc3\061\uffc3\063\uffc3" +
    "\001\002\000\032\025\uffba\027\uffba\030\uffba\031\uffba\032" +
    "\uffd0\037\uffba\040\uffba\041\uffd0\053\uffba\054\uffba\061\uffba" +
    "\063\uffba\001\002\000\006\032\147\041\276\001\002\000" +
    "\026\025\uffc2\027\uffc2\030\uffc2\031\uffc2\037\uffc2\040\uffc2" +
    "\053\uffc2\054\uffc2\061\uffc2\063\uffc2\001\002\000\026\025" +
    "\uffc6\027\uffc6\030\uffc6\031\uffc6\037\uffc6\040\uffc6\053\uffc6" +
    "\054\uffc6\061\uffc6\063\uffc6\001\002\000\026\025\uffc7\027" +
    "\uffc7\030\uffc7\031\uffc7\037\uffc7\040\uffc7\053\uffc7\054\uffc7" +
    "\061\uffc7\063\uffc7\001\002\000\012\053\067\054\064\061" +
    "\070\063\054\001\002\000\032\025\uffbc\027\uffbc\030\uffbc" +
    "\031\uffbc\032\uffd2\037\uffbc\040\uffbc\041\uffd2\053\uffbc\054" +
    "\uffbc\061\uffbc\063\uffbc\001\002\000\036\026\uffe3\032\ufffb" +
    "\041\ufffb\042\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3\047" +
    "\uffe3\050\uffe3\051\uffe3\053\uffe3\057\uffe3\062\uffe3\001\002" +
    "\000\100\004\uffcf\005\uffcf\006\uffcf\025\uffcf\026\uffcf\027" +
    "\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf" +
    "\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044" +
    "\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\053\uffcf" +
    "\054\uffcf\057\uffcf\061\uffcf\062\uffcf\063\uffcf\066\uffcf\001" +
    "\002\000\034\026\uff85\037\uff85\042\uff85\043\uff85\044\uff85" +
    "\045\uff85\046\uff85\047\uff85\050\uff85\051\uff85\053\uff85\057" +
    "\uff85\062\uff85\001\002\000\034\026\uff86\037\uff86\042\uff86" +
    "\043\uff86\044\uff86\045\uff86\046\uff86\047\uff86\050\uff86\051" +
    "\uff86\053\uff86\057\uff86\062\uff86\001\002\000\010\026\uff95" +
    "\042\272\043\273\001\002\000\036\026\uffe4\032\ufffc\041" +
    "\ufffc\042\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4\047\uffe4" +
    "\050\uffe4\051\uffe4\053\uffe4\057\uffe4\062\uffe4\001\002\000" +
    "\032\026\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6" +
    "\047\uffe6\050\uffe6\051\uffe6\053\uffe6\057\uffe6\062\uffe6\001" +
    "\002\000\032\026\uffde\042\uffde\043\uffde\044\uffde\045\uffde" +
    "\046\uffde\047\uffde\050\uffde\051\uffde\053\uffde\057\uffde\062" +
    "\uffde\001\002\000\010\053\253\054\251\064\257\001\002" +
    "\000\036\026\uffe1\032\ufff9\041\ufff9\042\uffe1\043\uffe1\044" +
    "\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1\053\uffe1" +
    "\057\uffe1\062\uffe1\001\002\000\032\026\uffe5\042\uffe5\043" +
    "\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5" +
    "\053\uffe5\057\uffe5\062\uffe5\001\002\000\036\010\131\011" +
    "\136\012\124\013\130\014\137\015\133\016\141\017\135" +
    "\020\127\021\134\022\140\023\132\024\126\061\125\001" +
    "\002\000\036\026\uffe2\032\ufffa\041\ufffa\042\uffe2\043\uffe2" +
    "\044\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\053" +
    "\uffe2\057\uffe2\062\uffe2\001\002\000\100\004\uffd3\005\uffd3" +
    "\006\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032" +
    "\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3" +
    "\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047" +
    "\uffd3\050\uffd3\051\uffd3\053\uffd3\054\uffd3\057\uffd3\061\uffd3" +
    "\062\uffd3\063\uffd3\066\uffd3\001\002\000\100\004\uffd1\005" +
    "\uffd1\006\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1" +
    "\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040" +
    "\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1" +
    "\047\uffd1\050\uffd1\051\uffd1\053\uffd1\054\uffd1\057\uffd1\061" +
    "\uffd1\062\uffd1\063\uffd1\066\uffd1\001\002\000\034\026\uff84" +
    "\037\uff84\042\uff84\043\uff84\044\uff84\045\uff84\046\uff84\047" +
    "\uff84\050\uff84\051\uff84\053\uff84\057\uff84\062\uff84\001\002" +
    "\000\034\026\uff82\037\uff82\042\uff82\043\uff82\044\uff82\045" +
    "\uff82\046\uff82\047\uff82\050\uff82\051\uff82\053\uff82\057\uff82" +
    "\062\uff82\001\002\000\034\026\uff83\037\uff83\042\uff83\043" +
    "\uff83\044\uff83\045\uff83\046\uff83\047\uff83\050\uff83\051\uff83" +
    "\053\uff83\057\uff83\062\uff83\001\002\000\036\026\uffdf\032" +
    "\ufff7\041\ufff7\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf" +
    "\047\uffdf\050\uffdf\051\uffdf\053\uffdf\057\uffdf\062\uffdf\001" +
    "\002\000\100\004\uffd0\005\uffd0\006\uffd0\025\uffd0\026\uffd0" +
    "\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035" +
    "\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0" +
    "\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\053" +
    "\uffd0\054\uffd0\057\uffd0\061\uffd0\062\uffd0\063\uffd0\066\uffd0" +
    "\001\002\000\034\026\uff81\037\uff81\042\uff81\043\uff81\044" +
    "\uff81\045\uff81\046\uff81\047\uff81\050\uff81\051\uff81\053\uff81" +
    "\057\uff81\062\uff81\001\002\000\004\026\116\001\002\000" +
    "\032\026\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7" +
    "\047\uffe7\050\uffe7\051\uffe7\053\uffe7\057\uffe7\062\uffe7\001" +
    "\002\000\034\026\uff80\037\uff80\042\uff80\043\uff80\044\uff80" +
    "\045\uff80\046\uff80\047\uff80\050\uff80\051\uff80\053\uff80\057" +
    "\uff80\062\uff80\001\002\000\016\044\111\045\110\046\113" +
    "\047\112\050\107\051\114\001\002\000\100\004\uffd2\005" +
    "\uffd2\006\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2" +
    "\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040" +
    "\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2" +
    "\047\uffd2\050\uffd2\051\uffd2\053\uffd2\054\uffd2\057\uffd2\061" +
    "\uffd2\062\uffd2\063\uffd2\066\uffd2\001\002\000\012\053\067" +
    "\054\064\061\070\063\054\001\002\000\012\053\uff8f\054" +
    "\uff8f\061\uff8f\063\uff8f\001\002\000\012\053\uff92\054\uff92" +
    "\061\uff92\063\uff92\001\002\000\012\053\uff93\054\uff93\061" +
    "\uff93\063\uff93\001\002\000\012\053\uff90\054\uff90\061\uff90" +
    "\063\uff90\001\002\000\012\053\uff91\054\uff91\061\uff91\063" +
    "\uff91\001\002\000\012\053\uff8e\054\uff8e\061\uff8e\063\uff8e" +
    "\001\002\000\010\026\uff94\042\uff94\043\uff94\001\002\000" +
    "\020\025\052\031\021\037\026\053\033\054\030\061\035" +
    "\063\016\001\002\000\022\025\052\030\120\031\021\037" +
    "\026\053\033\054\030\061\035\063\016\001\002\000\020" +
    "\025\052\031\021\037\026\053\033\054\030\061\035\063" +
    "\016\001\002\000\026\025\uffc9\027\uffc9\030\uffc9\031\uffc9" +
    "\037\uffc9\040\uffc9\053\uffc9\054\uffc9\061\uffc9\063\uffc9\001" +
    "\002\000\022\025\052\027\123\031\021\037\026\053\033" +
    "\054\030\061\035\063\016\001\002\000\026\025\uff98\027" +
    "\uff98\030\uff98\031\uff98\037\uff98\040\uff98\053\uff98\054\uff98" +
    "\061\uff98\063\uff98\001\002\000\012\053\067\054\064\061" +
    "\070\063\054\001\002\000\004\056\240\001\002\000\012" +
    "\053\142\054\030\061\035\063\016\001\002\000\012\053" +
    "\142\054\030\061\035\063\016\001\002\000\012\053\142" +
    "\054\030\061\035\063\016\001\002\000\022\034\176\053" +
    "\067\054\030\060\173\061\200\063\016\064\175\065\170" +
    "\001\002\000\012\053\142\054\030\061\035\063\016\001" +
    "\002\000\012\053\142\054\030\061\035\063\016\001\002" +
    "\000\012\053\142\054\030\061\035\063\016\001\002\000" +
    "\012\053\142\054\030\061\035\063\016\001\002\000\012" +
    "\053\067\054\064\061\070\063\054\001\002\000\012\053" +
    "\142\054\030\061\035\063\016\001\002\000\012\053\142" +
    "\054\030\061\035\063\016\001\002\000\012\053\142\054" +
    "\030\061\035\063\016\001\002\000\016\017\135\020\127" +
    "\021\134\022\140\023\132\061\125\001\002\000\006\032" +
    "\147\053\146\001\002\000\100\004\ufffc\005\ufffc\006\ufffc" +
    "\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc\033" +
    "\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc" +
    "\042\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc\050" +
    "\ufffc\051\ufffc\053\ufffc\054\ufffc\057\ufffc\061\ufffc\062\ufffc" +
    "\063\ufffc\066\ufffc\001\002\000\100\004\ufff7\005\ufff7\006" +
    "\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7" +
    "\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041" +
    "\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7" +
    "\050\ufff7\051\ufff7\053\ufff7\054\ufff7\057\ufff7\061\ufff7\062" +
    "\ufff7\063\ufff7\066\ufff7\001\002\000\074\004\uffdc\005\uffdc" +
    "\006\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\033" +
    "\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\042\uffdc" +
    "\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051" +
    "\uffdc\053\uffdc\054\uffdc\057\uffdc\061\uffdc\062\uffdc\063\uffdc" +
    "\066\uffdc\001\002\000\012\053\142\054\030\061\035\063" +
    "\016\001\002\000\100\004\uffd5\005\uffd5\006\uffd5\025\uffd5" +
    "\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034" +
    "\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5" +
    "\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051" +
    "\uffd5\053\uffd5\054\uffd5\057\uffd5\061\uffd5\062\uffd5\063\uffd5" +
    "\066\uffd5\001\002\000\006\032\147\053\152\001\002\000" +
    "\100\004\uffd8\005\uffd8\006\uffd8\025\uffd8\026\uffd8\027\uffd8" +
    "\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036" +
    "\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8" +
    "\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\053\uffd8\054" +
    "\uffd8\057\uffd8\061\uffd8\062\uffd8\063\uffd8\066\uffd8\001\002" +
    "\000\006\032\147\053\154\001\002\000\074\004\uffe8\005" +
    "\uffe8\006\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8" +
    "\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\042" +
    "\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8" +
    "\051\uffe8\053\uffe8\054\uffe8\057\uffe8\061\uffe8\062\uffe8\063" +
    "\uffe8\066\uffe8\001\002\000\004\053\156\001\002\000\074" +
    "\004\uffeb\005\uffeb\006\uffeb\025\uffeb\026\uffeb\027\uffeb\030" +
    "\uffeb\031\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb" +
    "\040\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb\047" +
    "\uffeb\050\uffeb\051\uffeb\053\uffeb\054\uffeb\057\uffeb\061\uffeb" +
    "\062\uffeb\063\uffeb\066\uffeb\001\002\000\006\032\147\053" +
    "\160\001\002\000\100\004\uffdb\005\uffdb\006\uffdb\025\uffdb" +
    "\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034" +
    "\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb" +
    "\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\051" +
    "\uffdb\053\uffdb\054\uffdb\057\uffdb\061\uffdb\062\uffdb\063\uffdb" +
    "\066\uffdb\001\002\000\006\032\147\053\162\001\002\000" +
    "\100\004\uffd9\005\uffd9\006\uffd9\025\uffd9\026\uffd9\027\uffd9" +
    "\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036" +
    "\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9" +
    "\045\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9\053\uffd9\054" +
    "\uffd9\057\uffd9\061\uffd9\062\uffd9\063\uffd9\066\uffd9\001\002" +
    "\000\006\032\147\053\164\001\002\000\074\004\uffdd\005" +
    "\uffdd\006\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd" +
    "\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\042" +
    "\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd" +
    "\051\uffdd\053\uffdd\054\uffdd\057\uffdd\061\uffdd\062\uffdd\063" +
    "\uffdd\066\uffdd\001\002\000\006\032\147\053\166\001\002" +
    "\000\100\004\uffd7\005\uffd7\006\uffd7\025\uffd7\026\uffd7\027" +
    "\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7" +
    "\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044" +
    "\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\053\uffd7" +
    "\054\uffd7\057\uffd7\061\uffd7\062\uffd7\063\uffd7\066\uffd7\001" +
    "\002\000\024\004\uff9e\005\uff9e\006\uff9e\033\uff9e\034\uff9e" +
    "\035\uff9e\036\uff9e\053\uff9e\066\uff9e\001\002\000\022\034" +
    "\176\053\067\054\030\060\173\061\200\063\016\064\175" +
    "\065\170\001\002\000\024\004\uff9f\005\uff9f\006\uff9f\033" +
    "\uff9f\034\uff9f\035\uff9f\036\uff9f\053\uff9f\066\uff9f\001\002" +
    "\000\030\004\uffa1\005\uffa1\006\uffa1\032\ufffc\033\uffa1\034" +
    "\uffa1\035\uffa1\036\uffa1\041\ufffc\053\uffa1\066\uffa1\001\002" +
    "\000\024\004\uff9b\005\uff9b\006\uff9b\033\uff9b\034\uff9b\035" +
    "\uff9b\036\uff9b\053\uff9b\066\uff9b\001\002\000\024\004\uffa0" +
    "\005\uffa0\006\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\053" +
    "\uffa0\066\uffa0\001\002\000\024\004\uff9a\005\uff9a\006\uff9a" +
    "\033\uff9a\034\uff9a\035\uff9a\036\uff9a\053\uff9a\066\uff9a\001" +
    "\002\000\022\034\176\053\067\054\030\060\173\061\200" +
    "\063\016\064\175\065\170\001\002\000\022\004\213\005" +
    "\214\006\216\033\211\034\210\035\215\036\217\053\212" +
    "\001\002\000\030\004\uff99\005\uff99\006\uff99\032\ufffa\033" +
    "\uff99\034\uff99\035\uff99\036\uff99\041\ufffa\053\uff99\066\uff99" +
    "\001\002\000\024\004\uff9d\005\uff9d\006\uff9d\033\uff9d\034" +
    "\uff9d\035\uff9d\036\uff9d\053\uff9d\066\uff9d\001\002\000\024" +
    "\004\uffa4\005\uffa4\006\uffa4\033\uffa4\034\uffa4\035\uffa4\036" +
    "\uffa4\053\uffa4\066\uffa4\001\002\000\030\004\uff9c\005\uff9c" +
    "\006\uff9c\032\ufff7\033\uff9c\034\uff9c\035\uff9c\036\uff9c\041" +
    "\ufff7\053\uff9c\066\uff9c\001\002\000\024\004\uffa5\005\uffa5" +
    "\006\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5\053\uffa5\066" +
    "\uffa5\001\002\000\024\004\uffa3\005\uffa3\006\uffa3\033\uffa3" +
    "\034\uffa3\035\uffa3\036\uffa3\053\uffa3\066\uffa3\001\002\000" +
    "\024\004\uffa2\005\uffa2\006\uffa2\033\uffa2\034\uffa2\035\uffa2" +
    "\036\uffa2\053\uffa2\066\uffa2\001\002\000\024\004\uffa6\005" +
    "\uffa6\006\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\053\uffa6" +
    "\066\uffa6\001\002\000\022\034\176\053\067\054\030\060" +
    "\173\061\200\063\016\064\175\065\170\001\002\000\022" +
    "\034\176\053\067\054\030\060\173\061\200\063\016\064" +
    "\175\065\170\001\002\000\076\004\uffec\005\uffec\006\uffec" +
    "\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\033\uffec\034" +
    "\uffec\035\uffec\036\uffec\037\uffec\040\uffec\042\uffec\043\uffec" +
    "\044\uffec\045\uffec\046\uffec\047\uffec\050\uffec\051\uffec\053" +
    "\uffec\054\uffec\055\uffec\057\uffec\061\uffec\062\uffec\063\uffec" +
    "\066\uffec\001\002\000\022\034\176\053\067\054\030\060" +
    "\173\061\200\063\016\064\175\065\170\001\002\000\022" +
    "\034\176\053\067\054\030\060\173\061\200\063\016\064" +
    "\175\065\170\001\002\000\022\034\176\053\067\054\030" +
    "\060\173\061\200\063\016\064\175\065\170\001\002\000" +
    "\022\034\176\053\067\054\030\060\173\061\200\063\016" +
    "\064\175\065\170\001\002\000\022\034\176\053\067\054" +
    "\030\060\173\061\200\063\016\064\175\065\170\001\002" +
    "\000\024\004\uffac\005\214\006\216\033\uffac\034\uffac\035" +
    "\uffac\036\uffac\053\uffac\066\uffac\001\002\000\024\004\uffa9" +
    "\005\214\006\216\033\uffa9\034\uffa9\035\uffa9\036\uffa9\053" +
    "\uffa9\066\uffa9\001\002\000\024\004\uffad\005\214\006\216" +
    "\033\uffad\034\uffad\035\uffad\036\uffad\053\uffad\066\uffad\001" +
    "\002\000\024\004\uffaa\005\214\006\216\033\uffaa\034\uffaa" +
    "\035\uffaa\036\uffaa\053\uffaa\066\uffaa\001\002\000\024\004" +
    "\uffab\005\214\006\216\033\uffab\034\uffab\035\uffab\036\uffab" +
    "\053\uffab\066\uffab\001\002\000\024\004\213\005\214\006" +
    "\216\033\uffaf\034\uffaf\035\215\036\217\053\uffaf\066\uffaf" +
    "\001\002\000\024\004\213\005\214\006\216\033\uffae\034" +
    "\uffae\035\215\036\217\053\uffae\066\uffae\001\002\000\024" +
    "\004\213\005\214\006\216\033\uffa8\034\uffa8\035\215\036" +
    "\217\053\uffa8\066\uffa8\001\002\000\022\004\213\005\214" +
    "\006\216\033\211\034\210\035\215\036\217\066\231\001" +
    "\002\000\024\004\uffa7\005\uffa7\006\uffa7\033\uffa7\034\uffa7" +
    "\035\uffa7\036\uffa7\053\uffa7\066\uffa7\001\002\000\006\032" +
    "\147\053\233\001\002\000\074\004\uffe9\005\uffe9\006\uffe9" +
    "\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\033\uffe9\034" +
    "\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\042\uffe9\043\uffe9" +
    "\044\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9\053" +
    "\uffe9\054\uffe9\057\uffe9\061\uffe9\062\uffe9\063\uffe9\066\uffe9" +
    "\001\002\000\006\032\147\053\235\001\002\000\100\004" +
    "\uffda\005\uffda\006\uffda\025\uffda\026\uffda\027\uffda\030\uffda" +
    "\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037" +
    "\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda\045\uffda" +
    "\046\uffda\047\uffda\050\uffda\051\uffda\053\uffda\054\uffda\057" +
    "\uffda\061\uffda\062\uffda\063\uffda\066\uffda\001\002\000\006" +
    "\032\147\053\237\001\002\000\074\004\uffd6\005\uffd6\006" +
    "\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\033\uffd6" +
    "\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\042\uffd6\043" +
    "\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6" +
    "\053\uffd6\054\uffd6\057\uffd6\061\uffd6\062\uffd6\063\uffd6\066" +
    "\uffd6\001\002\000\016\053\067\054\064\057\uffb0\061\070" +
    "\062\uffb0\063\054\001\002\000\006\057\243\062\244\001" +
    "\002\000\006\057\uffb1\062\uffb1\001\002\000\004\053\246" +
    "\001\002\000\012\053\067\054\064\061\070\063\054\001" +
    "\002\000\006\057\uffb2\062\uffb2\001\002\000\100\004\uffb3" +
    "\005\uffb3\006\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031" +
    "\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3" +
    "\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046" +
    "\uffb3\047\uffb3\050\uffb3\051\uffb3\053\uffb3\054\uffb3\057\uffb3" +
    "\061\uffb3\062\uffb3\063\uffb3\066\uffb3\001\002\000\004\053" +
    "\250\001\002\000\074\004\uffea\005\uffea\006\uffea\025\uffea" +
    "\026\uffea\027\uffea\030\uffea\031\uffea\033\uffea\034\uffea\035" +
    "\uffea\036\uffea\037\uffea\040\uffea\042\uffea\043\uffea\044\uffea" +
    "\045\uffea\046\uffea\047\uffea\050\uffea\051\uffea\053\uffea\054" +
    "\uffea\057\uffea\061\uffea\062\uffea\063\uffea\066\uffea\001\002" +
    "\000\006\053\253\064\266\001\002\000\006\055\ufff5\062" +
    "\ufff5\001\002\000\004\010\131\001\002\000\006\055\261" +
    "\062\260\001\002\000\006\055\ufff4\062\ufff4\001\002\000" +
    "\006\055\ufff2\062\ufff2\001\002\000\006\055\ufff3\062\ufff3" +
    "\001\002\000\010\053\253\054\251\064\257\001\002\000" +
    "\036\026\uffe0\032\ufff8\041\ufff8\042\uffe0\043\uffe0\044\uffe0" +
    "\045\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\053\uffe0\057" +
    "\uffe0\062\uffe0\001\002\000\006\055\ufff6\062\ufff6\001\002" +
    "\000\006\055\270\062\267\001\002\000\006\055\uffee\062" +
    "\uffee\001\002\000\006\055\uffef\062\uffef\001\002\000\006" +
    "\055\uffed\062\uffed\001\002\000\006\053\253\064\266\001" +
    "\002\000\006\055\ufff1\062\ufff1\001\002\000\006\055\ufff0" +
    "\062\ufff0\001\002\000\012\053\067\054\064\061\070\063" +
    "\054\001\002\000\012\053\067\054\064\061\070\063\054" +
    "\001\002\000\004\026\uff96\001\002\000\004\026\uff97\001" +
    "\002\000\004\053\253\001\002\000\074\004\uffd4\005\uffd4" +
    "\006\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\033" +
    "\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\042\uffd4" +
    "\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051" +
    "\uffd4\053\uffd4\054\uffd4\057\uffd4\061\uffd4\062\uffd4\063\uffd4" +
    "\066\uffd4\001\002\000\004\061\301\001\002\000\004\052" +
    "\302\001\002\000\012\053\142\054\030\061\035\063\016" +
    "\001\002\000\006\032\147\053\304\001\002\000\026\025" +
    "\ufffd\027\ufffd\030\ufffd\031\ufffd\037\ufffd\040\ufffd\053\ufffd" +
    "\054\ufffd\061\ufffd\063\ufffd\001\002\000\006\055\306\062" +
    "\260\001\002\000\100\004\ufff8\005\ufff8\006\ufff8\025\ufff8" +
    "\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034" +
    "\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8" +
    "\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8\051" +
    "\ufff8\053\ufff8\054\ufff8\057\ufff8\061\ufff8\062\ufff8\063\ufff8" +
    "\066\ufff8\001\002\000\010\002\uffce\037\uffce\061\uffce\001" +
    "\002\000\004\037\317\001\002\000\004\037\uff8a\001\002" +
    "\000\004\037\uff87\001\002\000\004\037\uff88\001\002\000" +
    "\010\032\ufffa\037\uff8b\041\ufffa\001\002\000\010\032\ufff7" +
    "\037\uff8c\041\ufff7\001\002\000\004\037\uff89\001\002\000" +
    "\006\060\320\064\324\001\002\000\004\067\uff7f\001\002" +
    "\000\010\027\uff7c\060\uff7c\064\uff7c\001\002\000\010\027" +
    "\332\060\320\064\324\001\002\000\004\067\325\001\002" +
    "\000\004\067\uff7e\001\002\000\020\025\052\031\021\037" +
    "\026\053\033\054\030\061\035\063\016\001\002\000\022" +
    "\025\052\031\021\037\026\040\327\053\033\054\030\061" +
    "\035\063\016\001\002\000\004\037\330\001\002\000\010" +
    "\027\uff7b\060\uff7b\064\uff7b\001\002\000\010\027\uff7d\060" +
    "\uff7d\064\uff7d\001\002\000\026\025\uff8d\027\uff8d\030\uff8d" +
    "\031\uff8d\037\uff8d\040\uff8d\053\uff8d\054\uff8d\061\uff8d\063" +
    "\uff8d\001\002\000\004\002\001\001\002\000\010\002\uffff" +
    "\037\uffff\061\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\010\002\005\003\004\033\003\001\001\000" +
    "\002\001\001\000\004\033\333\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\004\050\005\045\011\047" +
    "\012\042\013\037\014\043\015\046\016\024\022\026\023" +
    "\030\024\033\025\052\026\035\027\044\030\016\031\022" +
    "\032\017\035\021\037\041\041\040\044\031\050\023\053" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\005" +
    "\045\011\315\012\074\013\073\014\077\015\102\016\143" +
    "\022\310\023\030\024\070\025\104\026\071\027\076\030" +
    "\054\031\056\032\055\036\311\037\314\052\307\053\072" +
    "\054\312\001\001\000\056\004\050\005\045\011\047\012" +
    "\042\013\037\014\043\015\046\016\024\022\026\023\030" +
    "\024\033\025\052\026\035\027\044\030\016\031\022\032" +
    "\017\037\041\041\040\044\031\050\120\053\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\304\010\251" +
    "\011\254\017\255\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\005\045" +
    "\011\101\012\074\013\073\014\077\015\102\016\060\022" +
    "\061\023\064\024\070\025\104\026\071\027\076\030\054" +
    "\031\056\032\055\036\062\037\075\042\100\043\057\051" +
    "\103\053\072\054\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\007\253\010\251\011\254\017" +
    "\255\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\055\105\001\001\000\002\001\001\000\054\005\045\011" +
    "\101\012\074\013\073\014\077\015\102\016\060\022\061" +
    "\023\064\024\070\025\104\026\071\027\076\030\054\031" +
    "\056\032\055\036\062\037\075\051\114\053\072\054\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\004\050\005\045\011\047\012" +
    "\042\013\037\014\043\015\046\016\024\022\026\023\030" +
    "\024\033\025\052\026\035\027\044\030\016\031\022\032" +
    "\017\035\116\037\041\041\040\044\031\050\023\053\036" +
    "\001\001\000\056\004\050\005\045\011\047\012\042\013" +
    "\037\014\043\015\046\016\024\022\026\023\030\024\033" +
    "\025\052\026\035\027\044\030\016\031\022\032\017\037" +
    "\041\041\040\044\031\050\120\053\036\001\001\000\060" +
    "\004\050\005\045\011\047\012\042\013\037\014\043\015" +
    "\046\016\024\022\026\023\030\024\033\025\052\026\035" +
    "\027\044\030\016\031\022\032\017\035\121\037\041\041" +
    "\040\044\031\050\023\053\036\001\001\000\002\001\001" +
    "\000\056\004\050\005\045\011\047\012\042\013\037\014" +
    "\043\015\046\016\024\022\026\023\030\024\033\025\052" +
    "\026\035\027\044\030\016\031\022\032\017\037\041\041" +
    "\040\044\031\050\120\053\036\001\001\000\002\001\001" +
    "\000\054\005\045\011\101\012\074\013\073\014\077\015" +
    "\102\016\060\022\061\023\064\024\070\025\104\026\071" +
    "\027\076\030\054\031\056\032\055\036\062\037\075\051" +
    "\246\053\072\054\065\001\001\000\002\001\001\000\024" +
    "\005\235\016\143\023\030\024\070\025\104\026\071\027" +
    "\076\030\054\037\144\001\001\000\024\005\233\016\143" +
    "\023\030\024\070\025\104\026\071\027\076\030\054\037" +
    "\144\001\001\000\024\005\231\016\143\023\030\024\070" +
    "\025\104\026\071\027\076\030\054\037\144\001\001\000" +
    "\050\005\045\006\176\011\206\012\203\013\201\014\204" +
    "\015\205\016\171\022\173\023\030\024\070\025\104\026" +
    "\071\027\076\030\054\031\170\032\166\037\202\053\200" +
    "\001\001\000\024\005\164\016\143\023\030\024\070\025" +
    "\104\026\071\027\076\030\054\037\144\001\001\000\024" +
    "\005\162\016\143\023\030\024\070\025\104\026\071\027" +
    "\076\030\054\037\144\001\001\000\024\005\160\016\143" +
    "\023\030\024\070\025\104\026\071\027\076\030\054\037" +
    "\144\001\001\000\024\005\156\016\143\023\030\024\070" +
    "\025\104\026\071\027\076\030\054\037\144\001\001\000" +
    "\054\005\045\011\101\012\074\013\073\014\077\015\102" +
    "\016\060\022\061\023\064\024\070\025\104\026\071\027" +
    "\076\030\054\031\056\032\055\036\062\037\075\051\154" +
    "\053\072\054\065\001\001\000\024\005\152\016\143\023" +
    "\030\024\070\025\104\026\071\027\076\030\054\037\144" +
    "\001\001\000\024\005\150\016\143\023\030\024\070\025" +
    "\104\026\071\027\076\030\054\037\144\001\001\000\024" +
    "\005\142\016\143\023\030\024\070\025\104\026\071\027" +
    "\076\030\054\037\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\005\147\016\143\023\030\024\070\025\104" +
    "\026\071\027\076\030\054\037\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\005\045" +
    "\006\227\011\206\012\203\013\201\014\204\015\205\016" +
    "\171\022\173\023\030\024\070\025\104\026\071\027\076" +
    "\030\054\031\170\032\166\037\202\053\200\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\005\045\006\226\011" +
    "\206\012\203\013\201\014\204\015\205\016\171\022\173" +
    "\023\030\024\070\025\104\026\071\027\076\030\054\031" +
    "\170\032\166\037\202\053\200\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\005\045\006\225\011" +
    "\206\012\203\013\201\014\204\015\205\016\171\022\173" +
    "\023\030\024\070\025\104\026\071\027\076\030\054\031" +
    "\170\032\166\037\202\053\200\001\001\000\050\005\045" +
    "\006\224\011\206\012\203\013\201\014\204\015\205\016" +
    "\171\022\173\023\030\024\070\025\104\026\071\027\076" +
    "\030\054\031\170\032\166\037\202\053\200\001\001\000" +
    "\002\001\001\000\050\005\045\006\223\011\206\012\203" +
    "\013\201\014\204\015\205\016\171\022\173\023\030\024" +
    "\070\025\104\026\071\027\076\030\054\031\170\032\166" +
    "\037\202\053\200\001\001\000\050\005\045\006\222\011" +
    "\206\012\203\013\201\014\204\015\205\016\171\022\173" +
    "\023\030\024\070\025\104\026\071\027\076\030\054\031" +
    "\170\032\166\037\202\053\200\001\001\000\050\005\045" +
    "\006\221\011\206\012\203\013\201\014\204\015\205\016" +
    "\171\022\173\023\030\024\070\025\104\026\071\027\076" +
    "\030\054\031\170\032\166\037\202\053\200\001\001\000" +
    "\050\005\045\006\220\011\206\012\203\013\201\014\204" +
    "\015\205\016\171\022\173\023\030\024\070\025\104\026" +
    "\071\027\076\030\054\031\170\032\166\037\202\053\200" +
    "\001\001\000\050\005\045\006\217\011\206\012\203\013" +
    "\201\014\204\015\205\016\171\022\173\023\030\024\070" +
    "\025\104\026\071\027\076\030\054\031\170\032\166\037" +
    "\202\053\200\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\005\045\011\101\012\074\013" +
    "\073\014\077\015\102\016\060\022\061\023\064\024\070" +
    "\025\104\026\071\027\076\030\054\031\056\032\055\036" +
    "\062\037\075\040\240\051\241\053\072\054\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\005\045\011\101\012\074\013\073\014\077\015\102" +
    "\016\060\022\061\023\064\024\070\025\104\026\071\027" +
    "\076\030\054\031\056\032\055\036\062\037\075\051\244" +
    "\053\072\054\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\263" +
    "\020\262\021\264\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\261\011\254\017\255\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\263\021\270\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\005\045\011\101\012\074\013\073\014" +
    "\077\015\102\016\060\022\061\023\064\024\070\025\104" +
    "\026\071\027\076\030\054\031\056\032\055\036\062\037" +
    "\075\043\274\051\103\053\072\054\065\001\001\000\056" +
    "\005\045\011\101\012\074\013\073\014\077\015\102\016" +
    "\060\022\061\023\064\024\070\025\104\026\071\027\076" +
    "\030\054\031\056\032\055\036\062\037\075\043\273\051" +
    "\103\053\072\054\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\276\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\005\302\016\143" +
    "\023\030\024\070\025\104\026\071\027\076\030\054\037" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\045\322\046\321\047\320\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\045\322\047\330\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\004\050\005\045" +
    "\011\047\012\042\013\037\014\043\015\046\016\024\022" +
    "\026\023\030\024\033\025\052\026\035\027\044\030\016" +
    "\031\022\032\017\035\325\037\041\041\040\044\031\050" +
    "\023\053\036\001\001\000\056\004\050\005\045\011\047" +
    "\012\042\013\037\014\043\015\046\016\024\022\026\023" +
    "\030\024\033\025\052\026\035\027\044\030\016\031\022" +
    "\032\017\037\041\041\040\044\031\050\120\053\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoH$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoH$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoH$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible

    public static Nodo raiz=new Nodo("raiz");
    public void syntax_error(Symbol s){
        TablaErrores.insertarError("Error Sintactico: "+s.value.toString()+" ",s.right,s.left);
        System.out.println(s.value.toString()+" Fila: " +s.right+", Columna: "+s.left);
        HTML.mostrarErrores();
    }

    public void unrecovered_syntax_error(Symbol s){        
        TablaErrores.insertarError("Error Sintactico: "+s.value.toString()+" ",s.right,s.left);
        System.out.println(s.value.toString()+" Fila: " +s.right+", Columna: "+s.left);
        HTML.mostrarErrores();
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoH$actions {

//Codigo de acciones
      

  private final SintacticoH parser;

  /** Constructor */
  CUP$SintacticoH$actions(SintacticoH parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoH$do_action_part00000000(
    int                        CUP$SintacticoH$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoH$parser,
    java.util.Stack            CUP$SintacticoH$stack,
    int                        CUP$SintacticoH$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoH$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoH$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoH$parser.done_parsing();
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= HASKELL 
            {
              Nodo RESULT =null;
		int hkleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int hkright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo hk = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		
        System.out.println("Archivo finalizado");
        raiz=hk;        
    
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // HASKELL ::= HASKELL DECFUN 
            {
              Nodo RESULT =null;
		int hkleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int hkright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo hk = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		int decfunleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int decfunright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo decfun = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=Fabrica.insertarFuncion(hk,decfun);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("HASKELL",1, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // HASKELL ::= DECFUN 
            {
              Nodo RESULT =null;
		int decfunleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int decfunright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo decfun = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = Fabrica.crearNodoLFunciones(decfun);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("HASKELL",1, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LISTA ::= dolar let id igual VALLISTA dolar 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		RESULT = Fabrica.crearNodoLista(id,val);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LISTA",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VALLISTA ::= CONCAT 
            {
              Nodo RESULT =null;
		int concatleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int concatright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo concat = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = Fabrica.crearNodoAsigLista(Constante.concat,concat);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALLISTA",3, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VALLISTA ::= cadena 
            {
              Nodo RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		                               
                                Nodo cad= Fabrica.crearNodoHoja(Constante.cadena,cadena,Constante.tcadena);
                                RESULT=Fabrica.crearNodoAsigLista(Constante.cadena,cad);
                            
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALLISTA",3, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VALLISTA ::= id 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		
                                Nodo identificador= Fabrica.crearNodoHoja(Constante.id,id);
                                RESULT = Fabrica.crearNodoAsigLista(Constante.id,identificador);
                            
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALLISTA",3, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VALLISTA ::= OPLISTA 
            {
              Nodo RESULT =null;
		int oplistaleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int oplistaright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo oplista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = oplista;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALLISTA",3, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VALLISTA ::= corchetea LPARLISTA corchetec 
            {
              Nodo RESULT =null;
		int lparlistaleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int lparlistaright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo lparlista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		RESULT = lparlista;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALLISTA",3, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VALLISTA ::= LLAMADO 
            {
              Nodo RESULT =null;
		int llamadoleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int llamadoright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo llamado = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = llamado;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALLISTA",3, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LPARLISTA ::= LPARLISTA coma PARLISTA 
            {
              Nodo RESULT =null;
		int lparlistaleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int lparlistaright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo lparlista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int parlistaleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int parlistaright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo parlista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = Fabrica.insertarAsigLista(lparlista,parlista);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LPARLISTA",5, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LPARLISTA ::= PARLISTA 
            {
              Nodo RESULT =null;
		int parlistaleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int parlistaright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo parlista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = Fabrica.crearNodoAsigLista(parlista.getValor(),parlista);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LPARLISTA",5, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PARLISTA ::= CALCULAR 
            {
              Nodo RESULT =null;
		int calcleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int calcright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo calc = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = calc;RESULT.setValor(Constante.dim1);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("PARLISTA",6, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PARLISTA ::= caracter 
            {
              Nodo RESULT =null;
		int caracterleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int caracterright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String caracter = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(Constante.caracter,caracter,Constante.tcaracter);RESULT.setValor(Constante.dim1);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("PARLISTA",6, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PARLISTA ::= OTRA 
            {
              Nodo RESULT =null;
		int otraleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int otraright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo otra = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = otra;RESULT.setValor(Constante.dim2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("PARLISTA",6, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // OTRA ::= corchetea LVOTRA corchetec 
            {
              Nodo RESULT =null;
		int valotraleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int valotraright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo valotra = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		RESULT = valotra;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OTRA",13, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LVOTRA ::= LVOTRA coma VOTRA 
            {
              Nodo RESULT =null;
		int lvotraleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int lvotraright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo lvotra = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int votraleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int votraright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo votra = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = Fabrica.insertarAsigLista(lvotra,votra);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LVOTRA",14, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LVOTRA ::= VOTRA 
            {
              Nodo RESULT =null;
		int votraleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int votraright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo votra = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = Fabrica.crearNodoAsigLista(Constante.dim,votra);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LVOTRA",14, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VOTRA ::= CALCULAR 
            {
              Nodo RESULT =null;
		int calcleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int calcright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo calc = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = calc;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VOTRA",15, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VOTRA ::= caracter 
            {
              Nodo RESULT =null;
		int caracterleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int caracterright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String caracter = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(Constante.caracter,caracter,Constante.tcaracter);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VOTRA",15, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CALCULAR ::= dolar calcular EXP dolar 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		RESULT=Fabrica.crearNodoEXP(exp);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CALCULAR",7, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SUCC ::= dolar succ VALFUN dolar 
            {
              Nodo RESULT =null;
		int valfunleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int valfunright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo valfun = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		RESULT = Fabrica.crearNodoFunHK(Constante.succ,valfun);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SUCC",8, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECC ::= dolar decc VALFUN dolar 
            {
              Nodo RESULT =null;
		int valfunleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int valfunright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo valfun = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		RESULT = Fabrica.crearNodoFunHK(Constante.decc,valfun);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("DECC",9, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MIN ::= dolar min VALLISTA dolar 
            {
              Nodo RESULT =null;
		int valfunleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int valfunright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo valfun = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		RESULT = Fabrica.crearNodoFunHK(Constante.min,valfun);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("MIN",10, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MAX ::= dolar max VALLISTA dolar 
            {
              Nodo RESULT =null;
		int valfunleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int valfunright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo valfun = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		RESULT = Fabrica.crearNodoFunHK(Constante.max,valfun);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("MAX",11, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VALFUN ::= CALCULAR 
            {
              Nodo RESULT =null;
		int calcleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int calcright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo calc = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = calc;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALFUN",39, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VALFUN ::= ACCESO 
            {
              Nodo RESULT =null;
		int accesoleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int accesoright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo acceso = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = acceso;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALFUN",39, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VALFUN ::= OPLISTAEXP 
            {
              Nodo RESULT =null;
		int oplistaexpleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int oplistaexpright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo oplistaexp = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = oplistaexp; 
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALFUN",39, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VALFUN ::= CONCAT 
            {
              Nodo RESULT =null;
		int concatleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int concatright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo concat = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = concat;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALFUN",39, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VALFUN ::= cadena 
            {
              Nodo RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=Fabrica.crearNodoHoja(Constante.cadena,cadena,Constante.tcadena);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALFUN",39, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VALFUN ::= id 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(Constante.id,id);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALFUN",39, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VALFUN ::= OPLISTA 
            {
              Nodo RESULT =null;
		int oplistaleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int oplistaright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo oplista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = oplista;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALFUN",39, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VALFUN ::= corchetea LPARLISTA corchetec 
            {
              Nodo RESULT =null;
		int lparlistaleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int lparlistaright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo lparlista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		RESULT = lparlista;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALFUN",39, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VALFUN ::= LLAMADO 
            {
              Nodo RESULT =null;
		int llamadoleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int llamadoright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo llamado = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = llamado;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALFUN",39, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VALFUN ::= OPLENGUAJE 
            {
              Nodo RESULT =null;
		int oplenguajeleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int oplenguajeright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo oplenguaje = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = oplenguaje;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALFUN",39, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SUM ::= dolar sum VALLISTA dolar 
            {
              Nodo RESULT =null;
		int vallistaleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int vallistaright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo vallista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		RESULT = Fabrica.crearNodoOpLista(Constante.sum,vallista);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SUM",23, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PRODUCT ::= dolar product VALLISTA dolar 
            {
              Nodo RESULT =null;
		int vallistaleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int vallistaright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo vallista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		RESULT = Fabrica.crearNodoOpLista(Constante.product,vallista);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("PRODUCT",24, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // REVERS ::= dolar revers VALLISTA dolar 
            {
              Nodo RESULT =null;
		int vallistaleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int vallistaright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo vallista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		RESULT = Fabrica.crearNodoOpLista(Constante.revers,vallista);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("REVERS",18, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // IMPR ::= dolar impr VALLISTA dolar 
            {
              Nodo RESULT =null;
		int vallistaleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int vallistaright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo vallista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		RESULT = Fabrica.crearNodoOpLista(Constante.impr,vallista);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("IMPR",19, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PAR ::= dolar par VALLISTA dolar 
            {
              Nodo RESULT =null;
		int vallistaleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int vallistaright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo vallista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		RESULT = Fabrica.crearNodoOpLista(Constante.par,vallista);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("PAR",20, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ASC ::= dolar asc VALLISTA dolar 
            {
              Nodo RESULT =null;
		int vallistaleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int vallistaright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo vallista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		RESULT = Fabrica.crearNodoOpLista(Constante.asc,vallista);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("ASC",21, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DESC ::= dolar desc VALLISTA dolar 
            {
              Nodo RESULT =null;
		int vallistaleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int vallistaright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo vallista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		RESULT = Fabrica.crearNodoOpLista(Constante.desc,vallista);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("DESC",22, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LENGTH ::= dolar length VALLISTA dolar 
            {
              Nodo RESULT =null;
		int vallistaleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int vallistaright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo vallista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		RESULT = Fabrica.crearNodoOpLista(Constante.length,vallista);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LENGTH",41, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CONCAT ::= VALLISTA concatenacion VALLISTA 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = Fabrica.crearNodoConcat(op1,op2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CONCAT",12, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ACCESO ::= VALLISTA acceso CALCULAR 
            {
              Nodo RESULT =null;
		int vallistaleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int vallistaright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo vallista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int calcularleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int calcularright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo calcular = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = Fabrica.crearNodoAcceso(vallista,calcular);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("ACCESO",16, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPLISTA ::= REVERS 
            {
              Nodo RESULT =null;
		int reversleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int reversright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo revers = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = revers;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPLISTA",17, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPLISTA ::= IMPR 
            {
              Nodo RESULT =null;
		int imprleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int imprright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo impr = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = impr;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPLISTA",17, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPLISTA ::= PAR 
            {
              Nodo RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo par = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = par;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPLISTA",17, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPLISTA ::= ASC 
            {
              Nodo RESULT =null;
		int ascleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int ascright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo asc = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = asc;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPLISTA",17, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPLISTA ::= DESC 
            {
              Nodo RESULT =null;
		int descleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int descright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo desc = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = desc;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPLISTA",17, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECFUN ::= id PDECFUN igual CUERPO fin 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)).value;
		int lparleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)).left;
		int lparright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)).right;
		Nodo lpar = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo cuerpo = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		RESULT = Fabrica.crearNodoDecFun(-1,id,lpar,-1,cuerpo);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("DECFUN",25, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECFUN ::= eol 
            {
              Nodo RESULT =null;
		RESULT=null;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("DECFUN",25, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PDECFUN ::= PDECFUN coma id 
            {
              Nodo RESULT =null;
		int lparleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int lparright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo lpar = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		
                            Nodo par = Fabrica.crearNodoHoja(Constante.id,id);
                            RESULT=Fabrica.insertarPar(lpar,par);
                        
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("PDECFUN",26, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PDECFUN ::= id 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		
                            Nodo par = Fabrica.crearNodoHoja(Constante.id,id);
                            RESULT=Fabrica.crearNodoLPAR(par);
                        
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("PDECFUN",26, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PDECFUN ::= 
            {
              Nodo RESULT =null;
		RESULT=Fabrica.crearNodoLPAR(null);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("PDECFUN",26, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CUERPO ::= CUERPO SENTENCIAS 
            {
              Nodo RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo cuerpo = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = Fabrica.insertarSentencia(cuerpo,sent);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CUERPO",27, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CUERPO ::= SENTENCIAS 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=Fabrica.crearNodoCuerpo(sent);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CUERPO",27, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIAS ::= LISTA 
            {
              Nodo RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo list = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = list;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIAS ::= CALCULAR 
            {
              Nodo RESULT =null;
		int calcleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int calcright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo calc = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = calc;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIAS ::= SUCC 
            {
              Nodo RESULT =null;
		int succleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int succright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo succ = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = succ;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIAS ::= DECC 
            {
              Nodo RESULT =null;
		int deccleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int deccright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo decc = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = decc;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIAS ::= MIN 
            {
              Nodo RESULT =null;
		int minleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int minright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo min = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = min;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTENCIAS ::= MAX 
            {
              Nodo RESULT =null;
		int maxleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int maxright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo max = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = max;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTENCIAS ::= CONCAT 
            {
              Nodo RESULT =null;
		int concatleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int concatright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo concat = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = concat;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIAS ::= ACCESO 
            {
              Nodo RESULT =null;
		int accesoleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int accesoright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo acceso = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = acceso;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIAS ::= SUM 
            {
              Nodo RESULT =null;
		int sumleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo sum = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = sum;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIAS ::= PRODUCT 
            {
              Nodo RESULT =null;
		int productleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int productright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo product = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = product;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIAS ::= REVERS 
            {
              Nodo RESULT =null;
		int reversleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int reversright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo revers = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = revers;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIAS ::= IMPR 
            {
              Nodo RESULT =null;
		int imprleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int imprright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo impr = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = impr;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIAS ::= PAR 
            {
              Nodo RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo par = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = par;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIAS ::= ASC 
            {
              Nodo RESULT =null;
		int ascleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int ascright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo asc = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = asc;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIAS ::= DESC 
            {
              Nodo RESULT =null;
		int descleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int descright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo desc = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = desc;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIAS ::= LENGTH 
            {
              Nodo RESULT =null;
		int lengthleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int lengthright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo length = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = length;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIAS ::= LLAMADO 
            {
              Nodo RESULT =null;
		int llamadoleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int llamadoright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo llamado = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = llamado;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIAS ::= SI 
            {
              Nodo RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo si = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = si;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIAS ::= CASO 
            {
              Nodo RESULT =null;
		int casoleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo caso = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = caso;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIAS ::= eol 
            {
              Nodo RESULT =null;
		RESULT = null;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",38, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LLAMADO ::= dolar id llavea LPFUN llavec dolar 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)).value;
		int lparfunleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int lparfunright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo lparfun = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		RESULT=Fabrica.crearNodoLlamado(id,lparfun);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LLAMADO",29, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LPFUN ::= LPFUN coma VALFUN 
            {
              Nodo RESULT =null;
		int lparleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int lparright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo lpar = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo par = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=Fabrica.insertarPar(lpar,par);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LPFUN",30, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LPFUN ::= VALFUN 
            {
              Nodo RESULT =null;
		int valfunleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int valfunright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo valfun = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=Fabrica.crearNodoLPAR(valfun);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LPFUN",30, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LPFUN ::= 
            {
              Nodo RESULT =null;
		RESULT=Fabrica.crearNodoLPAR(null);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LPFUN",30, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= EXP suma EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.suma,op1,op2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= EXP resta EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.resta,op1,op2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= EXP mult EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.mult,op1,op2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= EXP div EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.div,op1,op2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP ::= EXP mod EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.mod,op1,op2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP ::= EXP sqrt EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.sqrt,op1,op2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP ::= EXP pot EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.pot,op1,op2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP ::= resta EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.resta,op1);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP ::= parentesisa EXP parentesisc 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		RESULT=exp;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP ::= CALCULAR 
            {
              Nodo RESULT =null;
		int calcleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int calcright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo calc = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = calc;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP ::= SUCC 
            {
              Nodo RESULT =null;
		int succleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int succright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo succ = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = succ;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP ::= DECC 
            {
              Nodo RESULT =null;
		int deccleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int deccright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo decc = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = decc;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP ::= MIN 
            {
              Nodo RESULT =null;
		int minleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int minright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo min = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = min;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP ::= MAX 
            {
              Nodo RESULT =null;
		int maxleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int maxright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo max = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = max;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP ::= CONCAT 
            {
              Nodo RESULT =null;
		int concatleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int concatright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo concat = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = concat;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP ::= ACCESO 
            {
              Nodo RESULT =null;
		int accesoleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int accesoright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo acceso = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = acceso;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXP ::= SUM 
            {
              Nodo RESULT =null;
		int sumleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo sum = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = sum;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXP ::= PRODUCT 
            {
              Nodo RESULT =null;
		int productleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int productright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo product = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = product;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXP ::= LENGTH 
            {
              Nodo RESULT =null;
		int lengthleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int lengthright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo length = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = length;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXP ::= LLAMADO 
            {
              Nodo RESULT =null;
		int llamadoleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int llamadoright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo llamado = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = llamado;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXP ::= num 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(Constante.num,num,Constante.tnum);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXP ::= caracter 
            {
              Nodo RESULT =null;
		int caracterleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int caracterright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String caracter = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(Constante.caracter,caracter,Constante.tcaracter);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXP ::= id 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(Constante.id,id);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SI ::= si COND entonces CUERPO sino CUERPO fin 
            {
              Nodo RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-5)).right;
		Nodo cond = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-5)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)).right;
		Nodo lv = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)).value;
		int lfleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo lf = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		RESULT = Fabrica.crearNodoSi(cond,lv,lf);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SI",31, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // COND ::= REL o REL 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.o,op1,op2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("COND",32, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // COND ::= REL y REL 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.y,op1,op2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("COND",32, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // COND ::= REL 
            {
              Nodo RESULT =null;
		int relleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int relright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo rel = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=rel;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("COND",32, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // REL ::= VALFUN OPREL VALFUN 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		String operador = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(operador,op1,op2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("REL",33, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OPREL ::= mayor 
            {
              String RESULT =null;
		RESULT = Constante.mayor;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPREL",43, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OPREL ::= menor 
            {
              String RESULT =null;
		RESULT = Constante.menor;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPREL",43, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OPREL ::= mayorigual 
            {
              String RESULT =null;
		RESULT = Constante.mayorigual;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPREL",43, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OPREL ::= menorigual 
            {
              String RESULT =null;
		RESULT = Constante.menorigual;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPREL",43, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OPREL ::= igualacion 
            {
              String RESULT =null;
		RESULT = Constante.igualacion;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPREL",43, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OPREL ::= distinto 
            {
              String RESULT =null;
		RESULT = Constante.distinto;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPREL",43, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CASO ::= caso VALCASE eol LCASOS fin 
            {
              Nodo RESULT =null;
		int valcaseleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)).left;
		int valcaseright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)).right;
		Nodo valcase = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)).value;
		int lcasosleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int lcasosright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo lcasos = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		RESULT = Fabrica.crearNodoSentCaso(valcase,lcasos);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CASO",34, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // VALCASE ::= LLAMADO 
            {
              Nodo RESULT =null;
		int llamadoleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int llamadoright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo llamado = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = llamado;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALCASE",40, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // VALCASE ::= id 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(Constante.id,id);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALCASE",40, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // VALCASE ::= ACCESO 
            {
              Nodo RESULT =null;
		int accesoleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int accesoright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo acceso = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = acceso;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALCASE",40, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // VALCASE ::= CALCULAR 
            {
              Nodo RESULT =null;
		int calcularleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int calcularright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo calcular = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = calcular;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALCASE",40, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // VALCASE ::= OPLISTAEXP 
            {
              Nodo RESULT =null;
		int oplistaexpleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int oplistaexpright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo oplistaexp = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = oplistaexp;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALCASE",40, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // VALCASE ::= OPLENGUAJE 
            {
              Nodo RESULT =null;
		int oplenguajeleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int oplenguajeright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo oplenguaje = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = oplenguaje;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALCASE",40, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OPLISTAEXP ::= SUM 
            {
              Nodo RESULT =null;
		int sumleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo sum = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = sum;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPLISTAEXP",42, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OPLISTAEXP ::= PRODUCT 
            {
              Nodo RESULT =null;
		int productleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int productright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo product = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = product;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPLISTAEXP",42, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OPLISTAEXP ::= LENGTH 
            {
              Nodo RESULT =null;
		int lengthleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int lengthright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo length = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = length;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPLISTAEXP",42, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OPLENGUAJE ::= SUCC 
            {
              Nodo RESULT =null;
		int succleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int succright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo succ = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = succ;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPLENGUAJE",28, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OPLENGUAJE ::= DECC 
            {
              Nodo RESULT =null;
		int deccleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int deccright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo decc = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = decc;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPLENGUAJE",28, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OPLENGUAJE ::= MIN 
            {
              Nodo RESULT =null;
		int minleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int minright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo min = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = min;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPLENGUAJE",28, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OPLENGUAJE ::= MAX 
            {
              Nodo RESULT =null;
		int maxleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int maxright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo max = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = max;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPLENGUAJE",28, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // VCASO ::= num 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(Constante.num,num,Constante.tnum);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VCASO",35, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // VCASO ::= caracter 
            {
              Nodo RESULT =null;
		int caracterleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int caracterright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String caracter = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(Constante.caracter,caracter,Constante.tcaracter);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VCASO",35, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // LCASOS ::= LCASOS CASOS 
            {
              Nodo RESULT =null;
		int lcasosleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int lcasosright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo lcasos = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		int casoleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo caso = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = Fabrica.insertarCaso(lcasos,caso);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LCASOS",36, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // LCASOS ::= CASOS 
            {
              Nodo RESULT =null;
		int casoleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo caso = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT = Fabrica.crearNodoLCasos(caso);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LCASOS",36, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CASOS ::= VCASO dospuntos CUERPO puntoycoma eol 
            {
              Nodo RESULT =null;
		int vcasoleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)).left;
		int vcasoright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)).right;
		Nodo vcaso = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo cuerpo = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		RESULT = Fabrica.crearNodoCaso(vcaso,cuerpo);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CASOS",37, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoH$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoH$do_action(
    int                        CUP$SintacticoH$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoH$parser,
    java.util.Stack            CUP$SintacticoH$stack,
    int                        CUP$SintacticoH$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoH$do_action_part00000000(
                               CUP$SintacticoH$act_num,
                               CUP$SintacticoH$parser,
                               CUP$SintacticoH$stack,
                               CUP$SintacticoH$top);
    }
}

}
