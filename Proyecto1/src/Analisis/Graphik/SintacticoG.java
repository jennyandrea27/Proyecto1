
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisis.Graphik;

import java_cup.runtime.Symbol;
import Extras.*;
import Analisis.*;
import Reportes.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoG extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TSGraphik.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoG() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoG(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoG(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\206\000\002\002\004\000\002\002\004\000\002\070" +
    "\003\000\002\070\003\000\002\070\003\000\002\067\004" +
    "\000\002\067\002\000\002\006\005\000\002\006\006\000" +
    "\002\006\010\000\002\004\003\000\002\004\002\000\002" +
    "\003\004\000\002\003\003\000\002\057\003\000\002\057" +
    "\003\000\002\007\006\000\002\005\004\000\002\005\003" +
    "\000\002\012\011\000\002\011\004\000\002\011\003\000" +
    "\002\027\003\000\002\027\004\000\002\027\003\000\002" +
    "\010\004\000\002\010\002\000\002\015\007\000\002\025" +
    "\003\000\002\025\003\000\002\025\002\000\002\036\006" +
    "\000\002\036\005\000\002\016\004\000\002\016\004\000" +
    "\002\020\006\000\002\020\005\000\002\021\004\000\002" +
    "\021\002\000\002\055\005\000\002\055\005\000\002\054" +
    "\005\000\002\054\003\000\002\017\003\000\002\017\006" +
    "\000\002\023\005\000\002\023\003\000\002\062\003\000" +
    "\002\062\006\000\002\024\013\000\002\065\003\000\002" +
    "\065\003\000\002\065\003\000\002\065\003\000\002\065" +
    "\003\000\002\065\003\000\002\066\003\000\002\066\003" +
    "\000\002\031\006\000\002\031\004\000\002\031\002\000" +
    "\002\026\004\000\002\032\004\000\002\032\007\000\002" +
    "\033\005\000\002\033\003\000\002\033\002\000\002\034" +
    "\011\000\002\035\005\000\002\037\012\000\002\040\006" +
    "\000\002\040\002\000\002\042\012\000\002\043\004\000" +
    "\002\043\003\000\002\044\006\000\002\045\005\000\002" +
    "\045\002\000\002\047\015\000\002\050\007\000\002\050" +
    "\005\000\002\030\004\000\002\030\003\000\002\064\003" +
    "\000\002\064\003\000\002\051\011\000\002\052\012\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\004\000\002\022\003\000\002\060\005\000\002\060" +
    "\003\000\002\061\005\000\002\061\005\000\002\061\005" +
    "\000\002\061\005\000\002\061\005\000\002\061\004\000" +
    "\002\061\005\000\002\061\003\000\002\061\003\000\002" +
    "\061\003\000\002\061\003\000\002\061\003\000\002\061" +
    "\004\000\002\061\003\000\002\061\003\000\002\061\003" +
    "\000\002\063\003\000\002\063\003\000\002\063\003\000" +
    "\002\063\003\000\002\063\003\000\002\063\003\000\002" +
    "\041\004\000\002\041\003\000\002\013\004\000\002\013" +
    "\004\000\002\013\004\000\002\013\004\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\004\000\002\013\004\000\002\013\005\000\002\056" +
    "\007\000\002\046\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0117\000\010\013\012\015\ufff6\023\007\001\002\000" +
    "\010\013\012\015\ufff7\023\007\001\002\000\004\002\u0118" +
    "\001\002\000\010\013\ufff4\015\ufff4\023\ufff4\001\002\000" +
    "\004\076\u0116\001\002\000\010\013\ufff2\015\ufff2\023\ufff2" +
    "\001\002\000\010\013\ufff3\015\ufff3\023\ufff3\001\002\000" +
    "\004\076\u0113\001\002\000\004\015\016\001\002\000\006" +
    "\002\uffef\015\uffef\001\002\000\006\002\000\015\016\001" +
    "\002\000\004\076\017\001\002\000\010\016\021\043\uffe7" +
    "\045\uffe7\001\002\000\006\043\024\045\ufffb\001\002\000" +
    "\004\076\022\001\002\000\006\043\uffe8\045\uffe8\001\002" +
    "\000\004\045\031\001\002\000\010\107\030\110\025\111" +
    "\027\001\002\000\014\042\ufffd\044\ufffd\045\ufffd\071\ufffd" +
    "\112\ufffd\001\002\000\014\042\ufffc\044\ufffc\045\ufffc\071" +
    "\ufffc\112\ufffc\001\002\000\014\042\uffff\044\uffff\045\uffff" +
    "\071\uffff\112\uffff\001\002\000\014\042\ufffe\044\ufffe\045" +
    "\ufffe\071\ufffe\112\ufffe\001\002\000\022\004\050\005\045" +
    "\006\036\007\042\010\047\011\033\012\034\076\032\001" +
    "\002\000\004\076\uffca\001\002\000\006\022\u010c\076\uffc8" +
    "\001\002\000\004\076\uffcb\001\002\000\004\042\u010b\001" +
    "\002\000\004\076\uffcc\001\002\000\004\076\213\001\002" +
    "\000\024\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011" +
    "\uffe9\012\uffe9\046\uffe9\076\uffe9\001\002\000\024\004\uffeb" +
    "\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\046" +
    "\uffeb\076\uffeb\001\002\000\004\076\uffce\001\002\000\024" +
    "\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012" +
    "\uffec\046\uffec\076\uffec\001\002\000\004\076\uffc9\001\002" +
    "\000\004\076\uffcf\001\002\000\024\004\050\005\045\006" +
    "\036\007\042\010\047\011\033\012\034\046\212\076\032" +
    "\001\002\000\004\076\uffcd\001\002\000\016\005\045\006" +
    "\036\007\042\010\047\012\034\076\032\001\002\000\004" +
    "\076\052\001\002\000\014\042\ufffb\043\024\044\ufffb\071" +
    "\ufffb\112\ufffb\001\002\000\012\042\uffe3\044\055\071\054" +
    "\112\056\001\002\000\032\021\102\052\106\056\101\067" +
    "\100\073\077\074\103\075\073\076\112\077\105\104\113" +
    "\113\111\114\116\001\002\000\034\017\203\021\102\052" +
    "\106\056\101\067\100\073\077\074\103\075\073\076\112" +
    "\077\105\104\113\113\111\114\116\001\002\000\004\076" +
    "\177\001\002\000\010\042\uffdb\044\067\071\066\001\002" +
    "\000\004\042\uffe4\001\002\000\006\042\uffe5\112\063\001" +
    "\002\000\004\042\uffe6\001\002\000\004\076\064\001\002" +
    "\000\010\042\ufffb\043\024\112\ufffb\001\002\000\006\042" +
    "\uffe2\112\uffe2\001\002\000\032\021\102\052\106\056\101" +
    "\067\100\073\077\074\103\075\073\076\112\077\105\104" +
    "\113\113\111\114\116\001\002\000\004\045\072\001\002" +
    "\000\004\042\uffdf\001\002\000\004\042\uffdc\001\002\000" +
    "\040\021\102\045\072\046\uffbf\052\106\056\101\067\100" +
    "\073\077\074\103\075\073\076\112\077\105\104\113\112" +
    "\uffbf\113\111\114\116\001\002\000\052\042\uff9a\043\uff9a" +
    "\046\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a\057" +
    "\uff9a\060\uff9a\061\uff9a\062\uff9a\063\uff9a\064\uff9a\065\uff9a" +
    "\066\uff9a\072\uff9a\100\uff9a\101\uff9a\112\uff9a\001\002\000" +
    "\052\042\uffa4\043\uffa4\046\uffa4\051\144\052\145\053\147" +
    "\054\150\055\146\057\uffa4\060\173\061\166\062\170\063" +
    "\167\064\uffa4\065\uffa4\066\uffa4\072\uffa4\100\165\101\172" +
    "\112\uffa4\001\002\000\006\046\162\112\163\001\002\000" +
    "\024\042\uffa6\043\uffa6\046\uffa6\057\uffa6\064\uffa6\065\uffa6" +
    "\066\uffa6\072\uffa6\112\uffa6\001\002\000\052\042\uff96\043" +
    "\uff96\046\uff96\051\uff96\052\uff96\053\uff96\054\uff96\055\uff96" +
    "\057\uff96\060\uff96\061\uff96\062\uff96\063\uff96\064\uff96\065" +
    "\uff96\066\uff96\072\uff96\100\uff96\101\uff96\112\uff96\001\002" +
    "\000\032\021\102\052\106\056\101\067\100\073\077\074" +
    "\103\075\073\076\112\077\105\104\113\113\111\114\116" +
    "\001\002\000\032\021\102\052\106\056\101\067\100\073" +
    "\077\074\103\075\073\076\112\077\105\104\113\113\111" +
    "\114\116\001\002\000\004\076\112\001\002\000\052\042" +
    "\uff9b\043\uff9b\046\uff9b\051\uff9b\052\uff9b\053\uff9b\054\uff9b" +
    "\055\uff9b\057\uff9b\060\uff9b\061\uff9b\062\uff9b\063\uff9b\064" +
    "\uff9b\065\uff9b\066\uff9b\072\uff9b\100\uff9b\101\uff9b\112\uff9b" +
    "\001\002\000\064\042\uffd3\043\uffd3\044\uffd3\046\uffd3\047" +
    "\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3" +
    "\057\uffd3\060\uffd3\061\uffd3\062\uffd3\063\uffd3\064\uffd3\065" +
    "\uffd3\066\uffd3\070\uffd3\071\uffd3\072\uffd3\100\uffd3\101\uffd3" +
    "\112\uffd3\001\002\000\052\042\uff99\043\uff99\046\uff99\051" +
    "\uff99\052\uff99\053\uff99\054\uff99\055\uff99\057\uff99\060\uff99" +
    "\061\uff99\062\uff99\063\uff99\064\uff99\065\uff99\066\uff99\072" +
    "\uff99\100\uff99\101\uff99\112\uff99\001\002\000\030\021\102" +
    "\052\106\056\101\073\077\074\103\075\073\076\112\077" +
    "\105\104\113\113\111\114\116\001\002\000\016\046\uffc0" +
    "\057\uffc0\064\124\065\125\066\123\112\uffc0\001\002\000" +
    "\056\042\uff98\043\uff98\046\uff98\051\uff98\052\uff98\053\uff98" +
    "\054\uff98\055\uff98\057\uff98\060\uff98\061\uff98\062\uff98\063" +
    "\uff98\064\uff98\065\uff98\066\uff98\070\140\071\054\072\uff98" +
    "\100\uff98\101\uff98\112\uff98\001\002\000\052\042\uff95\043" +
    "\uff95\046\uff95\051\uff95\052\uff95\053\uff95\054\uff95\055\uff95" +
    "\057\uff95\060\uff95\061\uff95\062\uff95\063\uff95\064\uff95\065" +
    "\uff95\066\uff95\072\uff95\100\uff95\101\uff95\112\uff95\001\002" +
    "\000\066\042\uffd2\043\uffd2\044\uffd2\046\uffd2\047\uffd2\050" +
    "\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056\135" +
    "\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2\065" +
    "\uffd2\066\uffd2\070\uffd2\071\uffd2\072\uffd2\100\uffd2\101\uffd2" +
    "\112\uffd2\001\002\000\004\076\131\001\002\000\052\042" +
    "\uff9c\043\uff9c\046\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c" +
    "\055\uff9c\057\uff9c\060\uff9c\061\uff9c\062\uff9c\063\uff9c\064" +
    "\uff9c\065\uff9c\066\uff9c\072\uff9c\100\uff9c\101\uff9c\112\uff9c" +
    "\001\002\000\006\046\120\112\121\001\002\000\052\042" +
    "\uff94\043\uff94\046\uff94\051\uff94\052\uff94\053\uff94\054\uff94" +
    "\055\uff94\057\uff94\060\uff94\061\uff94\062\uff94\063\uff94\064" +
    "\uff94\065\uff94\066\uff94\072\uff94\100\uff94\101\uff94\112\uff94" +
    "\001\002\000\006\046\uffd7\112\uffd7\001\002\000\010\042" +
    "\uffd9\046\uffd9\112\uffd9\001\002\000\032\021\102\052\106" +
    "\056\101\067\100\073\077\074\103\075\073\076\112\077" +
    "\105\104\113\113\111\114\116\001\002\000\016\046\uffc1" +
    "\057\uffc1\064\124\065\125\066\123\112\uffc1\001\002\000" +
    "\032\021\102\052\106\056\101\067\100\073\077\074\103" +
    "\075\073\076\112\077\105\104\113\113\111\114\116\001" +
    "\002\000\032\021\102\052\106\056\101\067\100\073\077" +
    "\074\103\075\073\076\112\077\105\104\113\113\111\114" +
    "\116\001\002\000\032\021\102\052\106\056\101\067\100" +
    "\073\077\074\103\075\073\076\112\077\105\104\113\113" +
    "\111\114\116\001\002\000\024\042\uffa9\043\uffa9\046\uffa9" +
    "\057\uffa9\064\uffa9\065\uffa9\066\uffa9\072\uffa9\112\uffa9\001" +
    "\002\000\024\042\uffaa\043\uffaa\046\uffaa\057\uffaa\064\uffaa" +
    "\065\125\066\123\072\uffaa\112\uffaa\001\002\000\024\042" +
    "\uffa8\043\uffa8\046\uffa8\057\uffa8\064\uffa8\065\125\066\uffa8" +
    "\072\uffa8\112\uffa8\001\002\000\004\056\132\001\002\000" +
    "\036\021\102\052\106\056\101\057\uffbf\067\100\073\077" +
    "\074\103\075\073\076\112\077\105\104\113\112\uffbf\113" +
    "\111\114\116\001\002\000\006\057\134\112\121\001\002" +
    "\000\052\042\uffc2\043\uffc2\046\uffc2\051\uffc2\052\uffc2\053" +
    "\uffc2\054\uffc2\055\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2" +
    "\063\uffc2\064\uffc2\065\uffc2\066\uffc2\072\uffc2\100\uffc2\101" +
    "\uffc2\112\uffc2\001\002\000\036\021\102\052\106\056\101" +
    "\057\uffbf\067\100\073\077\074\103\075\073\076\112\077" +
    "\105\104\113\112\uffbf\113\111\114\116\001\002\000\006" +
    "\057\137\112\121\001\002\000\064\042\uffd1\043\uffd1\044" +
    "\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1" +
    "\054\uffd1\055\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063" +
    "\uffd1\064\uffd1\065\uffd1\066\uffd1\070\uffd1\071\uffd1\072\uffd1" +
    "\100\uffd1\101\uffd1\112\uffd1\001\002\000\004\076\112\001" +
    "\002\000\054\042\uff97\043\uff97\046\uff97\051\uff97\052\uff97" +
    "\053\uff97\054\uff97\055\uff97\057\uff97\060\uff97\061\uff97\062" +
    "\uff97\063\uff97\064\uff97\065\uff97\066\uff97\071\066\072\uff97" +
    "\100\uff97\101\uff97\112\uff97\001\002\000\064\042\uffd4\043" +
    "\uffd4\044\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4" +
    "\053\uffd4\054\uffd4\055\uffd4\057\uffd4\060\uffd4\061\uffd4\062" +
    "\uffd4\063\uffd4\064\uffd4\065\uffd4\066\uffd4\070\uffd4\071\uffd4" +
    "\072\uffd4\100\uffd4\101\uffd4\112\uffd4\001\002\000\052\042" +
    "\uff9e\043\uff9e\046\uff9e\051\uff9e\052\uff9e\053\147\054\150" +
    "\055\146\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\064" +
    "\uff9e\065\uff9e\066\uff9e\072\uff9e\100\uff9e\101\uff9e\112\uff9e" +
    "\001\002\000\030\021\102\052\106\056\101\073\077\074" +
    "\103\075\073\076\112\077\105\104\113\113\111\114\116" +
    "\001\002\000\030\021\102\052\106\056\101\073\077\074" +
    "\103\075\073\076\112\077\105\104\113\113\111\114\116" +
    "\001\002\000\030\021\102\052\106\056\101\073\077\074" +
    "\103\075\073\076\112\077\105\104\113\113\111\114\116" +
    "\001\002\000\030\021\102\052\106\056\101\073\077\074" +
    "\103\075\073\076\112\077\105\104\113\113\111\114\116" +
    "\001\002\000\030\021\102\052\106\056\101\073\077\074" +
    "\103\075\073\076\112\077\105\104\113\113\111\114\116" +
    "\001\002\000\052\042\uffa0\043\uffa0\046\uffa0\051\uffa0\052" +
    "\uffa0\053\uffa0\054\uffa0\055\146\057\uffa0\060\uffa0\061\uffa0" +
    "\062\uffa0\063\uffa0\064\uffa0\065\uffa0\066\uffa0\072\uffa0\100" +
    "\uffa0\101\uffa0\112\uffa0\001\002\000\052\042\uffa1\043\uffa1" +
    "\046\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1\055\146\057" +
    "\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1\064\uffa1\065\uffa1" +
    "\066\uffa1\072\uffa1\100\uffa1\101\uffa1\112\uffa1\001\002\000" +
    "\052\042\uff9f\043\uff9f\046\uff9f\051\uff9f\052\uff9f\053\uff9f" +
    "\054\uff9f\055\146\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063" +
    "\uff9f\064\uff9f\065\uff9f\066\uff9f\072\uff9f\100\uff9f\101\uff9f" +
    "\112\uff9f\001\002\000\052\042\uffa2\043\uffa2\046\uffa2\051" +
    "\uffa2\052\uffa2\053\147\054\150\055\146\057\uffa2\060\uffa2" +
    "\061\uffa2\062\uffa2\063\uffa2\064\uffa2\065\uffa2\066\uffa2\072" +
    "\uffa2\100\uffa2\101\uffa2\112\uffa2\001\002\000\052\042\uffa3" +
    "\043\uffa3\046\uffa3\051\uffa3\052\uffa3\053\147\054\150\055" +
    "\146\057\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3\064\uffa3" +
    "\065\uffa3\066\uffa3\072\uffa3\100\uffa3\101\uffa3\112\uffa3\001" +
    "\002\000\054\042\uffc3\043\uffc3\046\uffc3\051\uffc3\052\uffc3" +
    "\053\uffc3\054\uffc3\055\uffc3\057\uffc3\060\uffc3\061\uffc3\062" +
    "\uffc3\063\uffc3\064\uffc3\065\uffc3\066\uffc3\070\140\072\uffc3" +
    "\100\uffc3\101\uffc3\112\uffc3\001\002\000\012\057\160\064" +
    "\124\065\125\066\123\001\002\000\052\042\uff9d\043\uff9d" +
    "\046\uff9d\051\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d\057" +
    "\uff9d\060\uff9d\061\uff9d\062\uff9d\063\uff9d\064\uff9d\065\uff9d" +
    "\066\uff9d\072\uff9d\100\uff9d\101\uff9d\112\uff9d\001\002\000" +
    "\024\042\uffa7\043\uffa7\046\uffa7\057\uffa7\064\uffa7\065\uffa7" +
    "\066\uffa7\072\uffa7\112\uffa7\001\002\000\010\042\uffda\046" +
    "\uffda\112\uffda\001\002\000\004\045\072\001\002\000\006" +
    "\046\uffd8\112\uffd8\001\002\000\030\021\uff91\052\uff91\056" +
    "\uff91\073\uff91\074\uff91\075\uff91\076\uff91\077\uff91\104\uff91" +
    "\113\uff91\114\uff91\001\002\000\030\021\uff92\052\uff92\056" +
    "\uff92\073\uff92\074\uff92\075\uff92\076\uff92\077\uff92\104\uff92" +
    "\113\uff92\114\uff92\001\002\000\030\021\uff8e\052\uff8e\056" +
    "\uff8e\073\uff8e\074\uff8e\075\uff8e\076\uff8e\077\uff8e\104\uff8e" +
    "\113\uff8e\114\uff8e\001\002\000\030\021\uff8f\052\uff8f\056" +
    "\uff8f\073\uff8f\074\uff8f\075\uff8f\076\uff8f\077\uff8f\104\uff8f" +
    "\113\uff8f\114\uff8f\001\002\000\030\021\102\052\106\056" +
    "\101\073\077\074\103\075\073\076\112\077\105\104\113" +
    "\113\111\114\116\001\002\000\030\021\uff90\052\uff90\056" +
    "\uff90\073\uff90\074\uff90\075\uff90\076\uff90\077\uff90\104\uff90" +
    "\113\uff90\114\uff90\001\002\000\030\021\uff93\052\uff93\056" +
    "\uff93\073\uff93\074\uff93\075\uff93\076\uff93\077\uff93\104\uff93" +
    "\113\uff93\114\uff93\001\002\000\036\042\uffa5\043\uffa5\046" +
    "\uffa5\051\144\052\145\053\147\054\150\055\146\057\uffa5" +
    "\064\uffa5\065\uffa5\066\uffa5\072\uffa5\112\uffa5\001\002\000" +
    "\012\064\124\065\125\066\123\072\176\001\002\000\056" +
    "\042\uffde\043\uffde\044\uffde\046\uffde\051\uffde\052\uffde\053" +
    "\uffde\054\uffde\055\uffde\057\uffde\060\uffde\061\uffde\062\uffde" +
    "\063\uffde\064\uffde\065\uffde\066\uffde\071\uffde\072\uffde\100" +
    "\uffde\101\uffde\112\uffde\001\002\000\010\042\ufffb\043\024" +
    "\112\ufffb\001\002\000\006\042\uffe1\112\uffe1\001\002\000" +
    "\012\042\uffd6\064\124\065\125\066\123\001\002\000\004" +
    "\042\uffe0\001\002\000\004\076\204\001\002\000\004\056" +
    "\205\001\002\000\004\057\206\001\002\000\004\042\uffd5" +
    "\001\002\000\012\064\124\065\125\066\123\072\210\001" +
    "\002\000\056\042\uffdd\043\uffdd\044\uffdd\046\uffdd\051\uffdd" +
    "\052\uffdd\053\uffdd\054\uffdd\055\uffdd\057\uffdd\060\uffdd\061" +
    "\uffdd\062\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd\071\uffdd" +
    "\072\uffdd\100\uffdd\101\uffdd\112\uffdd\001\002\000\024\004" +
    "\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed" +
    "\046\uffed\076\uffed\001\002\000\006\002\uffee\015\uffee\001" +
    "\002\000\004\056\214\001\002\000\022\005\045\006\036" +
    "\007\042\010\047\012\034\057\uffc5\076\032\112\uffc5\001" +
    "\002\000\004\076\u010a\001\002\000\006\057\220\112\217" +
    "\001\002\000\016\005\045\006\036\007\042\010\047\012" +
    "\034\076\032\001\002\000\006\043\024\045\ufffb\001\002" +
    "\000\004\045\222\001\002\000\036\004\050\020\242\021" +
    "\102\024\240\027\224\030\232\031\234\032\244\033\246" +
    "\034\223\041\230\076\112\104\113\105\252\001\002\000" +
    "\004\056\u0102\001\002\000\004\056\355\001\002\000\044" +
    "\004\uff86\020\uff86\021\uff86\024\uff86\025\uff86\026\uff86\027" +
    "\uff86\030\uff86\031\uff86\032\uff86\033\uff86\034\uff86\041\uff86" +
    "\046\uff86\076\uff86\104\uff86\105\uff86\001\002\000\040\004" +
    "\050\020\242\021\102\024\240\027\224\030\232\031\234" +
    "\032\244\033\246\034\223\041\230\046\354\076\112\104" +
    "\113\105\252\001\002\000\044\004\uff8c\020\uff8c\021\uff8c" +
    "\024\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c\031\uff8c\032" +
    "\uff8c\033\uff8c\034\uff8c\041\uff8c\046\uff8c\076\uff8c\104\uff8c" +
    "\105\uff8c\001\002\000\004\056\350\001\002\000\004\042" +
    "\347\001\002\000\004\056\341\001\002\000\044\004\uff82" +
    "\020\uff82\021\uff82\024\uff82\025\uff82\026\uff82\027\uff82\030" +
    "\uff82\031\uff82\032\uff82\033\uff82\034\uff82\041\uff82\046\uff82" +
    "\076\uff82\104\uff82\105\uff82\001\002\000\004\045\332\001" +
    "\002\000\044\004\uff85\020\uff85\021\uff85\024\uff85\025\uff85" +
    "\026\uff85\027\uff85\030\uff85\031\uff85\032\uff85\033\uff85\034" +
    "\uff85\041\uff85\046\uff85\076\uff85\104\uff85\105\uff85\001\002" +
    "\000\044\004\uff83\020\uff83\021\uff83\024\uff83\025\uff83\026" +
    "\uff83\027\uff83\030\uff83\031\uff83\032\uff83\033\uff83\034\uff83" +
    "\041\uff83\046\uff83\076\uff83\104\uff83\105\uff83\001\002\000" +
    "\014\044\317\047\316\050\321\070\140\071\054\001\002" +
    "\000\004\056\275\001\002\000\004\042\274\001\002\000" +
    "\032\021\102\052\106\056\101\067\100\073\077\074\103" +
    "\075\073\076\112\077\105\104\113\113\111\114\116\001" +
    "\002\000\004\042\272\001\002\000\004\042\271\001\002" +
    "\000\044\004\uff87\020\uff87\021\uff87\024\uff87\025\uff87\026" +
    "\uff87\027\uff87\030\uff87\031\uff87\032\uff87\033\uff87\034\uff87" +
    "\041\uff87\046\uff87\076\uff87\104\uff87\105\uff87\001\002\000" +
    "\004\042\270\001\002\000\004\042\267\001\002\000\044" +
    "\004\uff81\020\uff81\021\uff81\024\uff81\025\uff81\026\uff81\027" +
    "\uff81\030\uff81\031\uff81\032\uff81\033\uff81\034\uff81\041\uff81" +
    "\046\uff81\076\uff81\104\uff81\105\uff81\001\002\000\044\004" +
    "\uff84\020\uff84\021\uff84\024\uff84\025\uff84\026\uff84\027\uff84" +
    "\030\uff84\031\uff84\032\uff84\033\uff84\034\uff84\041\uff84\046" +
    "\uff84\076\uff84\104\uff84\105\uff84\001\002\000\004\056\253" +
    "\001\002\000\032\021\102\052\106\056\101\067\100\073" +
    "\077\074\103\075\073\076\112\077\105\104\113\113\111" +
    "\114\116\001\002\000\012\057\255\064\124\065\125\066" +
    "\123\001\002\000\004\045\256\001\002\000\036\004\050" +
    "\020\242\021\102\024\240\027\224\030\232\031\234\032" +
    "\244\033\246\034\223\041\230\076\112\104\113\105\252" +
    "\001\002\000\040\004\050\020\242\021\102\024\240\027" +
    "\224\030\232\031\234\032\244\033\246\034\223\041\230" +
    "\046\261\076\112\104\113\105\252\001\002\000\044\004" +
    "\uff8d\020\uff8d\021\uff8d\024\uff8d\025\uff8d\026\uff8d\027\uff8d" +
    "\030\uff8d\031\uff8d\032\uff8d\033\uff8d\034\uff8d\041\uff8d\046" +
    "\uff8d\076\uff8d\104\uff8d\105\uff8d\001\002\000\046\004\uffba" +
    "\020\uffba\021\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030" +
    "\uffba\031\uffba\032\uffba\033\uffba\034\uffba\041\uffba\046\uffba" +
    "\076\uffba\104\uffba\105\uffba\106\262\001\002\000\004\045" +
    "\264\001\002\000\044\004\uffbc\020\uffbc\021\uffbc\024\uffbc" +
    "\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033" +
    "\uffbc\034\uffbc\041\uffbc\046\uffbc\076\uffbc\104\uffbc\105\uffbc" +
    "\001\002\000\036\004\050\020\242\021\102\024\240\027" +
    "\224\030\232\031\234\032\244\033\246\034\223\041\230" +
    "\076\112\104\113\105\252\001\002\000\040\004\050\020" +
    "\242\021\102\024\240\027\224\030\232\031\234\032\244" +
    "\033\246\034\223\041\230\046\266\076\112\104\113\105" +
    "\252\001\002\000\044\004\uffbb\020\uffbb\021\uffbb\024\uffbb" +
    "\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033" +
    "\uffbb\034\uffbb\041\uffbb\046\uffbb\076\uffbb\104\uffbb\105\uffbb" +
    "\001\002\000\044\004\uff88\020\uff88\021\uff88\024\uff88\025" +
    "\uff88\026\uff88\027\uff88\030\uff88\031\uff88\032\uff88\033\uff88" +
    "\034\uff88\041\uff88\046\uff88\076\uff88\104\uff88\105\uff88\001" +
    "\002\000\044\004\uff7f\020\uff7f\021\uff7f\024\uff7f\025\uff7f" +
    "\026\uff7f\027\uff7f\030\uff7f\031\uff7f\032\uff7f\033\uff7f\034" +
    "\uff7f\041\uff7f\046\uff7f\076\uff7f\104\uff7f\105\uff7f\001\002" +
    "\000\044\004\uff80\020\uff80\021\uff80\024\uff80\025\uff80\026" +
    "\uff80\027\uff80\030\uff80\031\uff80\032\uff80\033\uff80\034\uff80" +
    "\041\uff80\046\uff80\076\uff80\104\uff80\105\uff80\001\002\000" +
    "\044\004\uff89\020\uff89\021\uff89\024\uff89\025\uff89\026\uff89" +
    "\027\uff89\030\uff89\031\uff89\032\uff89\033\uff89\034\uff89\041" +
    "\uff89\046\uff89\076\uff89\104\uff89\105\uff89\001\002\000\012" +
    "\042\uffc4\064\124\065\125\066\123\001\002\000\044\004" +
    "\uff8b\020\uff8b\021\uff8b\024\uff8b\025\uff8b\026\uff8b\027\uff8b" +
    "\030\uff8b\031\uff8b\032\uff8b\033\uff8b\034\uff8b\041\uff8b\046" +
    "\uff8b\076\uff8b\104\uff8b\105\uff8b\001\002\000\004\076\112" +
    "\001\002\000\006\057\277\070\140\001\002\000\004\045" +
    "\300\001\002\000\004\025\302\001\002\000\010\025\302" +
    "\026\310\046\uffb4\001\002\000\032\021\102\052\106\056" +
    "\101\067\100\073\077\074\103\075\073\076\112\077\105" +
    "\104\113\113\111\114\116\001\002\000\010\025\uffb7\026" +
    "\uffb7\046\uffb7\001\002\000\012\043\305\064\124\065\125" +
    "\066\123\001\002\000\036\004\050\020\242\021\102\024" +
    "\240\027\224\030\232\031\234\032\244\033\246\034\223" +
    "\041\230\076\112\104\113\105\252\001\002\000\044\004" +
    "\050\020\242\021\102\024\240\025\uffb6\026\uffb6\027\224" +
    "\030\232\031\234\032\244\033\246\034\223\041\230\046" +
    "\uffb6\076\112\104\113\105\252\001\002\000\004\046\314" +
    "\001\002\000\004\043\312\001\002\000\010\025\uffb8\026" +
    "\uffb8\046\uffb8\001\002\000\036\004\050\020\242\021\102" +
    "\024\240\027\224\030\232\031\234\032\244\033\246\034" +
    "\223\041\230\076\112\104\113\105\252\001\002\000\040" +
    "\004\050\020\242\021\102\024\240\027\224\030\232\031" +
    "\234\032\244\033\246\034\223\041\230\046\uffb5\076\112" +
    "\104\113\105\252\001\002\000\044\004\uffb9\020\uffb9\021" +
    "\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9" +
    "\032\uffb9\033\uffb9\034\uffb9\041\uffb9\046\uffb9\076\uffb9\104" +
    "\uffb9\105\uffb9\001\002\000\004\042\331\001\002\000\006" +
    "\042\uffae\057\uffae\001\002\000\034\017\325\021\102\052" +
    "\106\056\101\067\100\073\077\074\103\075\073\076\112" +
    "\077\105\104\113\113\111\114\116\001\002\000\006\044" +
    "\322\071\066\001\002\000\006\042\uffad\057\uffad\001\002" +
    "\000\032\021\102\052\106\056\101\067\100\073\077\074" +
    "\103\075\073\076\112\077\105\104\113\113\111\114\116" +
    "\001\002\000\014\042\ufff9\057\ufff9\064\124\065\125\066" +
    "\123\001\002\000\014\042\ufffa\057\ufffa\064\124\065\125" +
    "\066\123\001\002\000\004\076\326\001\002\000\004\056" +
    "\327\001\002\000\004\057\330\001\002\000\006\042\ufff8" +
    "\057\ufff8\001\002\000\044\004\uff7e\020\uff7e\021\uff7e\024" +
    "\uff7e\025\uff7e\026\uff7e\027\uff7e\030\uff7e\031\uff7e\032\uff7e" +
    "\033\uff7e\034\uff7e\041\uff7e\046\uff7e\076\uff7e\104\uff7e\105" +
    "\uff7e\001\002\000\036\004\050\020\242\021\102\024\240" +
    "\027\224\030\232\031\234\032\244\033\246\034\223\041" +
    "\230\076\112\104\113\105\252\001\002\000\040\004\050" +
    "\020\242\021\102\024\240\027\224\030\232\031\234\032" +
    "\244\033\246\034\223\041\230\046\334\076\112\104\113" +
    "\105\252\001\002\000\004\030\335\001\002\000\004\056" +
    "\336\001\002\000\032\021\102\052\106\056\101\067\100" +
    "\073\077\074\103\075\073\076\112\077\105\104\113\113" +
    "\111\114\116\001\002\000\012\057\340\064\124\065\125" +
    "\066\123\001\002\000\044\004\uffab\020\uffab\021\uffab\024" +
    "\uffab\025\uffab\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab" +
    "\033\uffab\034\uffab\041\uffab\046\uffab\076\uffab\104\uffab\105" +
    "\uffab\001\002\000\032\021\102\052\106\056\101\067\100" +
    "\073\077\074\103\075\073\076\112\077\105\104\113\113" +
    "\111\114\116\001\002\000\012\057\343\064\124\065\125" +
    "\066\123\001\002\000\004\045\344\001\002\000\036\004" +
    "\050\020\242\021\102\024\240\027\224\030\232\031\234" +
    "\032\244\033\246\034\223\041\230\076\112\104\113\105" +
    "\252\001\002\000\040\004\050\020\242\021\102\024\240" +
    "\027\224\030\232\031\234\032\244\033\246\034\223\041" +
    "\230\046\346\076\112\104\113\105\252\001\002\000\044" +
    "\004\uffac\020\uffac\021\uffac\024\uffac\025\uffac\026\uffac\027" +
    "\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac\041\uffac" +
    "\046\uffac\076\uffac\104\uffac\105\uffac\001\002\000\044\004" +
    "\uff8a\020\uff8a\021\uff8a\024\uff8a\025\uff8a\026\uff8a\027\uff8a" +
    "\030\uff8a\031\uff8a\032\uff8a\033\uff8a\034\uff8a\041\uff8a\046" +
    "\uff8a\076\uff8a\104\uff8a\105\uff8a\001\002\000\032\021\102" +
    "\052\106\056\101\067\100\073\077\074\103\075\073\076" +
    "\112\077\105\104\113\113\111\114\116\001\002\000\012" +
    "\057\352\064\124\065\125\066\123\001\002\000\004\042" +
    "\353\001\002\000\044\004\uff7d\020\uff7d\021\uff7d\024\uff7d" +
    "\025\uff7d\026\uff7d\027\uff7d\030\uff7d\031\uff7d\032\uff7d\033" +
    "\uff7d\034\uff7d\041\uff7d\046\uff7d\076\uff7d\104\uff7d\105\uff7d" +
    "\001\002\000\024\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010" +
    "\uffd0\011\uffd0\012\uffd0\046\uffd0\076\uffd0\001\002\000\006" +
    "\004\356\076\112\001\002\000\016\005\045\006\036\007" +
    "\042\010\047\012\034\076\032\001\002\000\006\044\374" +
    "\070\140\001\002\000\004\043\361\001\002\000\032\021" +
    "\102\052\106\056\101\067\100\073\077\074\103\075\073" +
    "\076\112\077\105\104\113\113\111\114\116\001\002\000" +
    "\012\043\363\064\124\065\125\066\123\001\002\000\004" +
    "\076\112\001\002\000\004\057\uffaf\001\002\000\014\044" +
    "\317\047\316\050\321\070\140\071\054\001\002\000\004" +
    "\057\367\001\002\000\004\045\370\001\002\000\036\004" +
    "\050\020\242\021\102\024\240\027\224\030\232\031\234" +
    "\032\244\033\246\034\223\041\230\076\112\104\113\105" +
    "\252\001\002\000\040\004\050\020\242\021\102\024\240" +
    "\027\224\030\232\031\234\032\244\033\246\034\223\041" +
    "\230\046\372\076\112\104\113\105\252\001\002\000\044" +
    "\004\uffb3\020\uffb3\021\uffb3\024\uffb3\025\uffb3\026\uffb3\027" +
    "\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\041\uffb3" +
    "\046\uffb3\076\uffb3\104\uffb3\105\uffb3\001\002\000\004\057" +
    "\uffb0\001\002\000\032\021\102\052\106\056\101\067\100" +
    "\073\077\074\103\075\073\076\112\077\105\104\113\113" +
    "\111\114\116\001\002\000\012\043\uffb1\064\124\065\125" +
    "\066\123\001\002\000\004\076\377\001\002\000\004\044" +
    "\u0100\001\002\000\032\021\102\052\106\056\101\067\100" +
    "\073\077\074\103\075\073\076\112\077\105\104\113\113" +
    "\111\114\116\001\002\000\012\043\uffb2\064\124\065\125" +
    "\066\123\001\002\000\004\076\112\001\002\000\006\070" +
    "\140\112\u0104\001\002\000\004\076\112\001\002\000\006" +
    "\057\u0106\070\140\001\002\000\004\042\u0107\001\002\000" +
    "\044\004\uff7c\020\uff7c\021\uff7c\024\uff7c\025\uff7c\026\uff7c" +
    "\027\uff7c\030\uff7c\031\uff7c\032\uff7c\033\uff7c\034\uff7c\041" +
    "\uff7c\046\uff7c\076\uff7c\104\uff7c\105\uff7c\001\002\000\004" +
    "\076\u0109\001\002\000\006\057\uffc7\112\uffc7\001\002\000" +
    "\006\057\uffc6\112\uffc6\001\002\000\024\004\uffea\005\uffea" +
    "\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea\046\uffea\076" +
    "\uffea\001\002\000\004\056\u010d\001\002\000\004\057\u010e" +
    "\001\002\000\004\045\u010f\001\002\000\036\004\050\020" +
    "\242\021\102\024\240\027\224\030\232\031\234\032\244" +
    "\033\246\034\223\041\230\076\112\104\113\105\252\001" +
    "\002\000\040\004\050\020\242\021\102\024\240\027\224" +
    "\030\232\031\234\032\244\033\246\034\223\041\230\046" +
    "\u0111\076\112\104\113\105\252\001\002\000\024\004\uffbe" +
    "\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe\046" +
    "\uffbe\076\uffbe\001\002\000\006\002\ufff0\015\ufff0\001\002" +
    "\000\004\014\u0114\001\002\000\004\042\u0115\001\002\000" +
    "\010\013\ufff1\015\ufff1\023\ufff1\001\002\000\004\042\u0117" +
    "\001\002\000\010\013\uffbd\015\uffbd\023\uffbd\001\002\000" +
    "\004\002\001\001\002\000\010\013\ufff5\015\ufff5\023\ufff5" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0117\000\016\002\004\003\003\004\012\007\010\035" +
    "\007\057\005\001\001\000\010\007\010\035\007\057\u0118" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\014\012\013\001\001\000\002\001\001\000" +
    "\004\012\u0111\001\001\000\002\001\001\000\004\010\017" +
    "\001\001\000\004\067\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\070\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\011\045\015\034\024\040\027\042" +
    "\034\037\065\043\066\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\015\034\024\040\027\210\034" +
    "\037\065\043\066\036\001\001\000\002\001\001\000\004" +
    "\065\050\001\001\000\002\001\001\000\004\067\052\001" +
    "\001\000\012\016\057\020\056\025\061\036\060\001\001" +
    "\000\016\022\206\023\107\032\113\060\075\061\073\062" +
    "\103\001\001\000\020\017\201\022\200\023\107\032\113" +
    "\060\075\061\073\062\103\001\001\000\002\001\001\000" +
    "\004\021\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\067\064\001" +
    "\001\000\002\001\001\000\016\022\174\023\107\032\113" +
    "\060\075\061\073\062\103\001\001\000\004\055\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\022\106" +
    "\023\107\032\113\033\114\054\074\055\116\060\075\061" +
    "\073\062\103\001\001\000\002\001\001\000\004\063\170" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\022\160\023\107\032\113\060\075\061\073" +
    "\062\103\001\001\000\016\022\156\023\107\032\113\060" +
    "\075\061\073\062\103\001\001\000\006\023\155\062\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\023\107\032\113\061\142\062\103\001\001" +
    "\000\002\001\001\000\004\020\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\022\121\023\107\032\113\060\075" +
    "\061\073\062\103\001\001\000\002\001\001\000\016\022" +
    "\127\023\107\032\113\060\075\061\073\062\103\001\001" +
    "\000\016\022\126\023\107\032\113\060\075\061\073\062" +
    "\103\001\001\000\016\022\125\023\107\032\113\060\075" +
    "\061\073\062\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\022\106" +
    "\023\107\032\113\033\132\060\075\061\073\062\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\022\106" +
    "\023\107\032\113\033\135\060\075\061\073\062\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\062\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\023\107\032\113\061\154\062\103\001\001" +
    "\000\012\023\107\032\113\061\153\062\103\001\001\000" +
    "\012\023\107\032\113\061\152\062\103\001\001\000\012" +
    "\023\107\032\113\061\151\062\103\001\001\000\012\023" +
    "\107\032\113\061\150\062\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\055" +
    "\163\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\023" +
    "\107\032\113\061\173\062\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\067\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\031\215\065\214\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\065\u0107\001" +
    "\001\000\004\067\220\001\001\000\002\001\001\000\040" +
    "\006\240\013\226\015\230\023\236\026\242\032\246\037" +
    "\244\041\225\042\224\046\247\047\234\051\250\052\235" +
    "\056\232\062\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\006\240\013\257\015\230" +
    "\023\236\026\242\032\246\037\244\042\224\046\247\047" +
    "\234\051\250\052\235\056\232\062\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\317\064\314\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\022\272\023\107" +
    "\032\113\060\075\061\073\062\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\022\253\023\107\032\113\060\075" +
    "\061\073\062\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\006\240\013\226\015\230\023\236\026\242" +
    "\032\246\037\244\041\256\042\224\046\247\047\234\051" +
    "\250\052\235\056\232\062\103\001\001\000\036\006\240" +
    "\013\257\015\230\023\236\026\242\032\246\037\244\042" +
    "\224\046\247\047\234\051\250\052\235\056\232\062\103" +
    "\001\001\000\002\001\001\000\004\040\262\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\006\240\013\226" +
    "\015\230\023\236\026\242\032\246\037\244\041\264\042" +
    "\224\046\247\047\234\051\250\052\235\056\232\062\103" +
    "\001\001\000\036\006\240\013\257\015\230\023\236\026" +
    "\242\032\246\037\244\042\224\046\247\047\234\051\250" +
    "\052\235\056\232\062\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\023" +
    "\275\062\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\043\300\044\302\001\001\000\006\044\310\045" +
    "\306\001\001\000\016\022\303\023\107\032\113\060\075" +
    "\061\073\062\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\006\240\013\226\015\230\023\236\026\242" +
    "\032\246\037\244\041\305\042\224\046\247\047\234\051" +
    "\250\052\235\056\232\062\103\001\001\000\036\006\240" +
    "\013\257\015\230\023\236\026\242\032\246\037\244\042" +
    "\224\046\247\047\234\051\250\052\235\056\232\062\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\006\240\013\226\015\230\023\236\026\242" +
    "\032\246\037\244\041\312\042\224\046\247\047\234\051" +
    "\250\052\235\056\232\062\103\001\001\000\036\006\240" +
    "\013\257\015\230\023\236\026\242\032\246\037\244\042" +
    "\224\046\247\047\234\051\250\052\235\056\232\062\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\022\323\023\107\032\113\060\075\061\073" +
    "\062\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\022\322\023\107\032\113\060\075\061\073\062\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\006\240\013\226\015\230\023" +
    "\236\026\242\032\246\037\244\041\332\042\224\046\247" +
    "\047\234\051\250\052\235\056\232\062\103\001\001\000" +
    "\036\006\240\013\257\015\230\023\236\026\242\032\246" +
    "\037\244\042\224\046\247\047\234\051\250\052\235\056" +
    "\232\062\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\022\336\023\107\032\113\060\075\061\073\062" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\022\341\023\107\032\113\060\075\061\073\062\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\006\240" +
    "\013\226\015\230\023\236\026\242\032\246\037\244\041" +
    "\344\042\224\046\247\047\234\051\250\052\235\056\232" +
    "\062\103\001\001\000\036\006\240\013\257\015\230\023" +
    "\236\026\242\032\246\037\244\042\224\046\247\047\234" +
    "\051\250\052\235\056\232\062\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\022\350\023\107\032\113" +
    "\060\075\061\073\062\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\023\356\050\357\062\103\001\001\000\004\065\375\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\022\361" +
    "\023\107\032\113\060\075\061\073\062\103\001\001\000" +
    "\002\001\001\000\012\006\363\023\364\030\365\062\103" +
    "\001\001\000\002\001\001\000\006\020\317\064\372\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\006\240" +
    "\013\226\015\230\023\236\026\242\032\246\037\244\041" +
    "\370\042\224\046\247\047\234\051\250\052\235\056\232" +
    "\062\103\001\001\000\036\006\240\013\257\015\230\023" +
    "\236\026\242\032\246\037\244\042\224\046\247\047\234" +
    "\051\250\052\235\056\232\062\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\022\374\023\107\032\113" +
    "\060\075\061\073\062\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\022\u0100\023\107" +
    "\032\113\060\075\061\073\062\103\001\001\000\002\001" +
    "\001\000\006\023\u0102\062\103\001\001\000\002\001\001" +
    "\000\006\023\u0104\062\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\006\240" +
    "\013\226\015\230\023\236\026\242\032\246\037\244\041" +
    "\u010f\042\224\046\247\047\234\051\250\052\235\056\232" +
    "\062\103\001\001\000\036\006\240\013\257\015\230\023" +
    "\236\026\242\032\246\037\244\042\224\046\247\047\234" +
    "\051\250\052\235\056\232\062\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoG$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoG$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoG$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible

    public static Nodo raiz=new Nodo("raiz");
    public void syntax_error(Symbol s){
        TablaErrores.insertarError("Error Sintactico: "+s.value.toString()+" ",s.right,s.left);
        System.out.println(s.value.toString()+" Fila: " +s.right+", Columna: "+s.left);        
    }

    public void unrecovered_syntax_error(Symbol s){        
        TablaErrores.insertarError("Error Sintactico: "+s.value.toString()+" ",s.right,s.left);
        System.out.println(s.value.toString()+" Fila: " +s.right+", Columna: "+s.left);        
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoG$actions {

//Codigo de acciones
      

  private final SintacticoG parser;

  /** Constructor */
  CUP$SintacticoG$actions(SintacticoG parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoG$do_action_part00000000(
    int                        CUP$SintacticoG$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoG$parser,
    java.util.Stack            CUP$SintacticoG$stack,
    int                        CUP$SintacticoG$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoG$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoG$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoG$parser.done_parsing();
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= ENC LALS 
            {
              Nodo RESULT =null;
		int encleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int encright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Nodo enc = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		int lalsleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int lalsright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo lals = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
        System.out.println("Archivo finalizado");
        raiz=Fabrica.crearNodoGraphik(enc,lals);        
    
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // TVISIBILIDAD ::= privado 
            {
              Integer RESULT =null;
		int privadoleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int privadoright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		String privado = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = Constante.privado;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("TVISIBILIDAD",54, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // TVISIBILIDAD ::= publico 
            {
              Integer RESULT =null;
		int publicoleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int publicoright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		String publico = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = Constante.publico;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("TVISIBILIDAD",54, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TVISIBILIDAD ::= protegido 
            {
              Integer RESULT =null;
		int protegidoleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int protegidoright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		String protegido = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = Constante.protegido;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("TVISIBILIDAD",54, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VISIBILIDAD ::= dospuntos TVISIBILIDAD 
            {
              Integer RESULT =null;
		int tvisibilidadleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int tvisibilidadright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Integer tvisibilidad = (Integer)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = tvisibilidad;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",53, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VISIBILIDAD ::= 
            {
              Integer RESULT =null;
		RESULT = Constante.publico;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",53, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ASIGNACION ::= LID igual EXP 
            {
              Nodo RESULT =null;
		int lidleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Nodo lid = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = Fabrica.crearNodoAsignacion(lid,exp,null);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ASIGNACION",4, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ASIGNACION ::= LID ARR igual EXP 
            {
              Nodo RESULT =null;
		int lidleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).right;
		Nodo lid = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Nodo arr = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = Fabrica.crearNodoAsignacion(lid,exp,arr);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ASIGNACION",4, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ASIGNACION ::= LID igual nuevo id parentesisa parentesisc 
            {
              Nodo RESULT =null;
		int lidleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-5)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-5)).right;
		Nodo lid = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		
                                    Nodo nuevo= Fabrica.crearNodoNuevo(id);
                                    RESULT = Fabrica.crearNodoAsignacion(lid,nuevo,null);
                                
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ASIGNACION",4, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ENC ::= LENCABEZADO 
            {
              Nodo RESULT =null;
		int encabezadoleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int encabezadoright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo encabezado = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = encabezado;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ENC",2, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ENC ::= 
            {
              Nodo RESULT =null;
		RESULT=Fabrica.crearNodoEnc(null);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ENC",2, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LENCABEZADO ::= LENCABEZADO ENCABEZADO 
            {
              Nodo RESULT =null;
		int encabezadoleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int encabezadoright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Nodo encabezado = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		int encleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int encright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo enc = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = Fabrica.insertarEnc(encabezado,enc);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LENCABEZADO",1, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LENCABEZADO ::= ENCABEZADO 
            {
              Nodo RESULT =null;
		int encleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int encright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo enc = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = Fabrica.crearNodoEnc(enc);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LENCABEZADO",1, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ENCABEZADO ::= IMPORTAR 
            {
              Nodo RESULT =null;
		int importarleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int importarright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo importar = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = importar;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",45, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ENCABEZADO ::= INCLUIR 
            {
              Nodo RESULT =null;
		int incluirleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int incluirright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo incluir = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = incluir;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",45, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IMPORTAR ::= importar id gk pregc 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		
                            Nodo id_imp = Fabrica.crearNodoHoja(Constante.id,id);
                            RESULT = Fabrica.crearNodoImportar(id_imp);
                         
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("IMPORTAR",5, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LALS ::= LALS ALS 
            {
              Nodo RESULT =null;
		int lalsleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int lalsright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Nodo lals = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		int alsleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int alsright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo als = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = Fabrica.insertarALS(lals,als);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LALS",3, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LALS ::= ALS 
            {
              Nodo RESULT =null;
		int alsleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int alsright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo als = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = Fabrica.crearNodoLALS(als);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LALS",3, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ALS ::= als id HEREDA VISIBILIDAD llavea CUERPOALS llavec 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-5)).value;
		int heredaleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)).left;
		int heredaright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)).right;
		Nodo hereda = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)).value;
		int visibilidadleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).left;
		int visibilidadright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).right;
		Integer visibilidad = (Integer)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Nodo cuerpo = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		RESULT = Fabrica.crearNodoALS(id,hereda,visibilidad,cuerpo);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ALS",8, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CUERPOALS ::= CUERPOALS SENTALS 
            {
              Nodo RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Nodo cuerpo = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = Fabrica.insertarSentencia(cuerpo,sent);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("CUERPOALS",7, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CUERPOALS ::= SENTALS 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = Fabrica.crearNodoCuerpo(sent);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("CUERPOALS",7, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTALS ::= DECFUN 
            {
              Nodo RESULT =null;
		int decfunleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int decfunright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo decfun = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = decfun;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTALS",21, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTALS ::= DECLARACION pregc 
            {
              Nodo RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Nodo dec = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		RESULT = dec;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTALS",21, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTALS ::= INICIO 
            {
              Nodo RESULT =null;
		int inicioleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int inicioright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo inicio = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = inicio;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTALS",21, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // HEREDA ::= hereda id 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = Fabrica.crearNodoHereda(id);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("HEREDA",6, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // HEREDA ::= 
            {
              Nodo RESULT =null;
		RESULT = Fabrica.crearNodoHereda("");
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("HEREDA",6, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= var TVAR id VISIBILIDAD DEC2 
            {
              Nodo RESULT =null;
		int tvarleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).left;
		int tvarright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).right;
		String tvar = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int visibilidadleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int visibilidadright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Integer visibilidad = (Integer)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		int dec2left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int dec2right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo dec2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = Fabrica.crearNodoDeclaracion(tvar,id,visibilidad,dec2);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DEC2 ::= IDL 
            {
              Nodo RESULT =null;
		int idlleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo idl = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT=idl;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("DEC2",19, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DEC2 ::= ASIG 
            {
              Nodo RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo asig = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = asig;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("DEC2",19, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DEC2 ::= 
            {
              Nodo RESULT =null;
		RESULT = null;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("DEC2",19, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IDL ::= IDL coma id VISIBILIDAD 
            {
              Nodo RESULT =null;
		int idlleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).right;
		Nodo idl = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		int visibilidadleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int visibilidadright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Integer visibilidad = (Integer)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
                Nodo id1=Fabrica.crearNodoHoja(Constante.id,id); 
                id1.setVisibilidad(visibilidad);
                RESULT = Fabrica.insertarIDL(idl,id1);
                
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("IDL",28, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IDL ::= coma id VISIBILIDAD 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		int visibilidadleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int visibilidadright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Integer visibilidad = (Integer)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
                Nodo id1=Fabrica.crearNodoHoja(Constante.id,id);
                id1.setVisibilidad(visibilidad);
                RESULT = Fabrica.crearNodoIDL(id1);
                
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("IDL",28, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ASIG ::= igual VALASIG 
            {
              Nodo RESULT =null;
		int valasigleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int valasigright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo valasig = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = valasig;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ASIG",12, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ASIG ::= ARR ASIGARR 
            {
              Nodo RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Nodo arr = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo asig = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = Fabrica.crearNodoArr(arr,asig);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ASIG",12, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ARR ::= ARR corchetea EXP corchetec 
            {
              Nodo RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).right;
		Nodo arr = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		RESULT = Fabrica.insertarCorchete(arr,exp);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ARR",14, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ARR ::= corchetea EXP corchetec 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		RESULT=Fabrica.crearNodoL_Corchete(exp);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ARR",14, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ASIGARR ::= igual LLAVE 
            {
              Nodo RESULT =null;
		int llaveleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int llaveright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo llave = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = llave;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ASIGARR",15, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ASIGARR ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ASIGARR",15, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LLAVE ::= llavea LLLAVE llavec 
            {
              Nodo RESULT =null;
		int lllaveleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int lllaveright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Nodo lllave = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		RESULT = lllave;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LLAVE",43, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LLAVE ::= llavea LPFUN llavec 
            {
              Nodo RESULT =null;
		int lpfunleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int lpfunright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Nodo lpfun = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		RESULT = lpfun;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LLAVE",43, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LLLAVE ::= LLLAVE coma LLAVE 
            {
              Nodo RESULT =null;
		int lllaveleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int lllaveright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Nodo lllave = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int llaveleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int llaveright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo llave = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = RESULT=Fabrica.insertarLlave(lllave,llave);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LLLAVE",42, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LLLAVE ::= LLAVE 
            {
              Nodo RESULT =null;
		int llaveleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int llaveright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo llave = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = Fabrica.crearNodoL_Llave(llave);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LLLAVE",42, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VALASIG ::= EXP 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = exp;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("VALASIG",13, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VALASIG ::= nuevo id parentesisa parentesisc 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		RESULT = Fabrica.crearNodoNuevo(id);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("VALASIG",13, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LID ::= LID punto ID 
            {
              Nodo RESULT =null;
		int lidleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Nodo lid = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo id = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		                                        
                    RESULT = Fabrica.insertarLID(lid,id);
                 
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LID",17, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LID ::= ID 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo id = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = Fabrica.crearNodoLID(id);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LID",17, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ID ::= id 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		 RESULT=Fabrica.crearNodoHoja(Constante.id,id);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ID",48, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ID ::= id parentesisa LPFUN parentesisc 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).value;
		int pdecfunleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int pdecfunright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Nodo pdecfun = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		
                RESULT=Fabrica.crearNodoHoja(Constante.id,id);
                RESULT.insertarHijo(pdecfun);
            
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ID",48, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECFUN ::= TFUN id parentesisa PDECFUN parentesisc VISIBILIDAD llavea CUERPO llavec 
            {
              Nodo RESULT =null;
		int tfunleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-8)).left;
		int tfunright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-8)).right;
		String tfun = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-7)).value;
		int pdecfunleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-5)).left;
		int pdecfunright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-5)).right;
		Nodo pdecfun = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-5)).value;
		int visibilidadleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).left;
		int visibilidadright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).right;
		Integer visibilidad = (Integer)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Nodo cuerpo = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		RESULT = Fabrica.crearNodoDecFun(tfun,id,pdecfun,visibilidad,cuerpo);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("DECFUN",18, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TVAR ::= tentero 
            {
              String RESULT =null;
		RESULT = Constante.tnum+"";
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("TVAR",51, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TVAR ::= tdecimal 
            {
              String RESULT =null;
		RESULT = Constante.tdecimal+"";
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("TVAR",51, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TVAR ::= tcaracter 
            {
              String RESULT =null;
		RESULT = Constante.tcaracter+"";
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("TVAR",51, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TVAR ::= tcadena 
            {
              String RESULT =null;
		RESULT = Constante.tcadena+"";
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("TVAR",51, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TVAR ::= tbool 
            {
              String RESULT =null;
		RESULT = Constante.tbool+"";
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("TVAR",51, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TVAR ::= id 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = id;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("TVAR",51, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TFUN ::= TVAR 
            {
              String RESULT =null;
		int tvarleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int tvarright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		String tvar = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = tvar;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("TFUN",52, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TFUN ::= tvacio 
            {
              String RESULT =null;
		RESULT = Constante.tvacio+"";
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("TFUN",52, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PDECFUN ::= PDECFUN coma TVAR id 
            {
              Nodo RESULT =null;
		int pdecfunleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).left;
		int pdecfunright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).right;
		Nodo pdecfun = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).value;
		int tvarleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int tvarright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		String tvar = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
                        Nodo par=Fabrica.crearNodoHoja(Constante.id,id,tvar);
                        RESULT= Fabrica.insertarPar(pdecfun,par);
                        
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("PDECFUN",23, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PDECFUN ::= TVAR id 
            {
              Nodo RESULT =null;
		int tvarleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int tvarright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		String tvar = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
                        Nodo par=Fabrica.crearNodoHoja(Constante.id,id,tvar);
                        RESULT= Fabrica.crearNodoLPAR(par);
                        
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("PDECFUN",23, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PDECFUN ::= 
            {
              Nodo RESULT =null;
		RESULT= Fabrica.crearNodoLPAR(null);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("PDECFUN",23, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // RETORNAR ::= retornar EXP 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = new Nodo(Constante.retornar); RESULT.insertarHijo(exp);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("RETORNAR",20, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LLAMADO ::= llamar LID 
            {
              Nodo RESULT =null;
		int lidleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo lid = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = Fabrica.crearNodoLlamado(lid);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LLAMADO",24, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LLAMADO ::= llamarhk id parentesisa LPFUN parentesisc 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).value;
		int lpfunleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int lpfunright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Nodo lpfun = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		RESULT = Fabrica.crearNodoLlamado(id,lpfun);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LLAMADO",24, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LPFUN ::= LPFUN coma EXP 
            {
              Nodo RESULT =null;
		int lparleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int lparright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Nodo lpar = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT=Fabrica.insertarPar(lpar,exp);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LPFUN",25, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LPFUN ::= EXP 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT=Fabrica.crearNodoLPAR(exp);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LPFUN",25, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LPFUN ::= 
            {
              Nodo RESULT =null;
		RESULT=Fabrica.crearNodoLPAR(null);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LPFUN",25, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // INICIO ::= tvacio inicio parentesisa parentesisc llavea CUERPO llavec 
            {
              Nodo RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Nodo cuerpo = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		RESULT = Fabrica.crearNodoInicio(cuerpo);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("INICIO",26, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // INCLUIR ::= incluirhk id pregc 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		
                        Nodo id_inc = Fabrica.crearNodoHoja(Constante.id, id);
                        RESULT = Fabrica.crearNodoIncluir(id_inc);
                    
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("INCLUIR",27, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SI ::= si parentesisa EXP parentesisc llavea CUERPO llavec SINO 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-5)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-5)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Nodo cuerpo = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int sinoleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int sinoright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo sino = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = Fabrica.crearNodoSi(exp,cuerpo,sino);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SI",29, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SINO ::= sino llavea CUERPO llavec 
            {
              Nodo RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Nodo cuerpo = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		RESULT = cuerpo;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SINO",30, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SINO ::= 
            {
              Nodo RESULT =null;
		RESULT = null;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SINO",30, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SELECCION ::= seleccion parentesisa LID parentesisc llavea LCASO DEFECTO llavec 
            {
              Nodo RESULT =null;
		int lidleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-5)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-5)).right;
		Nodo lid = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-5)).value;
		int lcasoleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int lcasoright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Nodo lcaso = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int defectoleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int defectoright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Nodo defecto = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		                    
                    if(defecto!=null){
                        lcaso.insertarHijo(defecto);
                    }
                    RESULT = Fabrica.crearNodoSentCaso(lid,lcaso);
                
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SELECCION",32, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LCASO ::= LCASO CASO 
            {
              Nodo RESULT =null;
		int lcasosleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int lcasosright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Nodo lcasos = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		int casoleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo caso = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = Fabrica.insertarCaso(lcasos,caso);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LCASO",33, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LCASO ::= CASO 
            {
              Nodo RESULT =null;
		int casoleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo caso = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = Fabrica.crearNodoLCasos(caso);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LCASO",33, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CASO ::= caso EXP dospuntos CUERPO 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo cuerpo = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = Fabrica.crearNodoCaso(exp,cuerpo);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("CASO",34, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DEFECTO ::= defecto dospuntos CUERPO 
            {
              Nodo RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo cuerpo = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = new Nodo(Constante.defecto); RESULT.insertarHijo(cuerpo);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("DEFECTO",35, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DEFECTO ::= 
            {
              Nodo RESULT =null;
		RESULT = null;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("DEFECTO",35, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PARA ::= para parentesisa VARPARA dospuntos EXP dospuntos POSTERIOR parentesisc llavea CUERPO llavec 
            {
              Nodo RESULT =null;
		int varparaleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-8)).left;
		int varpararight = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-8)).right;
		Nodo varpara = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-6)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-6)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)).right;
		Nodo pos = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Nodo cuerpo = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		                
                RESULT = Fabrica.crearNodoPara(varpara,exp,pos,cuerpo);
                
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("PARA",37, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-10)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // VARPARA ::= var TVAR id igual EXP 
            {
              Nodo RESULT =null;
		int tvarleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).left;
		int tvarright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).right;
		String tvar = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = Fabrica.crearNodoDeclaracion(tvar,id,-1,exp);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("VARPARA",38, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // VARPARA ::= LID igual EXP 
            {
              Nodo RESULT =null;
		int lidleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Nodo lid = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = Fabrica.crearNodoAsignacion(lid,exp,null);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("VARPARA",38, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // POSTERIOR ::= LID OPPARA 
            {
              Nodo RESULT =null;
		int lidleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Nodo lid = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		
                                Nodo op2=Fabrica.crearNodoHoja(Constante.num,"1",Constante.tnum+"");
                                Nodo exp = Fabrica.crearNodoOperacion(op,lid,op2);
                                RESULT = Fabrica.crearNodoAsignacion(lid,exp,null);
                            
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("POSTERIOR",22, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // POSTERIOR ::= ASIGNACION 
            {
              Nodo RESULT =null;
		int asignacionleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int asignacionright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo asignacion = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = asignacion;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("POSTERIOR",22, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPPARA ::= masmas 
            {
              String RESULT =null;
		RESULT = Constante.suma;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("OPPARA",50, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPPARA ::= menosmenos 
            {
              String RESULT =null;
		RESULT = Constante.resta;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("OPPARA",50, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // MIENTRAS ::= mientras parentesisa EXP parentesisc llavea CUERPO llavec 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Nodo cuerpo = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		RESULT = Fabrica.crearNodoMientras(Constante.mientras,exp,cuerpo);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("MIENTRAS",39, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // HACERMIENTRAS ::= hacer llavea CUERPO llavec mientras parentesisa EXP parentesisc 
            {
              Nodo RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-5)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-5)).right;
		Nodo cuerpo = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		RESULT = Fabrica.crearNodoMientras(Constante.hacermientras,exp,cuerpo);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("HACERMIENTRAS",40, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP ::= EXP o EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.o,op1,op2);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP ::= EXP y EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.y,op1,op2);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP ::= EXP xor EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.xor,op1,op2);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP ::= not EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.not,op1);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP ::= EXP2 
            {
              Nodo RESULT =null;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo exp2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = exp2;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP2 ::= EXP3 OPREL EXP3 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int oprelleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int oprelright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		String oprel = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(oprel,op1,op2);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP2",46, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP2 ::= EXP3 
            {
              Nodo RESULT =null;
		int exp3left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo exp3 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = exp3;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP2",46, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP3 ::= EXP3 suma EXP3 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.suma,op1,op2);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP3",47, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP3 ::= EXP3 resta EXP3 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.resta,op1,op2);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP3",47, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP3 ::= EXP3 mult EXP3 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.mult,op1,op2);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP3",47, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP3 ::= EXP3 div EXP3 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.div,op1,op2);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP3",47, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXP3 ::= EXP3 potencia EXP3 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.pot,op1,op2);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP3",47, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXP3 ::= resta EXP3 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.resta,op1);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP3",47, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXP3 ::= parentesisa EXP parentesisc 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		RESULT=exp;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP3",47, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXP3 ::= LLAMADO 
            {
              Nodo RESULT =null;
		int llamadoleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int llamadoright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo llamado = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = llamado;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP3",47, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXP3 ::= num 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(Constante.num,num,Constante.tnum+"");
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP3",47, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXP3 ::= cadena 
            {
              Nodo RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(Constante.cadena,cadena,Constante.tcadena+"");
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP3",47, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXP3 ::= caracter 
            {
              Nodo RESULT =null;
		int caracterleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int caracterright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		String caracter = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(Constante.caracter,caracter,Constante.tcaracter+"");
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP3",47, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXP3 ::= LID 
            {
              Nodo RESULT =null;
		int lidleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo lid = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = lid;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP3",47, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXP3 ::= LID ARR 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP3",47, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXP3 ::= decimal 
            {
              Nodo RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(Constante.decimal,dec,Constante.tdecimal+"");
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP3",47, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXP3 ::= verdadero 
            {
              Nodo RESULT =null;
		int verdaderoleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int verdaderoright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		String verdadero = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(Constante.bool,Constante.verdadero,Constante.tbool+"");
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP3",47, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXP3 ::= falso 
            {
              Nodo RESULT =null;
		int falsoleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int falsoright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		String falso = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(Constante.bool,Constante.falso,Constante.tbool+"");
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP3",47, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OPREL ::= mayor 
            {
              String RESULT =null;
		RESULT = Constante.mayor;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("OPREL",49, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OPREL ::= menor 
            {
              String RESULT =null;
		RESULT = Constante.menor;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("OPREL",49, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OPREL ::= mayorigual 
            {
              String RESULT =null;
		RESULT = Constante.mayorigual;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("OPREL",49, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OPREL ::= menorigual 
            {
              String RESULT =null;
		RESULT = Constante.menorigual;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("OPREL",49, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OPREL ::= igualacion 
            {
              String RESULT =null;
		RESULT = Constante.igualacion;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("OPREL",49, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OPREL ::= distinto 
            {
              String RESULT =null;
		RESULT = Constante.distinto;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("OPREL",49, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CUERPO ::= CUERPO SENTENCIA 
            {
              Nodo RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Nodo cuerpo = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = Fabrica.insertarSentencia(cuerpo,sent);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("CUERPO",31, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CUERPO ::= SENTENCIA 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT=Fabrica.crearNodoCuerpo(sent);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("CUERPO",31, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SENTENCIA ::= ASIGNACION pregc 
            {
              Nodo RESULT =null;
		int asignacionleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int asignacionright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Nodo asignacion = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		RESULT = asignacion;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SENTENCIA ::= DECLARACION pregc 
            {
              Nodo RESULT =null;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Nodo declaracion = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		RESULT = declaracion;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SENTENCIA ::= RETORNAR pregc 
            {
              Nodo RESULT =null;
		int retornarleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int retornarright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Nodo retornar = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		RESULT = retornar;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SENTENCIA ::= LLAMADO pregc 
            {
              Nodo RESULT =null;
		int llamadoleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int llamadoright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Nodo llamado = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		RESULT = llamado;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SENTENCIA ::= SI 
            {
              Nodo RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo si = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = si;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SENTENCIA ::= SELECCION 
            {
              Nodo RESULT =null;
		int seleccionleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int seleccionright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo seleccion = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = seleccion;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // SENTENCIA ::= PARA 
            {
              Nodo RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo para = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = para;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // SENTENCIA ::= MIENTRAS 
            {
              Nodo RESULT =null;
		int mientrasleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int mientrasright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo mientras = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = mientras;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // SENTENCIA ::= HACERMIENTRAS 
            {
              Nodo RESULT =null;
		int hacermientrasleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int hacermientrasright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo hacermientras = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = hacermientras;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // SENTENCIA ::= IMPRIMIR 
            {
              Nodo RESULT =null;
		int imprimirleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int imprimirright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo imprimir = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = imprimir;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // SENTENCIA ::= GRAPHIKAR 
            {
              Nodo RESULT =null;
		int graphikarleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int graphikarright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo graphikar = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = graphikar;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // SENTENCIA ::= continuar pregc 
            {
              Nodo RESULT =null;
		RESULT = new Nodo(Constante.continuar);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // SENTENCIA ::= terminar pregc 
            {
              Nodo RESULT =null;
		RESULT = new Nodo(Constante.terminar);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // SENTENCIA ::= LID OPPARA pregc 
            {
              Nodo RESULT =null;
		int lidleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Nodo lid = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		
                                Nodo op2=Fabrica.crearNodoHoja(Constante.num,"1",Constante.tnum+"");
                                Nodo exp = Fabrica.crearNodoOperacion(op,lid,op2);
                                RESULT = Fabrica.crearNodoAsignacion(lid,exp,null);
                            
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // IMPRIMIR ::= imprimir parentesisa EXP parentesisc pregc 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		RESULT = new Nodo(Constante.imprimir); RESULT.insertarHijo(exp);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",44, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // GRAPHIKAR ::= graphikar parentesisa LID coma LID parentesisc pregc 
            {
              Nodo RESULT =null;
		int lid1left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)).left;
		int lid1right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)).right;
		Nodo lid1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)).value;
		int lid2left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int lid2right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Nodo lid2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		
                                RESULT = new Nodo(Constante.graphikar);
                                RESULT.insertarHijo(lid1);
                                RESULT.insertarHijo(lid2);
                            
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("GRAPHIKAR",36, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoG$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoG$do_action(
    int                        CUP$SintacticoG$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoG$parser,
    java.util.Stack            CUP$SintacticoG$stack,
    int                        CUP$SintacticoG$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoG$do_action_part00000000(
                               CUP$SintacticoG$act_num,
                               CUP$SintacticoG$parser,
                               CUP$SintacticoG$stack,
                               CUP$SintacticoG$top);
    }
}

}
