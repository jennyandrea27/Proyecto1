/* The following code was generated by JFlex 1.6.1 */

package Analisis.Graphik;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/Analisis/Graphik/LexicoG.jflex</tt>
 */
public class LexicoG implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
    58, 58, 58, 58, 58, 58, 58, 58, 58, 11,  6,  8,  9,  7, 58, 58, 
    58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 
    11, 52, 12, 14, 58, 58, 54,  5, 48, 49, 46, 44, 57, 45,  2, 15, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 40, 58, 51, 41, 50, 39, 
    58, 17, 29, 23, 24, 19, 38, 32, 37, 26,  3, 34, 28, 27, 20, 22, 
    30,  3, 18, 36, 21, 31, 16,  3,  3,  3,  3, 55, 13, 56, 47,  4, 
    58, 17, 29, 23, 24, 19, 38, 32, 37, 26,  3, 34, 28, 27, 20, 22, 
    30,  3, 18, 36, 21, 31, 16,  3,  3,  3,  3, 42, 53, 43, 58, 58, 
    58, 58, 58, 58, 58,  8, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 
    58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 
    58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 
    58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 
    58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 
    58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 
    58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 
    58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\4\2\5\2\4\1\6"+
    "\7\3\1\0\6\3\1\0\2\3\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\2\4\1\25\1\26\1\27\10\0"+
    "\1\30\3\0\12\3\2\0\2\3\1\0\7\3\1\0"+
    "\1\31\1\3\1\31\2\3\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\1\1\43\1\44"+
    "\1\45\3\0\1\30\1\5\2\0\1\46\1\3\2\47"+
    "\4\3\1\0\6\3\3\0\3\3\1\0\5\3\1\0"+
    "\3\3\2\0\4\3\7\0\1\5\1\0\5\3\2\50"+
    "\5\3\4\0\4\3\1\0\2\3\1\51\1\52\2\3"+
    "\1\0\3\3\1\0\1\53\1\3\1\53\2\3\4\0"+
    "\2\54\1\3\1\55\1\0\2\3\1\0\2\3\2\56"+
    "\1\3\1\57\4\0\4\3\1\0\4\3\1\0\1\3"+
    "\1\0\2\3\1\0\1\3\1\60\1\3\3\0\1\3"+
    "\1\0\2\3\1\0\5\3\1\0\1\61\2\0\1\3"+
    "\1\61\2\3\1\0\1\3\1\62\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\63\3\0\1\3\1\0\2\3\1\0\1\3\1\64"+
    "\1\65\2\3\3\0\3\3\1\0\2\3\1\0\1\3"+
    "\1\0\1\3\2\66\2\67\1\0\1\3\1\0\1\3"+
    "\1\70\1\71\1\0\1\3\2\72\1\73\1\0\3\3"+
    "\2\0\1\74\2\3\1\74\2\75\2\76\1\0\1\3"+
    "\2\77\1\0\1\3\1\0\1\3\1\100\1\101\2\102"+
    "\1\103\1\104\1\0\1\105\1\3\1\105\2\106\1\0"+
    "\1\3\2\107\2\110\1\0\1\3\1\0\1\3\1\0"+
    "\1\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0"+
    "\1\3\2\111";

  private static int [] zzUnpackAction() {
    int [] result = new int[363];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\354\0\u0162"+
    "\0\u019d\0\u01d8\0\354\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff"+
    "\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7"+
    "\0\u0512\0\u054d\0\u0588\0\u05c3\0\354\0\354\0\u05fe\0\354"+
    "\0\354\0\u0639\0\u0674\0\354\0\354\0\354\0\354\0\u06af"+
    "\0\u06ea\0\u0725\0\u0760\0\u079b\0\354\0\354\0\354\0\u07d6"+
    "\0\u0811\0\u084c\0\u0887\0\u08c2\0\u08fd\0\u0938\0\u019d\0\354"+
    "\0\u0973\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10"+
    "\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8"+
    "\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0"+
    "\0\u0efb\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\354"+
    "\0\354\0\354\0\354\0\354\0\354\0\354\0\354\0\354"+
    "\0\u07d6\0\354\0\354\0\354\0\u1098\0\u10d3\0\u110e\0\u019d"+
    "\0\u1149\0\u1184\0\u11bf\0\261\0\u11fa\0\354\0\261\0\u1235"+
    "\0\u1270\0\u12ab\0\u12e6\0\u1321\0\u135c\0\u1397\0\u13d2\0\u140d"+
    "\0\u1448\0\u1483\0\u14be\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u15e5"+
    "\0\u1620\0\u165b\0\u1696\0\u16d1\0\u170c\0\u1747\0\u1782\0\u17bd"+
    "\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u195a\0\u1995"+
    "\0\u19d0\0\u1a0b\0\u1a46\0\u1149\0\u1a81\0\u1abc\0\u1af7\0\u09ae"+
    "\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59\0\354\0\261"+
    "\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb\0\u1df6\0\u1e31"+
    "\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93\0\u1fce\0\u2009"+
    "\0\261\0\261\0\u2044\0\u207f\0\u20ba\0\u20f5\0\u2130\0\u216b"+
    "\0\u21a6\0\354\0\u21e1\0\261\0\u221c\0\u2257\0\u2292\0\u22cd"+
    "\0\u2308\0\u2343\0\354\0\261\0\u237e\0\261\0\u23b9\0\u23f4"+
    "\0\u242f\0\u246a\0\u24a5\0\u24e0\0\354\0\261\0\u251b\0\u2556"+
    "\0\u2591\0\u25cc\0\u2607\0\u2642\0\u267d\0\u26b8\0\u26f3\0\u272e"+
    "\0\u2769\0\u27a4\0\u27df\0\u281a\0\u2855\0\u2890\0\u28cb\0\u2906"+
    "\0\u2941\0\u297c\0\u29b7\0\u29f2\0\261\0\u2a2d\0\u2a68\0\u2aa3"+
    "\0\u2ade\0\u2b19\0\u2b54\0\u2b8f\0\u2bca\0\u2c05\0\u2c40\0\u2c7b"+
    "\0\u2cb6\0\u2cf1\0\u2d2c\0\u2d67\0\354\0\u2da2\0\u2ddd\0\u2e18"+
    "\0\261\0\u2e53\0\u2e8e\0\u2ec9\0\u2f04\0\u2f3f\0\u2f7a\0\u2fb5"+
    "\0\u2ff0\0\u302b\0\u3066\0\u30a1\0\u30dc\0\u3117\0\u3152\0\u318d"+
    "\0\u31c8\0\261\0\u3203\0\u323e\0\u3279\0\u32b4\0\u32ef\0\u332a"+
    "\0\u3365\0\u33a0\0\u33db\0\261\0\261\0\u3416\0\u3451\0\u348c"+
    "\0\u34c7\0\u3502\0\u353d\0\u3578\0\u35b3\0\u35ee\0\u3629\0\u3664"+
    "\0\u369f\0\u36da\0\u3715\0\u3750\0\354\0\261\0\354\0\261"+
    "\0\u378b\0\u37c6\0\u3801\0\u383c\0\354\0\354\0\u3877\0\u38b2"+
    "\0\354\0\261\0\261\0\u38ed\0\u3928\0\u3963\0\u399e\0\u39d9"+
    "\0\u3a14\0\354\0\u3a4f\0\u3a8a\0\261\0\354\0\261\0\354"+
    "\0\261\0\u3ac5\0\u3b00\0\354\0\261\0\u3b3b\0\u3b76\0\u3bb1"+
    "\0\u3bec\0\354\0\261\0\354\0\261\0\261\0\261\0\u3c27"+
    "\0\354\0\u3c62\0\261\0\354\0\261\0\u3c9d\0\u3cd8\0\354"+
    "\0\261\0\354\0\261\0\u3d13\0\u3d4e\0\u3d89\0\u3dc4\0\u3dff"+
    "\0\u3e3a\0\u3e75\0\u3eb0\0\u3eeb\0\u3f26\0\u3f61\0\u3f9c\0\u3fd7"+
    "\0\u4012\0\354\0\261";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[363];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\5\1\7\1\0\1\7\1\11\1\5\1\12\1\13"+
    "\1\14\1\15\1\16\1\4\1\17\1\20\1\4\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\4"+
    "\1\31\1\0\1\4\1\32\1\33\1\34\1\4\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\5\1\0\1\2\1\60\130\0\1\61"+
    "\4\0\1\62\26\0\1\4\1\0\2\4\13\0\11\4"+
    "\1\0\7\4\1\0\1\4\1\0\3\4\117\0\6\63"+
    "\5\0\10\63\1\64\3\63\1\65\1\66\42\63\6\0"+
    "\1\7\64\0\14\67\1\70\1\71\55\67\6\72\1\7"+
    "\10\72\1\73\53\72\1\0\1\4\1\0\2\4\13\0"+
    "\1\4\1\74\7\4\1\0\7\4\1\0\1\4\1\0"+
    "\3\4\25\0\1\4\1\0\2\4\13\0\11\4\1\0"+
    "\2\4\1\75\4\4\1\0\1\4\1\0\3\4\25\0"+
    "\1\4\1\0\2\4\13\0\3\4\1\76\5\4\1\0"+
    "\7\4\1\0\1\4\1\0\3\4\25\0\1\4\1\0"+
    "\2\4\13\0\11\4\1\0\5\4\1\77\1\4\1\0"+
    "\1\4\1\0\3\4\25\0\1\4\1\0\2\4\13\0"+
    "\3\4\1\100\5\4\1\0\7\4\1\0\1\4\1\0"+
    "\3\4\25\0\1\4\1\0\2\4\13\0\1\4\1\101"+
    "\4\4\1\102\2\4\1\0\7\4\1\0\1\4\1\0"+
    "\3\4\25\0\1\4\1\0\2\4\13\0\1\4\1\103"+
    "\1\4\1\104\2\4\1\105\2\4\1\0\7\4\1\0"+
    "\1\4\1\0\3\4\50\0\1\106\6\0\1\107\40\0"+
    "\1\4\1\0\2\4\13\0\4\4\1\110\4\4\1\0"+
    "\1\4\1\111\5\4\1\0\1\4\1\0\3\4\25\0"+
    "\1\4\1\0\2\4\13\0\11\4\1\112\1\113\6\4"+
    "\1\0\1\4\1\0\3\4\25\0\1\4\1\0\2\4"+
    "\13\0\11\4\1\0\2\4\1\114\4\4\1\0\1\4"+
    "\1\0\3\4\25\0\1\4\1\0\2\4\13\0\6\4"+
    "\1\115\2\4\1\0\7\4\1\0\1\4\1\0\3\4"+
    "\25\0\1\4\1\0\2\4\13\0\1\4\1\116\1\117"+
    "\6\4\1\0\5\4\1\120\1\4\1\0\1\4\1\0"+
    "\3\4\25\0\1\4\1\0\2\4\13\0\2\4\1\121"+
    "\6\4\1\0\7\4\1\0\1\4\1\0\3\4\47\0"+
    "\1\122\5\0\2\123\41\0\1\4\1\0\2\4\13\0"+
    "\3\4\1\124\5\4\1\123\1\125\6\4\1\0\1\4"+
    "\1\0\3\4\25\0\1\4\1\0\2\4\13\0\1\4"+
    "\1\126\1\4\1\127\5\4\1\0\7\4\1\0\1\4"+
    "\1\0\3\4\75\0\1\130\75\0\1\131\73\0\1\132"+
    "\66\0\1\133\72\0\1\134\72\0\1\135\106\0\1\136"+
    "\72\0\1\137\1\140\5\0\1\141\132\0\2\142\71\0"+
    "\2\143\35\0\1\144\72\0\1\144\16\0\1\145\53\0"+
    "\1\144\13\0\1\146\56\0\1\144\15\0\1\147\47\0"+
    "\14\67\1\150\1\71\55\67\6\72\1\7\64\72\6\73"+
    "\1\151\6\73\1\152\1\72\1\153\53\73\1\0\1\4"+
    "\1\0\2\4\13\0\2\4\1\154\4\4\1\155\1\4"+
    "\1\0\7\4\1\0\1\4\1\0\3\4\25\0\1\4"+
    "\1\0\2\4\13\0\11\4\1\0\7\4\1\0\1\4"+
    "\1\156\1\157\2\4\25\0\1\4\1\0\2\4\13\0"+
    "\5\4\1\160\3\4\1\0\7\4\1\0\1\4\1\0"+
    "\3\4\25\0\1\4\1\0\2\4\13\0\3\4\1\161"+
    "\5\4\1\0\7\4\1\0\1\4\1\0\3\4\25\0"+
    "\1\4\1\0\2\4\13\0\2\4\1\162\6\4\1\0"+
    "\7\4\1\0\1\4\1\0\3\4\25\0\1\4\1\0"+
    "\2\4\13\0\2\4\1\163\6\4\1\0\7\4\1\0"+
    "\1\4\1\164\1\165\2\4\25\0\1\4\1\0\2\4"+
    "\13\0\4\4\1\166\4\4\1\0\2\4\1\167\4\4"+
    "\1\0\1\4\1\0\3\4\25\0\1\4\1\0\2\4"+
    "\13\0\5\4\1\170\3\4\1\0\7\4\1\0\1\4"+
    "\1\0\3\4\25\0\1\4\1\0\2\4\13\0\11\4"+
    "\1\0\7\4\1\0\1\4\1\0\2\4\1\171\25\0"+
    "\1\4\1\0\2\4\13\0\4\4\1\172\4\4\1\0"+
    "\7\4\1\0\1\4\1\0\3\4\53\0\1\173\1\0"+
    "\2\174\76\0\1\175\35\0\1\4\1\0\2\4\13\0"+
    "\7\4\1\176\1\4\1\174\1\177\6\4\1\0\1\4"+
    "\1\0\3\4\25\0\1\4\1\0\2\4\13\0\11\4"+
    "\1\0\4\4\1\200\2\4\1\0\1\4\1\0\3\4"+
    "\47\0\1\201\50\0\1\4\1\0\2\4\13\0\3\4"+
    "\1\202\5\4\1\0\7\4\1\0\1\4\1\0\3\4"+
    "\25\0\1\4\1\0\2\4\13\0\1\4\1\203\7\4"+
    "\1\0\7\4\1\0\1\4\1\0\3\4\25\0\1\4"+
    "\1\0\2\4\13\0\6\4\1\204\2\4\1\0\7\4"+
    "\1\0\1\4\1\0\3\4\25\0\1\4\1\0\2\4"+
    "\13\0\2\4\1\205\6\4\1\0\7\4\1\0\1\4"+
    "\1\0\3\4\25\0\1\4\1\0\2\4\13\0\6\4"+
    "\1\206\2\4\1\207\1\210\6\4\1\0\1\4\1\0"+
    "\3\4\25\0\1\4\1\0\2\4\13\0\11\4\1\0"+
    "\3\4\1\211\3\4\1\0\1\4\1\0\3\4\25\0"+
    "\1\4\1\0\2\4\13\0\1\4\1\212\7\4\1\0"+
    "\7\4\1\0\1\4\1\0\3\4\60\0\1\213\62\0"+
    "\1\214\47\0\1\4\1\0\2\4\13\0\11\4\1\0"+
    "\2\4\1\215\4\4\1\0\1\4\1\0\3\4\25\0"+
    "\1\4\1\0\2\4\13\0\4\4\1\216\4\4\1\0"+
    "\7\4\1\0\1\4\1\0\3\4\25\0\1\4\1\0"+
    "\2\4\13\0\7\4\1\217\1\4\1\0\7\4\1\0"+
    "\1\4\1\0\3\4\25\0\1\4\1\0\2\4\13\0"+
    "\2\4\1\220\6\4\1\0\7\4\1\0\1\4\1\0"+
    "\3\4\51\0\1\221\75\0\1\222\71\0\1\223\43\0"+
    "\15\224\1\225\1\0\1\226\53\224\6\73\1\151\6\73"+
    "\1\152\1\73\1\227\53\73\6\72\1\7\7\72\1\230"+
    "\54\72\1\0\1\4\1\0\2\4\13\0\11\4\1\231"+
    "\1\232\6\4\1\0\1\4\1\0\3\4\25\0\1\4"+
    "\1\0\2\4\13\0\6\4\1\233\2\4\1\0\7\4"+
    "\1\0\1\4\1\0\3\4\25\0\1\4\1\0\2\4"+
    "\13\0\1\234\10\4\1\0\7\4\1\0\1\4\1\0"+
    "\3\4\25\0\1\4\1\0\2\4\13\0\11\4\1\0"+
    "\1\4\1\235\5\4\1\0\1\4\1\0\3\4\25\0"+
    "\1\4\1\0\2\4\13\0\1\4\1\236\7\4\1\0"+
    "\7\4\1\0\1\4\1\0\3\4\52\0\1\237\45\0"+
    "\1\4\1\0\2\4\13\0\6\4\1\240\2\4\1\0"+
    "\7\4\1\0\1\4\1\0\3\4\25\0\1\4\1\0"+
    "\2\4\13\0\5\4\1\241\3\4\1\0\7\4\1\0"+
    "\1\4\1\0\3\4\25\0\1\4\1\0\2\4\13\0"+
    "\11\4\1\0\5\4\1\242\1\4\1\0\1\4\1\0"+
    "\3\4\25\0\1\4\1\0\2\4\13\0\6\4\1\243"+
    "\2\4\1\0\7\4\1\0\1\4\1\0\3\4\25\0"+
    "\1\4\1\0\2\4\13\0\3\4\1\244\5\4\1\0"+
    "\7\4\1\0\1\4\1\0\3\4\25\0\1\4\1\0"+
    "\2\4\13\0\10\4\1\245\1\0\7\4\1\0\1\4"+
    "\1\0\3\4\60\0\1\246\65\0\1\247\65\0\1\250"+
    "\3\0\1\251\45\0\1\4\1\0\2\4\13\0\11\4"+
    "\1\0\2\4\1\252\4\4\1\0\1\4\1\0\3\4"+
    "\25\0\1\4\1\0\2\4\13\0\7\4\1\253\1\4"+
    "\1\0\7\4\1\0\1\4\1\0\3\4\25\0\1\4"+
    "\1\0\2\4\13\0\2\4\1\254\3\4\1\255\2\4"+
    "\1\0\7\4\1\0\1\4\1\0\3\4\50\0\1\256"+
    "\47\0\1\4\1\0\2\4\13\0\4\4\1\257\4\4"+
    "\1\0\7\4\1\0\1\4\1\0\3\4\25\0\1\4"+
    "\1\0\2\4\13\0\11\4\1\0\1\4\1\260\5\4"+
    "\1\0\1\4\1\0\3\4\25\0\1\4\1\0\2\4"+
    "\13\0\11\4\1\0\2\4\1\261\4\4\1\0\1\4"+
    "\1\0\3\4\25\0\1\4\1\0\2\4\13\0\1\4"+
    "\1\262\7\4\1\0\7\4\1\0\1\4\1\0\3\4"+
    "\25\0\1\4\1\0\2\4\13\0\5\4\1\263\1\4"+
    "\1\264\1\4\1\0\7\4\1\0\1\4\1\0\3\4"+
    "\44\0\1\265\53\0\1\4\1\0\2\4\13\0\1\266"+
    "\10\4\1\0\7\4\1\0\1\4\1\0\3\4\25\0"+
    "\1\4\1\0\2\4\13\0\11\4\1\0\2\4\1\267"+
    "\4\4\1\0\1\4\1\0\3\4\25\0\1\4\1\0"+
    "\2\4\13\0\11\4\1\0\4\4\1\270\2\4\1\0"+
    "\1\4\1\0\3\4\47\0\1\271\75\0\1\272\45\0"+
    "\1\4\1\0\2\4\13\0\3\4\1\273\5\4\1\0"+
    "\7\4\1\0\1\4\1\0\3\4\25\0\1\4\1\0"+
    "\2\4\13\0\6\4\1\274\2\4\1\0\7\4\1\0"+
    "\1\4\1\0\3\4\25\0\1\4\1\0\2\4\13\0"+
    "\3\4\1\275\5\4\1\0\7\4\1\0\1\4\1\0"+
    "\3\4\25\0\1\4\1\0\2\4\13\0\3\4\1\276"+
    "\5\4\1\0\7\4\1\0\1\4\1\0\3\4\47\0"+
    "\1\277\72\0\1\300\100\0\2\301\40\0\15\224\1\225"+
    "\1\224\1\302\53\224\16\0\1\7\54\0\6\73\1\151"+
    "\6\73\1\152\1\230\1\153\53\73\26\0\1\303\45\0"+
    "\1\4\1\0\2\4\13\0\6\4\1\304\2\4\1\0"+
    "\7\4\1\0\1\4\1\0\3\4\25\0\1\4\1\0"+
    "\2\4\13\0\2\4\1\305\6\4\1\0\7\4\1\0"+
    "\1\4\1\0\3\4\25\0\1\4\1\0\2\4\13\0"+
    "\6\4\1\306\2\4\1\0\7\4\1\0\1\4\1\0"+
    "\3\4\25\0\1\4\1\0\2\4\13\0\11\4\1\307"+
    "\1\310\6\4\1\0\1\4\1\0\3\4\25\0\1\4"+
    "\1\0\2\4\13\0\7\4\1\311\1\4\1\0\7\4"+
    "\1\0\1\4\1\0\3\4\25\0\1\4\1\0\2\4"+
    "\13\0\11\4\1\312\1\313\6\4\1\0\1\4\1\0"+
    "\3\4\25\0\1\4\1\0\2\4\13\0\11\4\1\0"+
    "\1\4\1\314\5\4\1\0\1\4\1\0\3\4\25\0"+
    "\1\4\1\0\2\4\13\0\11\4\1\0\7\4\1\0"+
    "\1\4\1\315\1\316\2\4\25\0\1\4\1\0\2\4"+
    "\13\0\7\4\1\317\1\4\1\0\7\4\1\0\1\4"+
    "\1\0\3\4\25\0\1\4\1\0\2\4\13\0\3\4"+
    "\1\320\5\4\1\0\7\4\1\0\1\4\1\0\3\4"+
    "\63\0\1\321\64\0\2\322\71\0\2\323\62\0\1\324"+
    "\51\0\1\4\1\0\2\4\13\0\11\4\1\0\5\4"+
    "\1\325\1\4\1\0\1\4\1\0\3\4\25\0\1\4"+
    "\1\0\2\4\13\0\11\4\1\322\1\326\6\4\1\0"+
    "\1\4\1\0\3\4\25\0\1\4\1\0\2\4\13\0"+
    "\11\4\1\323\1\327\6\4\1\0\1\4\1\0\3\4"+
    "\25\0\1\4\1\0\2\4\13\0\2\4\1\330\6\4"+
    "\1\0\7\4\1\0\1\4\1\0\3\4\51\0\1\331"+
    "\46\0\1\4\1\0\2\4\13\0\5\4\1\332\3\4"+
    "\1\0\7\4\1\0\1\4\1\0\3\4\25\0\1\4"+
    "\1\0\2\4\13\0\1\4\1\333\7\4\1\0\7\4"+
    "\1\0\1\4\1\0\3\4\25\0\1\4\1\0\2\4"+
    "\13\0\3\4\1\334\5\4\1\0\7\4\1\0\1\4"+
    "\1\0\3\4\25\0\1\4\1\0\2\4\13\0\3\4"+
    "\1\335\5\4\1\0\7\4\1\0\1\4\1\0\3\4"+
    "\45\0\1\336\52\0\1\4\1\0\2\4\13\0\1\4"+
    "\1\337\7\4\1\0\7\4\1\0\1\4\1\0\3\4"+
    "\25\0\1\4\1\0\2\4\13\0\11\4\1\340\1\341"+
    "\6\4\1\0\1\4\1\0\3\4\25\0\1\4\1\0"+
    "\2\4\13\0\11\4\1\0\7\4\1\0\1\4\1\0"+
    "\1\4\1\342\1\4\53\0\1\343\44\0\1\4\1\0"+
    "\2\4\13\0\7\4\1\344\1\4\1\0\7\4\1\0"+
    "\1\4\1\0\3\4\25\0\1\4\1\0\2\4\13\0"+
    "\2\4\1\345\6\4\1\0\7\4\1\0\1\4\1\0"+
    "\3\4\25\0\1\4\1\0\2\4\13\0\10\4\1\346"+
    "\1\0\7\4\1\0\1\4\1\0\3\4\46\0\1\347"+
    "\74\0\1\350\101\0\1\351\37\0\15\224\1\225\1\7"+
    "\1\226\53\224\1\0\1\4\1\0\2\4\13\0\4\4"+
    "\1\352\4\4\1\0\7\4\1\0\1\4\1\0\3\4"+
    "\50\0\1\353\47\0\1\4\1\0\2\4\13\0\4\4"+
    "\1\354\4\4\1\0\7\4\1\0\1\4\1\0\3\4"+
    "\25\0\1\4\1\0\2\4\13\0\5\4\1\355\3\4"+
    "\1\0\7\4\1\0\1\4\1\0\3\4\50\0\1\356"+
    "\47\0\1\4\1\0\2\4\13\0\4\4\1\357\4\4"+
    "\1\0\7\4\1\0\1\4\1\0\3\4\25\0\1\4"+
    "\1\0\2\4\13\0\4\4\1\360\4\4\1\0\7\4"+
    "\1\0\1\4\1\0\3\4\25\0\1\4\1\0\2\4"+
    "\13\0\5\4\1\361\3\4\1\0\7\4\1\0\1\4"+
    "\1\0\3\4\25\0\1\4\1\0\2\4\13\0\5\4"+
    "\1\362\1\4\1\363\1\4\1\0\7\4\1\0\1\4"+
    "\1\0\3\4\55\0\2\364\66\0\1\365\77\0\1\366"+
    "\64\0\1\367\46\0\1\4\1\0\2\4\13\0\11\4"+
    "\1\364\1\370\6\4\1\0\1\4\1\0\3\4\25\0"+
    "\1\4\1\0\2\4\13\0\6\4\1\371\2\4\1\0"+
    "\7\4\1\0\1\4\1\0\3\4\25\0\1\4\1\0"+
    "\2\4\13\0\11\4\1\0\1\4\1\372\5\4\1\0"+
    "\1\4\1\0\3\4\25\0\1\4\1\0\2\4\13\0"+
    "\5\4\1\373\3\4\1\0\7\4\1\0\1\4\1\0"+
    "\3\4\46\0\1\374\51\0\1\4\1\0\2\4\13\0"+
    "\2\4\1\375\6\4\1\0\7\4\1\0\1\4\1\0"+
    "\3\4\25\0\1\4\1\0\2\4\13\0\2\4\1\376"+
    "\6\4\1\0\7\4\1\0\1\4\1\0\3\4\25\0"+
    "\1\4\1\0\2\4\13\0\11\4\1\0\6\4\1\377"+
    "\1\0\1\4\1\0\3\4\25\0\1\4\1\0\2\4"+
    "\13\0\11\4\1\0\7\4\1\0\1\4\1\u0100\1\u0101"+
    "\2\4\54\0\1\u0102\43\0\1\4\1\0\2\4\13\0"+
    "\10\4\1\u0103\1\0\7\4\1\0\1\4\1\0\3\4"+
    "\53\0\1\u0104\44\0\1\4\1\0\2\4\13\0\7\4"+
    "\1\u0105\1\4\1\0\7\4\1\0\1\4\1\0\3\4"+
    "\25\0\1\4\1\0\2\4\13\0\11\4\1\u0106\1\u0107"+
    "\6\4\1\0\1\4\1\0\3\4\53\0\1\u0108\44\0"+
    "\1\4\1\0\2\4\13\0\7\4\1\u0109\1\4\1\0"+
    "\7\4\1\0\1\4\1\0\3\4\25\0\1\4\1\0"+
    "\2\4\13\0\1\4\1\u010a\7\4\1\0\7\4\1\0"+
    "\1\4\1\0\3\4\52\0\1\u010b\65\0\1\u010c\72\0"+
    "\1\u010d\52\0\1\4\1\0\2\4\13\0\6\4\1\u010e"+
    "\2\4\1\0\7\4\1\0\1\4\1\0\3\4\45\0"+
    "\1\u010f\52\0\1\4\1\0\2\4\13\0\1\4\1\u0110"+
    "\7\4\1\0\7\4\1\0\1\4\1\0\3\4\25\0"+
    "\1\4\1\0\2\4\13\0\3\4\1\u0111\5\4\1\0"+
    "\7\4\1\0\1\4\1\0\3\4\63\0\1\u0112\34\0"+
    "\1\4\1\0\2\4\13\0\11\4\1\0\5\4\1\u0113"+
    "\1\4\1\0\1\4\1\0\3\4\25\0\1\4\1\0"+
    "\2\4\13\0\1\4\1\u0114\7\4\1\0\7\4\1\0"+
    "\1\4\1\0\3\4\25\0\1\4\1\0\2\4\13\0"+
    "\6\4\1\u0115\2\4\1\0\7\4\1\0\1\4\1\0"+
    "\3\4\25\0\1\4\1\0\2\4\13\0\6\4\1\u0116"+
    "\2\4\1\0\7\4\1\0\1\4\1\0\3\4\25\0"+
    "\1\4\1\0\2\4\13\0\1\4\1\u0117\7\4\1\0"+
    "\7\4\1\0\1\4\1\0\3\4\46\0\1\u0118\101\0"+
    "\2\u0119\61\0\1\u011a\52\0\1\4\1\0\2\4\13\0"+
    "\2\4\1\u011b\6\4\1\0\7\4\1\0\1\4\1\0"+
    "\3\4\25\0\1\4\1\0\2\4\13\0\11\4\1\u0119"+
    "\1\u011c\6\4\1\0\1\4\1\0\3\4\25\0\1\4"+
    "\1\0\2\4\13\0\1\4\1\u011d\7\4\1\0\7\4"+
    "\1\0\1\4\1\0\3\4\45\0\1\u011e\52\0\1\4"+
    "\1\0\2\4\13\0\1\4\1\u011f\7\4\1\0\7\4"+
    "\1\0\1\4\1\0\3\4\25\0\1\4\1\0\2\4"+
    "\13\0\11\4\1\0\7\4\1\0\1\4\1\0\1\4"+
    "\1\u0120\1\4\25\0\1\4\1\0\2\4\13\0\11\4"+
    "\1\u0121\1\u0122\6\4\1\0\1\4\1\0\3\4\45\0"+
    "\1\u0123\52\0\1\4\1\0\2\4\13\0\1\4\1\u0124"+
    "\7\4\1\0\7\4\1\0\1\4\1\0\3\4\52\0"+
    "\1\u0125\45\0\1\4\1\0\2\4\13\0\6\4\1\u0126"+
    "\2\4\1\0\7\4\1\0\1\4\1\0\3\4\52\0"+
    "\1\u0127\45\0\1\4\1\0\2\4\13\0\6\4\1\u0128"+
    "\2\4\1\0\7\4\1\0\1\4\1\0\3\4\65\0"+
    "\2\u0129\31\0\1\4\1\0\2\4\13\0\11\4\1\0"+
    "\7\4\1\u0129\1\u012a\1\0\3\4\55\0\2\u012b\41\0"+
    "\1\4\1\0\2\4\13\0\11\4\1\u012b\1\u012c\6\4"+
    "\1\0\1\4\1\0\3\4\31\0\1\u012d\72\0\1\u012e"+
    "\121\0\1\u012f\37\0\1\4\1\0\2\4\13\0\1\4"+
    "\1\u0130\7\4\1\0\7\4\1\0\1\4\1\0\3\4"+
    "\46\0\1\u0131\51\0\1\4\1\0\2\4\13\0\2\4"+
    "\1\u0132\6\4\1\0\7\4\1\0\1\4\1\0\3\4"+
    "\25\0\1\4\1\0\2\4\13\0\2\4\1\u0133\6\4"+
    "\1\0\7\4\1\0\1\4\1\0\3\4\45\0\1\u0134"+
    "\52\0\1\4\1\0\2\4\13\0\1\4\1\u0135\7\4"+
    "\1\0\7\4\1\0\1\4\1\0\3\4\25\0\1\4"+
    "\1\0\2\4\13\0\10\4\1\u0136\1\0\7\4\1\0"+
    "\1\4\1\0\3\4\25\0\1\4\1\0\2\4\13\0"+
    "\10\4\1\u0137\1\0\7\4\1\0\1\4\1\0\3\4"+
    "\30\0\1\u0138\110\0\1\u0139\72\0\1\u013a\51\0\1\4"+
    "\1\0\1\4\1\u013b\13\0\11\4\1\0\7\4\1\0"+
    "\1\4\1\0\3\4\25\0\1\4\1\0\2\4\13\0"+
    "\2\4\1\u013c\6\4\1\0\7\4\1\0\1\4\1\0"+
    "\3\4\25\0\1\4\1\0\2\4\13\0\2\4\1\u013d"+
    "\6\4\1\0\7\4\1\0\1\4\1\0\3\4\67\0"+
    "\2\u013e\27\0\1\4\1\0\2\4\13\0\11\4\1\0"+
    "\7\4\1\0\1\4\1\u013e\1\u013f\2\4\25\0\1\4"+
    "\1\0\2\4\13\0\11\4\1\0\7\4\1\u0140\1\u0141"+
    "\1\0\3\4\54\0\1\u0142\43\0\1\4\1\0\2\4"+
    "\13\0\10\4\1\u0143\1\0\7\4\1\0\1\4\1\0"+
    "\3\4\46\0\1\u0144\51\0\1\4\1\0\2\4\13\0"+
    "\2\4\1\u0145\6\4\1\0\7\4\1\0\1\4\1\0"+
    "\3\4\45\0\1\u0146\52\0\1\4\1\0\2\4\13\0"+
    "\1\4\1\u0147\7\4\1\0\7\4\1\0\1\4\1\0"+
    "\3\4\52\0\1\u0148\45\0\1\4\1\0\2\4\13\0"+
    "\6\4\1\u0149\2\4\1\0\7\4\1\0\1\4\1\0"+
    "\3\4\31\0\1\u014a\66\0\1\4\1\0\2\4\13\0"+
    "\2\4\1\u014b\6\4\1\0\7\4\1\0\1\4\1\0"+
    "\3\4\46\0\1\u014c\51\0\1\4\1\0\2\4\13\0"+
    "\2\4\1\u014d\6\4\1\0\7\4\1\0\1\4\1\0"+
    "\3\4\25\0\1\4\1\0\2\4\13\0\6\4\1\u014e"+
    "\2\4\1\0\7\4\1\0\1\4\1\0\3\4\25\0"+
    "\1\4\1\0\2\4\13\0\1\4\1\u014f\7\4\1\0"+
    "\7\4\1\0\1\4\1\0\3\4\71\0\1\u0150\66\0"+
    "\2\u0151\31\0\1\4\1\0\2\4\13\0\11\4\1\0"+
    "\7\4\1\0\1\4\1\0\1\4\1\u0152\1\4\25\0"+
    "\1\4\1\0\2\4\13\0\11\4\1\0\7\4\1\u0151"+
    "\1\u0153\1\0\3\4\52\0\1\u0154\45\0\1\4\1\0"+
    "\2\4\13\0\6\4\1\u0155\2\4\1\0\7\4\1\0"+
    "\1\4\1\0\3\4\46\0\1\u0156\51\0\1\4\1\0"+
    "\2\4\13\0\2\4\1\u0157\6\4\1\0\7\4\1\0"+
    "\1\4\1\0\3\4\50\0\1\u0158\47\0\1\4\1\0"+
    "\2\4\13\0\4\4\1\u0159\4\4\1\0\7\4\1\0"+
    "\1\4\1\0\3\4\65\0\2\u015a\31\0\1\4\1\0"+
    "\2\4\13\0\11\4\1\0\7\4\1\u015a\1\u015b\1\0"+
    "\3\4\30\0\1\u015c\67\0\1\4\1\0\1\4\1\u015d"+
    "\13\0\11\4\1\0\7\4\1\0\1\4\1\0\3\4"+
    "\72\0\1\u015e\25\0\1\4\1\0\2\4\13\0\11\4"+
    "\1\0\7\4\1\0\1\4\1\0\2\4\1\u015f\63\0"+
    "\1\u0160\34\0\1\4\1\0\2\4\13\0\11\4\1\0"+
    "\5\4\1\u0161\1\4\1\0\1\4\1\0\3\4\50\0"+
    "\1\u0162\47\0\1\4\1\0\2\4\13\0\4\4\1\u0163"+
    "\4\4\1\0\7\4\1\0\1\4\1\0\3\4\53\0"+
    "\1\u0164\44\0\1\4\1\0\2\4\13\0\7\4\1\u0165"+
    "\1\4\1\0\7\4\1\0\1\4\1\0\3\4\55\0"+
    "\2\u0166\41\0\1\4\1\0\2\4\13\0\11\4\1\u0166"+
    "\1\u0167\6\4\1\0\1\4\1\0\3\4\52\0\1\u0168"+
    "\45\0\1\4\1\0\2\4\13\0\6\4\1\u0169\2\4"+
    "\1\0\7\4\1\0\1\4\1\0\3\4\50\0\1\u016a"+
    "\47\0\1\4\1\0\2\4\13\0\4\4\1\u016b\4\4"+
    "\1\0\7\4\1\0\1\4\1\0\3\4\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16461];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\1\1\11\1\1\1\11\3\1\1\11\7\1"+
    "\1\0\6\1\1\0\2\1\2\11\1\1\2\11\2\1"+
    "\4\11\5\1\3\11\10\0\1\11\3\0\12\1\2\0"+
    "\2\1\1\0\7\1\1\0\5\1\11\11\1\1\3\11"+
    "\3\0\2\1\2\0\2\1\1\11\5\1\1\0\6\1"+
    "\3\0\3\1\1\0\5\1\1\0\3\1\2\0\4\1"+
    "\7\0\1\1\1\0\5\1\1\11\6\1\4\0\4\1"+
    "\1\0\6\1\1\0\3\1\1\0\1\11\4\1\4\0"+
    "\1\11\3\1\1\0\2\1\1\0\2\1\1\11\3\1"+
    "\4\0\4\1\1\0\4\1\1\0\1\1\1\0\2\1"+
    "\1\0\3\1\3\0\1\1\1\0\2\1\1\0\5\1"+
    "\1\0\1\11\2\0\4\1\1\0\3\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\2\1"+
    "\3\0\1\1\1\0\2\1\1\0\5\1\3\0\3\1"+
    "\1\0\2\1\1\0\1\1\1\0\1\1\1\11\1\1"+
    "\1\11\1\1\1\0\1\1\1\0\1\1\2\11\1\0"+
    "\1\1\1\11\2\1\1\0\3\1\2\0\1\11\3\1"+
    "\1\11\1\1\1\11\1\1\1\0\1\1\1\11\1\1"+
    "\1\0\1\1\1\0\1\1\1\11\1\1\1\11\3\1"+
    "\1\0\1\11\2\1\1\11\1\1\1\0\1\1\1\11"+
    "\1\1\1\11\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[363];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
StringBuffer string=new StringBuffer();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicoG(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(TSGraphik.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new Symbol (TSGraphik.decimal, yycolumn, yyline, yytext());
            }
          case 74: break;
          case 2: 
            { return new Symbol (TSGraphik.punto, yycolumn, yyline, yytext());
            }
          case 75: break;
          case 3: 
            { return new Symbol (TSGraphik.id, yycolumn, yyline, yytext());
            }
          case 76: break;
          case 4: 
            { /*errores lexicos*/
            }
          case 77: break;
          case 5: 
            { /*se ignora*/
            }
          case 78: break;
          case 6: 
            { return new Symbol (TSGraphik.div, yycolumn, yyline, yytext());
            }
          case 79: break;
          case 7: 
            { return new Symbol (TSGraphik.pregc, yycolumn, yyline, yytext());
            }
          case 80: break;
          case 8: 
            { return new Symbol (TSGraphik.dospuntos, yycolumn, yyline, yytext());
            }
          case 81: break;
          case 9: 
            { return new Symbol (TSGraphik.igual, yycolumn, yyline, yytext());
            }
          case 82: break;
          case 10: 
            { return new Symbol (TSGraphik.llavea, yycolumn, yyline, yytext());
            }
          case 83: break;
          case 11: 
            { return new Symbol (TSGraphik.llavec, yycolumn, yyline, yytext());
            }
          case 84: break;
          case 12: 
            { return new Symbol (TSGraphik.suma, yycolumn, yyline, yytext());
            }
          case 85: break;
          case 13: 
            { return new Symbol (TSGraphik.resta, yycolumn, yyline, yytext());
            }
          case 86: break;
          case 14: 
            { return new Symbol (TSGraphik.mult, yycolumn, yyline, yytext());
            }
          case 87: break;
          case 15: 
            { return new Symbol (TSGraphik.potencia, yycolumn, yyline, yytext());
            }
          case 88: break;
          case 16: 
            { return new Symbol (TSGraphik.parentesisa, yycolumn, yyline, yytext());
            }
          case 89: break;
          case 17: 
            { return new Symbol (TSGraphik.parentesisc, yycolumn, yyline, yytext());
            }
          case 90: break;
          case 18: 
            { return new Symbol (TSGraphik.mayor, yycolumn, yyline, yytext());
            }
          case 91: break;
          case 19: 
            { return new Symbol (TSGraphik.menor, yycolumn, yyline, yytext());
            }
          case 92: break;
          case 20: 
            { return new Symbol (TSGraphik.not, yycolumn, yyline, yytext());
            }
          case 93: break;
          case 21: 
            { return new Symbol (TSGraphik.corchetea, yycolumn, yyline, yytext());
            }
          case 94: break;
          case 22: 
            { return new Symbol (TSGraphik.corchetec, yycolumn, yyline, yytext());
            }
          case 95: break;
          case 23: 
            { return new Symbol (TSGraphik.coma, yycolumn, yyline, yytext());
            }
          case 96: break;
          case 24: 
            { return new Symbol(TSGraphik.cadena, yycolumn, yyline, yytext().replace("\"", ""));
            }
          case 97: break;
          case 25: 
            { return new Symbol (TSGraphik.si, yycolumn, yyline, yytext());
            }
          case 98: break;
          case 26: 
            { return new Symbol (TSGraphik.igualacion, yycolumn, yyline, yytext());
            }
          case 99: break;
          case 27: 
            { return new Symbol (TSGraphik.masmas, yycolumn, yyline, yytext());
            }
          case 100: break;
          case 28: 
            { return new Symbol (TSGraphik.menosmenos, yycolumn, yyline, yytext());
            }
          case 101: break;
          case 29: 
            { return new Symbol (TSGraphik.mayorigual, yycolumn, yyline, yytext());
            }
          case 102: break;
          case 30: 
            { return new Symbol (TSGraphik.menorigual, yycolumn, yyline, yytext());
            }
          case 103: break;
          case 31: 
            { return new Symbol (TSGraphik.distinto, yycolumn, yyline, yytext());
            }
          case 104: break;
          case 32: 
            { return new Symbol (TSGraphik.o, yycolumn, yyline, yytext());
            }
          case 105: break;
          case 33: 
            { return new Symbol (TSGraphik.xor, yycolumn, yyline, yytext());
            }
          case 106: break;
          case 34: 
            { return new Symbol (TSGraphik.y, yycolumn, yyline, yytext());
            }
          case 107: break;
          case 35: 
            { return new Symbol (TSGraphik.gk, yycolumn, yyline, yytext());
            }
          case 108: break;
          case 36: 
            { return new Symbol (TSGraphik.hk, yycolumn, yyline, yytext());
            }
          case 109: break;
          case 37: 
            { return new Symbol (TSGraphik.caracter, yycolumn, yyline, yytext());
            }
          case 110: break;
          case 38: 
            { return new Symbol (TSGraphik.var, yycolumn, yyline, yytext());
            }
          case 111: break;
          case 39: 
            { return new Symbol (TSGraphik.als, yycolumn, yyline, yytext());
            }
          case 112: break;
          case 40: 
            { return new Symbol (TSGraphik.caso, yycolumn, yyline, yytext());
            }
          case 113: break;
          case 41: 
            { return new Symbol (TSGraphik.tbool, yycolumn, yyline, yytext());
            }
          case 114: break;
          case 42: 
            { return new Symbol (TSGraphik.para, yycolumn, yyline, yytext());
            }
          case 115: break;
          case 43: 
            { return new Symbol (TSGraphik.sino, yycolumn, yyline, yytext());
            }
          case 116: break;
          case 44: 
            { return new Symbol (TSGraphik.tvacio, yycolumn, yyline, yytext());
            }
          case 117: break;
          case 45: 
            { return new Symbol (TSGraphik.nuevo, yycolumn, yyline, yytext());
            }
          case 118: break;
          case 46: 
            { return new Symbol (TSGraphik.datos, yycolumn, yyline, yytext());
            }
          case 119: break;
          case 47: 
            { return new Symbol (TSGraphik.donde, yycolumn, yyline, yytext());
            }
          case 120: break;
          case 48: 
            { return new Symbol (TSGraphik.hacer, yycolumn, yyline, yytext());
            }
          case 121: break;
          case 49: 
            { return new Symbol (TSGraphik.inicio, yycolumn, yyline, yytext());
            }
          case 122: break;
          case 50: 
            { return new Symbol (TSGraphik.llamar, yycolumn, yyline, yytext());
            }
          case 123: break;
          case 51: 
            { return new Symbol (TSGraphik.hereda, yycolumn, yyline, yytext());
            }
          case 124: break;
          case 52: 
            { return new Symbol (TSGraphik.columna, yycolumn, yyline, yytext());
            }
          case 125: break;
          case 53: 
            { return new Symbol (TSGraphik.defecto, yycolumn, yyline, yytext());
            }
          case 126: break;
          case 54: 
            { return new Symbol (TSGraphik.privado, yycolumn, yyline, yytext());
            }
          case 127: break;
          case 55: 
            { return new Symbol (TSGraphik.publico, yycolumn, yyline, yytext());
            }
          case 128: break;
          case 56: 
            { return new Symbol (TSGraphik.tentero, yycolumn, yyline, yytext());
            }
          case 129: break;
          case 57: 
            { return new Symbol (TSGraphik.tcadena, yycolumn, yyline, yytext());
            }
          case 130: break;
          case 58: 
            { return new Symbol (TSGraphik.terminar, yycolumn, yyline, yytext());
            }
          case 131: break;
          case 59: 
            { return new Symbol (TSGraphik.tcaracter, yycolumn, yyline, yytext());
            }
          case 132: break;
          case 60: 
            { return new Symbol (TSGraphik.importar, yycolumn, yyline, yytext());
            }
          case 133: break;
          case 61: 
            { return new Symbol (TSGraphik.mientras, yycolumn, yyline, yytext());
            }
          case 134: break;
          case 62: 
            { return new Symbol (TSGraphik.llamarhk, yycolumn, yyline, yytext());
            }
          case 135: break;
          case 63: 
            { return new Symbol (TSGraphik.procesar, yycolumn, yyline, yytext());
            }
          case 136: break;
          case 64: 
            { return new Symbol (TSGraphik.tdecimal, yycolumn, yyline, yytext());
            }
          case 137: break;
          case 65: 
            { return new Symbol (TSGraphik.retornar, yycolumn, yyline, yytext());
            }
          case 138: break;
          case 66: 
            { return new Symbol (TSGraphik.continuar, yycolumn, yyline, yytext());
            }
          case 139: break;
          case 67: 
            { return new Symbol (TSGraphik.dondetodo, yycolumn, yyline, yytext());
            }
          case 140: break;
          case 68: 
            { return new Symbol (TSGraphik.dondecada, yycolumn, yyline, yytext());
            }
          case 141: break;
          case 69: 
            { return new Symbol (TSGraphik.imprimirk, yycolumn, yyline, yytext());
            }
          case 142: break;
          case 70: 
            { return new Symbol (TSGraphik.protegido, yycolumn, yyline, yytext());
            }
          case 143: break;
          case 71: 
            { return new Symbol (TSGraphik.seleccion, yycolumn, yyline, yytext());
            }
          case 144: break;
          case 72: 
            { return new Symbol (TSGraphik.incluirhk, yycolumn, yyline, yytext());
            }
          case 145: break;
          case 73: 
            { return new Symbol (TSGraphik.graphikar_funcion, yycolumn, yyline, yytext());
            }
          case 146: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
