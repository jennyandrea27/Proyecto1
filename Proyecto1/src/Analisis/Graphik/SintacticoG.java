
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisis.Graphik;

import java_cup.runtime.Symbol;
import Extras.*;
import Analisis.*;
import Reportes.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoG extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TSGraphik.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoG() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoG(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoG(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\202\000\002\002\004\000\002\002\004\000\002\064" +
    "\003\000\002\064\003\000\002\064\003\000\002\063\004" +
    "\000\002\063\002\000\002\006\005\000\002\006\006\000" +
    "\002\004\003\000\002\004\002\000\002\003\004\000\002" +
    "\003\003\000\002\061\003\000\002\061\003\000\002\007" +
    "\006\000\002\005\004\000\002\005\003\000\002\012\011" +
    "\000\002\011\004\000\002\011\003\000\002\030\003\000" +
    "\002\030\004\000\002\030\003\000\002\010\004\000\002" +
    "\010\002\000\002\014\007\000\002\026\003\000\002\026" +
    "\003\000\002\026\002\000\002\037\006\000\002\037\005" +
    "\000\002\016\004\000\002\016\004\000\002\021\004\000" +
    "\002\021\002\000\002\056\007\000\002\056\005\000\002" +
    "\057\003\000\002\057\003\000\002\017\003\000\002\017" +
    "\006\000\002\023\005\000\002\023\003\000\002\024\013" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\025\003\000\002\025\003\000\002\032\006\000\002\032" +
    "\004\000\002\032\002\000\002\027\004\000\002\033\007" +
    "\000\002\033\007\000\002\034\005\000\002\034\003\000" +
    "\002\034\002\000\002\035\011\000\002\036\005\000\002" +
    "\040\012\000\002\041\006\000\002\041\002\000\002\043" +
    "\012\000\002\044\004\000\002\044\003\000\002\045\006" +
    "\000\002\046\005\000\002\046\002\000\002\050\015\000" +
    "\002\051\007\000\002\051\005\000\002\031\004\000\002" +
    "\031\003\000\002\052\003\000\002\052\003\000\002\053" +
    "\011\000\002\054\012\000\002\020\004\000\002\020\003" +
    "\000\002\055\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\004\000\002\022\004\000\002\022\005" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\004\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\062" +
    "\003\000\002\062\003\000\002\062\003\000\002\062\003" +
    "\000\002\062\003\000\002\062\003\000\002\042\004\000" +
    "\002\042\003\000\002\013\004\000\002\013\004\000\002" +
    "\013\004\000\002\013\004\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\004\000" +
    "\002\013\004\000\002\013\004\000\002\060\007\000\002" +
    "\047\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0110\000\010\013\012\015\ufff7\023\007\001\002\000" +
    "\010\013\012\015\ufff8\023\007\001\002\000\004\002\u0111" +
    "\001\002\000\010\013\ufff5\015\ufff5\023\ufff5\001\002\000" +
    "\004\076\u010f\001\002\000\010\013\ufff3\015\ufff3\023\ufff3" +
    "\001\002\000\010\013\ufff4\015\ufff4\023\ufff4\001\002\000" +
    "\004\076\u010c\001\002\000\004\015\015\001\002\000\006" +
    "\002\ufff0\015\ufff0\001\002\000\004\076\020\001\002\000" +
    "\006\002\000\015\015\001\002\000\006\002\ufff1\015\ufff1" +
    "\001\002\000\010\016\022\043\uffe8\045\uffe8\001\002\000" +
    "\006\043\025\045\ufffb\001\002\000\004\076\023\001\002" +
    "\000\006\043\uffe9\045\uffe9\001\002\000\004\045\032\001" +
    "\002\000\010\107\031\110\026\111\030\001\002\000\014" +
    "\042\ufffd\044\ufffd\045\ufffd\071\ufffd\112\ufffd\001\002\000" +
    "\014\042\ufffc\044\ufffc\045\ufffc\071\ufffc\112\ufffc\001\002" +
    "\000\014\042\uffff\044\uffff\045\uffff\071\uffff\112\uffff\001" +
    "\002\000\014\042\ufffe\044\ufffe\045\ufffe\071\ufffe\112\ufffe" +
    "\001\002\000\022\004\051\005\046\006\037\007\043\010" +
    "\050\011\035\012\034\076\033\001\002\000\004\076\uffcf" +
    "\001\002\000\004\076\uffd0\001\002\000\006\022\u0106\076" +
    "\uffcd\001\002\000\004\042\u0105\001\002\000\004\076\uffd1" +
    "\001\002\000\004\076\211\001\002\000\024\004\uffea\005" +
    "\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea\046\uffea" +
    "\076\uffea\001\002\000\024\004\uffec\005\uffec\006\uffec\007" +
    "\uffec\010\uffec\011\uffec\012\uffec\046\uffec\076\uffec\001\002" +
    "\000\004\076\uffd3\001\002\000\024\004\uffed\005\uffed\006" +
    "\uffed\007\uffed\010\uffed\011\uffed\012\uffed\046\uffed\076\uffed" +
    "\001\002\000\004\076\uffce\001\002\000\004\076\uffd4\001" +
    "\002\000\024\004\051\005\046\006\037\007\043\010\050" +
    "\011\035\012\034\046\210\076\033\001\002\000\004\076" +
    "\uffd2\001\002\000\016\005\046\006\037\007\043\010\050" +
    "\012\034\076\033\001\002\000\004\076\053\001\002\000" +
    "\014\042\ufffb\043\025\044\ufffb\071\ufffb\112\ufffb\001\002" +
    "\000\012\042\uffe4\044\056\071\055\112\060\001\002\000" +
    "\032\021\104\052\110\056\103\067\102\073\101\074\105" +
    "\075\077\076\113\077\107\104\114\113\112\114\117\001" +
    "\002\000\034\017\201\021\104\052\110\056\103\067\102" +
    "\073\101\074\105\075\077\076\113\077\107\104\114\113" +
    "\112\114\117\001\002\000\056\042\uffae\043\uffae\044\uffae" +
    "\046\uffae\051\uffae\052\uffae\053\uffae\054\uffae\055\uffae\057" +
    "\uffae\060\uffae\061\uffae\062\uffae\063\uffae\064\uffae\065\uffae" +
    "\066\uffae\071\uffae\072\uffae\100\uffae\101\uffae\112\uffae\001" +
    "\002\000\004\076\175\001\002\000\010\042\uffde\044\070" +
    "\071\055\001\002\000\006\042\uffe6\112\065\001\002\000" +
    "\004\042\uffe5\001\002\000\004\042\uffe7\001\002\000\004" +
    "\076\066\001\002\000\010\042\ufffb\043\025\112\ufffb\001" +
    "\002\000\006\042\uffe3\112\uffe3\001\002\000\004\045\073" +
    "\001\002\000\056\042\uffaf\043\uffaf\044\uffaf\046\uffaf\051" +
    "\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\057\uffaf\060\uffaf" +
    "\061\uffaf\062\uffaf\063\uffaf\064\uffaf\065\uffaf\066\uffaf\071" +
    "\uffaf\072\uffaf\100\uffaf\101\uffaf\112\uffaf\001\002\000\004" +
    "\042\uffe0\001\002\000\040\021\104\045\073\046\uffc4\052" +
    "\110\056\103\067\102\073\101\074\105\075\077\076\113" +
    "\077\107\104\114\112\uffc4\113\112\114\117\001\002\000" +
    "\006\042\uffdf\112\075\001\002\000\004\045\076\001\002" +
    "\000\040\021\104\045\073\046\uffc4\052\110\056\103\067" +
    "\102\073\101\074\105\075\077\076\113\077\107\104\114" +
    "\112\uffc4\113\112\114\117\001\002\000\052\042\uff9e\043" +
    "\uff9e\046\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e" +
    "\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\064\uff9e\065" +
    "\uff9e\066\uff9e\072\uff9e\100\uff9e\101\uff9e\112\uff9e\001\002" +
    "\000\006\046\uffdb\112\075\001\002\000\052\042\uff9a\043" +
    "\uff9a\046\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a" +
    "\057\uff9a\060\uff9a\061\uff9a\062\uff9a\063\uff9a\064\uff9a\065" +
    "\uff9a\066\uff9a\072\uff9a\100\uff9a\101\uff9a\112\uff9a\001\002" +
    "\000\032\021\104\052\110\056\103\067\102\073\101\074" +
    "\105\075\077\076\113\077\107\104\114\113\112\114\117" +
    "\001\002\000\032\021\104\052\110\056\103\067\102\073" +
    "\101\074\105\075\077\076\113\077\107\104\114\113\112" +
    "\114\117\001\002\000\004\076\113\001\002\000\052\042" +
    "\uff9f\043\uff9f\046\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f" +
    "\055\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\064" +
    "\uff9f\065\uff9f\066\uff9f\072\uff9f\100\uff9f\101\uff9f\112\uff9f" +
    "\001\002\000\044\046\uffc5\051\130\052\127\053\132\054" +
    "\125\055\124\057\uffc5\060\142\061\134\062\136\063\135" +
    "\064\126\065\137\066\133\100\131\101\141\112\uffc5\001" +
    "\002\000\052\042\uff9d\043\uff9d\046\uff9d\051\uff9d\052\uff9d" +
    "\053\uff9d\054\uff9d\055\uff9d\057\uff9d\060\uff9d\061\uff9d\062" +
    "\uff9d\063\uff9d\064\uff9d\065\uff9d\066\uff9d\072\uff9d\100\uff9d" +
    "\101\uff9d\112\uff9d\001\002\000\032\021\104\052\110\056" +
    "\103\067\102\073\101\074\105\075\077\076\113\077\107" +
    "\104\114\113\112\114\117\001\002\000\056\042\uff9c\043" +
    "\uff9c\046\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c" +
    "\057\uff9c\060\uff9c\061\uff9c\062\uff9c\063\uff9c\064\uff9c\065" +
    "\uff9c\066\uff9c\070\160\071\055\072\uff9c\100\uff9c\101\uff9c" +
    "\112\uff9c\001\002\000\052\042\uff99\043\uff99\046\uff99\051" +
    "\uff99\052\uff99\053\uff99\054\uff99\055\uff99\057\uff99\060\uff99" +
    "\061\uff99\062\uff99\063\uff99\064\uff99\065\uff99\066\uff99\072" +
    "\uff99\100\uff99\101\uff99\112\uff99\001\002\000\066\042\uffd6" +
    "\043\uffd6\044\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052" +
    "\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6" +
    "\061\uffd6\062\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6\070" +
    "\uffd6\071\uffd6\072\uffd6\100\uffd6\101\uffd6\112\uffd6\001\002" +
    "\000\004\076\154\001\002\000\052\042\uffa0\043\uffa0\046" +
    "\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0\057\uffa0" +
    "\060\uffa0\061\uffa0\062\uffa0\063\uffa0\064\uffa0\065\uffa0\066" +
    "\uffa0\072\uffa0\100\uffa0\101\uffa0\112\uffa0\001\002\000\006" +
    "\046\uffda\112\122\001\002\000\052\042\uff98\043\uff98\046" +
    "\uff98\051\uff98\052\uff98\053\uff98\054\uff98\055\uff98\057\uff98" +
    "\060\uff98\061\uff98\062\uff98\063\uff98\064\uff98\065\uff98\066" +
    "\uff98\072\uff98\100\uff98\101\uff98\112\uff98\001\002\000\004" +
    "\046\121\001\002\000\010\042\uffdd\046\uffdd\112\uffdd\001" +
    "\002\000\032\021\104\052\110\056\103\067\102\073\101" +
    "\074\105\075\077\076\113\077\107\104\114\113\112\114" +
    "\117\001\002\000\044\046\uffc6\051\130\052\127\053\132" +
    "\054\125\055\124\057\uffc6\060\142\061\134\062\136\063" +
    "\135\064\126\065\137\066\133\100\131\101\141\112\uffc6" +
    "\001\002\000\032\021\104\052\110\056\103\067\102\073" +
    "\101\074\105\075\077\076\113\077\107\104\114\113\112" +
    "\114\117\001\002\000\032\021\104\052\110\056\103\067" +
    "\102\073\101\074\105\075\077\076\113\077\107\104\114" +
    "\113\112\114\117\001\002\000\032\021\104\052\110\056" +
    "\103\067\102\073\101\074\105\075\077\076\113\077\107" +
    "\104\114\113\112\114\117\001\002\000\032\021\104\052" +
    "\110\056\103\067\102\073\101\074\105\075\077\076\113" +
    "\077\107\104\114\113\112\114\117\001\002\000\032\021" +
    "\104\052\110\056\103\067\102\073\101\074\105\075\077" +
    "\076\113\077\107\104\114\113\112\114\117\001\002\000" +
    "\032\021\uff95\052\uff95\056\uff95\067\uff95\073\uff95\074\uff95" +
    "\075\uff95\076\uff95\077\uff95\104\uff95\113\uff95\114\uff95\001" +
    "\002\000\032\021\104\052\110\056\103\067\102\073\101" +
    "\074\105\075\077\076\113\077\107\104\114\113\112\114" +
    "\117\001\002\000\032\021\104\052\110\056\103\067\102" +
    "\073\101\074\105\075\077\076\113\077\107\104\114\113" +
    "\112\114\117\001\002\000\032\021\uff96\052\uff96\056\uff96" +
    "\067\uff96\073\uff96\074\uff96\075\uff96\076\uff96\077\uff96\104" +
    "\uff96\113\uff96\114\uff96\001\002\000\032\021\uff92\052\uff92" +
    "\056\uff92\067\uff92\073\uff92\074\uff92\075\uff92\076\uff92\077" +
    "\uff92\104\uff92\113\uff92\114\uff92\001\002\000\032\021\uff93" +
    "\052\uff93\056\uff93\067\uff93\073\uff93\074\uff93\075\uff93\076" +
    "\uff93\077\uff93\104\uff93\113\uff93\114\uff93\001\002\000\032" +
    "\021\104\052\110\056\103\067\102\073\101\074\105\075" +
    "\077\076\113\077\107\104\114\113\112\114\117\001\002" +
    "\000\032\021\104\052\110\056\103\067\102\073\101\074" +
    "\105\075\077\076\113\077\107\104\114\113\112\114\117" +
    "\001\002\000\032\021\uff94\052\uff94\056\uff94\067\uff94\073" +
    "\uff94\074\uff94\075\uff94\076\uff94\077\uff94\104\uff94\113\uff94" +
    "\114\uff94\001\002\000\032\021\uff97\052\uff97\056\uff97\067" +
    "\uff97\073\uff97\074\uff97\075\uff97\076\uff97\077\uff97\104\uff97" +
    "\113\uff97\114\uff97\001\002\000\052\042\uffa4\043\uffa4\046" +
    "\uffa4\051\130\052\127\053\132\054\125\055\124\057\uffa4" +
    "\060\142\061\134\062\136\063\135\064\126\065\137\066" +
    "\133\072\uffa4\100\131\101\141\112\uffa4\001\002\000\052" +
    "\042\uffa6\043\uffa6\046\uffa6\051\130\052\127\053\132\054" +
    "\125\055\124\057\uffa6\060\142\061\134\062\136\063\135" +
    "\064\uffa6\065\uffa6\066\uffa6\072\uffa6\100\131\101\141\112" +
    "\uffa6\001\002\000\052\042\uffa5\043\uffa5\046\uffa5\051\130" +
    "\052\127\053\132\054\125\055\124\057\uffa5\060\142\061" +
    "\134\062\136\063\135\064\uffa5\065\137\066\uffa5\072\uffa5" +
    "\100\131\101\141\112\uffa5\001\002\000\052\042\uffaa\043" +
    "\uffaa\046\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055\124" +
    "\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa\065" +
    "\uffaa\066\uffaa\072\uffaa\100\uffaa\101\uffaa\112\uffaa\001\002" +
    "\000\052\042\uffac\043\uffac\046\uffac\051\uffac\052\uffac\053" +
    "\132\054\125\055\124\057\uffac\060\uffac\061\uffac\062\uffac" +
    "\063\uffac\064\uffac\065\uffac\066\uffac\072\uffac\100\uffac\101" +
    "\uffac\112\uffac\001\002\000\052\042\uffab\043\uffab\046\uffab" +
    "\051\uffab\052\uffab\053\132\054\125\055\124\057\uffab\060" +
    "\uffab\061\uffab\062\uffab\063\uffab\064\uffab\065\uffab\066\uffab" +
    "\072\uffab\100\uffab\101\uffab\112\uffab\001\002\000\052\042" +
    "\uffa7\043\uffa7\046\uffa7\051\130\052\127\053\132\054\125" +
    "\055\124\057\uffa7\060\142\061\134\062\136\063\135\064" +
    "\uffa7\065\137\066\133\072\uffa7\100\131\101\141\112\uffa7" +
    "\001\002\000\052\042\uffa9\043\uffa9\046\uffa9\051\uffa9\052" +
    "\uffa9\053\uffa9\054\uffa9\055\124\057\uffa9\060\uffa9\061\uffa9" +
    "\062\uffa9\063\uffa9\064\uffa9\065\uffa9\066\uffa9\072\uffa9\100" +
    "\uffa9\101\uffa9\112\uffa9\001\002\000\052\042\uffa8\043\uffa8" +
    "\046\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055\124\057" +
    "\uffa8\060\uffa8\061\uffa8\062\uffa8\063\uffa8\064\uffa8\065\uffa8" +
    "\066\uffa8\072\uffa8\100\uffa8\101\uffa8\112\uffa8\001\002\000" +
    "\004\056\155\001\002\000\036\021\104\052\110\056\103" +
    "\057\uffc4\067\102\073\101\074\105\075\077\076\113\077" +
    "\107\104\114\112\uffc4\113\112\114\117\001\002\000\006" +
    "\057\157\112\122\001\002\000\052\042\uffc7\043\uffc7\046" +
    "\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\057\uffc7" +
    "\060\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065\uffc7\066" +
    "\uffc7\072\uffc7\100\uffc7\101\uffc7\112\uffc7\001\002\000\004" +
    "\076\162\001\002\000\054\042\uff9b\043\uff9b\046\uff9b\051" +
    "\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b\057\uff9b\060\uff9b" +
    "\061\uff9b\062\uff9b\063\uff9b\064\uff9b\065\uff9b\066\uff9b\071" +
    "\055\072\uff9b\100\uff9b\101\uff9b\112\uff9b\001\002\000\066" +
    "\042\uffd7\043\uffd7\044\uffd7\046\uffd7\047\uffd7\050\uffd7\051" +
    "\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7" +
    "\060\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7\066" +
    "\uffd7\070\uffd7\071\uffd7\072\uffd7\100\uffd7\101\uffd7\112\uffd7" +
    "\001\002\000\052\042\uffa2\043\uffa2\046\uffa2\051\uffa2\052" +
    "\uffa2\053\132\054\125\055\124\057\uffa2\060\uffa2\061\uffa2" +
    "\062\uffa2\063\uffa2\064\uffa2\065\uffa2\066\uffa2\072\uffa2\100" +
    "\uffa2\101\uffa2\112\uffa2\001\002\000\006\056\165\070\160" +
    "\001\002\000\036\021\104\052\110\056\103\057\uffc4\067" +
    "\102\073\101\074\105\075\077\076\113\077\107\104\114" +
    "\112\uffc4\113\112\114\117\001\002\000\006\057\167\112" +
    "\122\001\002\000\052\042\uffc8\043\uffc8\046\uffc8\051\uffc8" +
    "\052\uffc8\053\uffc8\054\uffc8\055\uffc8\057\uffc8\060\uffc8\061" +
    "\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8\066\uffc8\072\uffc8" +
    "\100\uffc8\101\uffc8\112\uffc8\001\002\000\040\051\130\052" +
    "\127\053\132\054\125\055\124\057\171\060\142\061\134" +
    "\062\136\063\135\064\126\065\137\066\133\100\131\101" +
    "\141\001\002\000\052\042\uffa1\043\uffa1\046\uffa1\051\uffa1" +
    "\052\uffa1\053\uffa1\054\uffa1\055\uffa1\057\uffa1\060\uffa1\061" +
    "\uffa1\062\uffa1\063\uffa1\064\uffa1\065\uffa1\066\uffa1\072\uffa1" +
    "\100\uffa1\101\uffa1\112\uffa1\001\002\000\052\042\uffa3\043" +
    "\uffa3\046\uffa3\051\130\052\127\053\132\054\125\055\124" +
    "\057\uffa3\060\142\061\134\062\136\063\135\064\uffa3\065" +
    "\uffa3\066\uffa3\072\uffa3\100\131\101\141\112\uffa3\001\002" +
    "\000\004\046\174\001\002\000\010\042\uffdc\046\uffdc\112" +
    "\uffdc\001\002\000\010\042\ufffb\043\025\112\ufffb\001\002" +
    "\000\006\042\uffe2\112\uffe2\001\002\000\004\042\uffe1\001" +
    "\002\000\040\042\uffd9\051\130\052\127\053\132\054\125" +
    "\055\124\060\142\061\134\062\136\063\135\064\126\065" +
    "\137\066\133\100\131\101\141\001\002\000\004\076\202" +
    "\001\002\000\004\056\203\001\002\000\004\057\204\001" +
    "\002\000\004\042\uffd8\001\002\000\040\051\130\052\127" +
    "\053\132\054\125\055\124\060\142\061\134\062\136\063" +
    "\135\064\126\065\137\066\133\072\206\100\131\101\141" +
    "\001\002\000\056\042\uffad\043\uffad\044\uffad\046\uffad\051" +
    "\uffad\052\uffad\053\uffad\054\uffad\055\uffad\057\uffad\060\uffad" +
    "\061\uffad\062\uffad\063\uffad\064\uffad\065\uffad\066\uffad\071" +
    "\uffad\072\uffad\100\uffad\101\uffad\112\uffad\001\002\000\024" +
    "\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012" +
    "\uffee\046\uffee\076\uffee\001\002\000\006\002\uffef\015\uffef" +
    "\001\002\000\004\056\212\001\002\000\022\005\046\006" +
    "\037\007\043\010\050\012\034\057\uffca\076\033\112\uffca" +
    "\001\002\000\004\076\u0104\001\002\000\006\057\216\112" +
    "\215\001\002\000\016\005\046\006\037\007\043\010\050" +
    "\012\034\076\033\001\002\000\006\043\025\045\ufffb\001" +
    "\002\000\004\045\220\001\002\000\040\003\244\004\051" +
    "\020\240\021\104\024\236\027\222\030\230\031\232\032" +
    "\243\033\245\034\221\041\225\076\113\104\114\105\251" +
    "\001\002\000\004\056\374\001\002\000\004\056\345\001" +
    "\002\000\046\003\uff8a\004\uff8a\020\uff8a\021\uff8a\024\uff8a" +
    "\025\uff8a\026\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a\033" +
    "\uff8a\034\uff8a\041\uff8a\046\uff8a\076\uff8a\104\uff8a\105\uff8a" +
    "\001\002\000\042\003\244\004\051\020\240\021\104\024" +
    "\236\027\222\030\230\031\232\032\243\033\245\034\221" +
    "\041\225\046\344\076\113\104\114\105\251\001\002\000" +
    "\004\056\340\001\002\000\046\003\uff90\004\uff90\020\uff90" +
    "\021\uff90\024\uff90\025\uff90\026\uff90\027\uff90\030\uff90\031" +
    "\uff90\032\uff90\033\uff90\034\uff90\041\uff90\046\uff90\076\uff90" +
    "\104\uff90\105\uff90\001\002\000\004\042\337\001\002\000" +
    "\004\056\331\001\002\000\046\003\uff86\004\uff86\020\uff86" +
    "\021\uff86\024\uff86\025\uff86\026\uff86\027\uff86\030\uff86\031" +
    "\uff86\032\uff86\033\uff86\034\uff86\041\uff86\046\uff86\076\uff86" +
    "\104\uff86\105\uff86\001\002\000\004\045\322\001\002\000" +
    "\046\003\uff89\004\uff89\020\uff89\021\uff89\024\uff89\025\uff89" +
    "\026\uff89\027\uff89\030\uff89\031\uff89\032\uff89\033\uff89\034" +
    "\uff89\041\uff89\046\uff89\076\uff89\104\uff89\105\uff89\001\002" +
    "\000\046\003\uff87\004\uff87\020\uff87\021\uff87\024\uff87\025" +
    "\uff87\026\uff87\027\uff87\030\uff87\031\uff87\032\uff87\033\uff87" +
    "\034\uff87\041\uff87\046\uff87\076\uff87\104\uff87\105\uff87\001" +
    "\002\000\010\044\315\070\160\071\055\001\002\000\004" +
    "\056\275\001\002\000\004\042\274\001\002\000\032\021" +
    "\104\052\110\056\103\067\102\073\101\074\105\075\077" +
    "\076\113\077\107\104\114\113\112\114\117\001\002\000" +
    "\004\042\272\001\002\000\046\003\uff8b\004\uff8b\020\uff8b" +
    "\021\uff8b\024\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b\031" +
    "\uff8b\032\uff8b\033\uff8b\034\uff8b\041\uff8b\046\uff8b\076\uff8b" +
    "\104\uff8b\105\uff8b\001\002\000\004\042\271\001\002\000" +
    "\004\042\270\001\002\000\004\042\267\001\002\000\004" +
    "\042\266\001\002\000\046\003\uff85\004\uff85\020\uff85\021" +
    "\uff85\024\uff85\025\uff85\026\uff85\027\uff85\030\uff85\031\uff85" +
    "\032\uff85\033\uff85\034\uff85\041\uff85\046\uff85\076\uff85\104" +
    "\uff85\105\uff85\001\002\000\046\003\uff88\004\uff88\020\uff88" +
    "\021\uff88\024\uff88\025\uff88\026\uff88\027\uff88\030\uff88\031" +
    "\uff88\032\uff88\033\uff88\034\uff88\041\uff88\046\uff88\076\uff88" +
    "\104\uff88\105\uff88\001\002\000\004\056\252\001\002\000" +
    "\032\021\104\052\110\056\103\067\102\073\101\074\105" +
    "\075\077\076\113\077\107\104\114\113\112\114\117\001" +
    "\002\000\040\051\130\052\127\053\132\054\125\055\124" +
    "\057\254\060\142\061\134\062\136\063\135\064\126\065" +
    "\137\066\133\100\131\101\141\001\002\000\004\045\255" +
    "\001\002\000\040\003\244\004\051\020\240\021\104\024" +
    "\236\027\222\030\230\031\232\032\243\033\245\034\221" +
    "\041\225\076\113\104\114\105\251\001\002\000\042\003" +
    "\244\004\051\020\240\021\104\024\236\027\222\030\230" +
    "\031\232\032\243\033\245\034\221\041\225\046\260\076" +
    "\113\104\114\105\251\001\002\000\046\003\uff91\004\uff91" +
    "\020\uff91\021\uff91\024\uff91\025\uff91\026\uff91\027\uff91\030" +
    "\uff91\031\uff91\032\uff91\033\uff91\034\uff91\041\uff91\046\uff91" +
    "\076\uff91\104\uff91\105\uff91\001\002\000\050\003\uffbf\004" +
    "\uffbf\020\uffbf\021\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf" +
    "\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\041\uffbf\046" +
    "\uffbf\076\uffbf\104\uffbf\105\uffbf\106\261\001\002\000\004" +
    "\045\263\001\002\000\046\003\uffc1\004\uffc1\020\uffc1\021" +
    "\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1" +
    "\032\uffc1\033\uffc1\034\uffc1\041\uffc1\046\uffc1\076\uffc1\104" +
    "\uffc1\105\uffc1\001\002\000\040\003\244\004\051\020\240" +
    "\021\104\024\236\027\222\030\230\031\232\032\243\033" +
    "\245\034\221\041\225\076\113\104\114\105\251\001\002" +
    "\000\042\003\244\004\051\020\240\021\104\024\236\027" +
    "\222\030\230\031\232\032\243\033\245\034\221\041\225" +
    "\046\265\076\113\104\114\105\251\001\002\000\046\003" +
    "\uffc0\004\uffc0\020\uffc0\021\uffc0\024\uffc0\025\uffc0\026\uffc0" +
    "\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\041" +
    "\uffc0\046\uffc0\076\uffc0\104\uffc0\105\uffc0\001\002\000\046" +
    "\003\uff8c\004\uff8c\020\uff8c\021\uff8c\024\uff8c\025\uff8c\026" +
    "\uff8c\027\uff8c\030\uff8c\031\uff8c\032\uff8c\033\uff8c\034\uff8c" +
    "\041\uff8c\046\uff8c\076\uff8c\104\uff8c\105\uff8c\001\002\000" +
    "\046\003\uff83\004\uff83\020\uff83\021\uff83\024\uff83\025\uff83" +
    "\026\uff83\027\uff83\030\uff83\031\uff83\032\uff83\033\uff83\034" +
    "\uff83\041\uff83\046\uff83\076\uff83\104\uff83\105\uff83\001\002" +
    "\000\046\003\uff82\004\uff82\020\uff82\021\uff82\024\uff82\025" +
    "\uff82\026\uff82\027\uff82\030\uff82\031\uff82\032\uff82\033\uff82" +
    "\034\uff82\041\uff82\046\uff82\076\uff82\104\uff82\105\uff82\001" +
    "\002\000\046\003\uff84\004\uff84\020\uff84\021\uff84\024\uff84" +
    "\025\uff84\026\uff84\027\uff84\030\uff84\031\uff84\032\uff84\033" +
    "\uff84\034\uff84\041\uff84\046\uff84\076\uff84\104\uff84\105\uff84" +
    "\001\002\000\046\003\uff8d\004\uff8d\020\uff8d\021\uff8d\024" +
    "\uff8d\025\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\032\uff8d" +
    "\033\uff8d\034\uff8d\041\uff8d\046\uff8d\076\uff8d\104\uff8d\105" +
    "\uff8d\001\002\000\040\042\uffc9\051\130\052\127\053\132" +
    "\054\125\055\124\060\142\061\134\062\136\063\135\064" +
    "\126\065\137\066\133\100\131\101\141\001\002\000\046" +
    "\003\uff8f\004\uff8f\020\uff8f\021\uff8f\024\uff8f\025\uff8f\026" +
    "\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f\034\uff8f" +
    "\041\uff8f\046\uff8f\076\uff8f\104\uff8f\105\uff8f\001\002\000" +
    "\004\076\113\001\002\000\006\057\277\070\160\001\002" +
    "\000\004\045\300\001\002\000\004\025\302\001\002\000" +
    "\010\025\302\026\310\046\uffb9\001\002\000\032\021\104" +
    "\052\110\056\103\067\102\073\101\074\105\075\077\076" +
    "\113\077\107\104\114\113\112\114\117\001\002\000\010" +
    "\025\uffbc\026\uffbc\046\uffbc\001\002\000\040\043\305\051" +
    "\130\052\127\053\132\054\125\055\124\060\142\061\134" +
    "\062\136\063\135\064\126\065\137\066\133\100\131\101" +
    "\141\001\002\000\040\003\244\004\051\020\240\021\104" +
    "\024\236\027\222\030\230\031\232\032\243\033\245\034" +
    "\221\041\225\076\113\104\114\105\251\001\002\000\046" +
    "\003\244\004\051\020\240\021\104\024\236\025\uffbb\026" +
    "\uffbb\027\222\030\230\031\232\032\243\033\245\034\221" +
    "\041\225\046\uffbb\076\113\104\114\105\251\001\002\000" +
    "\004\046\314\001\002\000\004\043\312\001\002\000\010" +
    "\025\uffbd\026\uffbd\046\uffbd\001\002\000\040\003\244\004" +
    "\051\020\240\021\104\024\236\027\222\030\230\031\232" +
    "\032\243\033\245\034\221\041\225\076\113\104\114\105" +
    "\251\001\002\000\042\003\244\004\051\020\240\021\104" +
    "\024\236\027\222\030\230\031\232\032\243\033\245\034" +
    "\221\041\225\046\uffba\076\113\104\114\105\251\001\002" +
    "\000\046\003\uffbe\004\uffbe\020\uffbe\021\uffbe\024\uffbe\025" +
    "\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe" +
    "\034\uffbe\041\uffbe\046\uffbe\076\uffbe\104\uffbe\105\uffbe\001" +
    "\002\000\032\021\104\052\110\056\103\067\102\073\101" +
    "\074\105\075\077\076\113\077\107\104\114\113\112\114" +
    "\117\001\002\000\006\044\317\071\055\001\002\000\032" +
    "\021\104\052\110\056\103\067\102\073\101\074\105\075" +
    "\077\076\113\077\107\104\114\113\112\114\117\001\002" +
    "\000\042\042\ufff9\051\130\052\127\053\132\054\125\055" +
    "\124\057\ufff9\060\142\061\134\062\136\063\135\064\126" +
    "\065\137\066\133\100\131\101\141\001\002\000\042\042" +
    "\ufffa\051\130\052\127\053\132\054\125\055\124\057\ufffa" +
    "\060\142\061\134\062\136\063\135\064\126\065\137\066" +
    "\133\100\131\101\141\001\002\000\040\003\244\004\051" +
    "\020\240\021\104\024\236\027\222\030\230\031\232\032" +
    "\243\033\245\034\221\041\225\076\113\104\114\105\251" +
    "\001\002\000\042\003\244\004\051\020\240\021\104\024" +
    "\236\027\222\030\230\031\232\032\243\033\245\034\221" +
    "\041\225\046\324\076\113\104\114\105\251\001\002\000" +
    "\004\030\325\001\002\000\004\056\326\001\002\000\032" +
    "\021\104\052\110\056\103\067\102\073\101\074\105\075" +
    "\077\076\113\077\107\104\114\113\112\114\117\001\002" +
    "\000\040\051\130\052\127\053\132\054\125\055\124\057" +
    "\330\060\142\061\134\062\136\063\135\064\126\065\137" +
    "\066\133\100\131\101\141\001\002\000\046\003\uffb0\004" +
    "\uffb0\020\uffb0\021\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0" +
    "\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\041\uffb0\046" +
    "\uffb0\076\uffb0\104\uffb0\105\uffb0\001\002\000\032\021\104" +
    "\052\110\056\103\067\102\073\101\074\105\075\077\076" +
    "\113\077\107\104\114\113\112\114\117\001\002\000\040" +
    "\051\130\052\127\053\132\054\125\055\124\057\333\060" +
    "\142\061\134\062\136\063\135\064\126\065\137\066\133" +
    "\100\131\101\141\001\002\000\004\045\334\001\002\000" +
    "\040\003\244\004\051\020\240\021\104\024\236\027\222" +
    "\030\230\031\232\032\243\033\245\034\221\041\225\076" +
    "\113\104\114\105\251\001\002\000\042\003\244\004\051" +
    "\020\240\021\104\024\236\027\222\030\230\031\232\032" +
    "\243\033\245\034\221\041\225\046\336\076\113\104\114" +
    "\105\251\001\002\000\046\003\uffb1\004\uffb1\020\uffb1\021" +
    "\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1" +
    "\032\uffb1\033\uffb1\034\uffb1\041\uffb1\046\uffb1\076\uffb1\104" +
    "\uffb1\105\uffb1\001\002\000\046\003\uff8e\004\uff8e\020\uff8e" +
    "\021\uff8e\024\uff8e\025\uff8e\026\uff8e\027\uff8e\030\uff8e\031" +
    "\uff8e\032\uff8e\033\uff8e\034\uff8e\041\uff8e\046\uff8e\076\uff8e" +
    "\104\uff8e\105\uff8e\001\002\000\032\021\104\052\110\056" +
    "\103\067\102\073\101\074\105\075\077\076\113\077\107" +
    "\104\114\113\112\114\117\001\002\000\040\051\130\052" +
    "\127\053\132\054\125\055\124\057\342\060\142\061\134" +
    "\062\136\063\135\064\126\065\137\066\133\100\131\101" +
    "\141\001\002\000\004\042\343\001\002\000\046\003\uff81" +
    "\004\uff81\020\uff81\021\uff81\024\uff81\025\uff81\026\uff81\027" +
    "\uff81\030\uff81\031\uff81\032\uff81\033\uff81\034\uff81\041\uff81" +
    "\046\uff81\076\uff81\104\uff81\105\uff81\001\002\000\024\004" +
    "\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5" +
    "\046\uffd5\076\uffd5\001\002\000\006\004\346\076\113\001" +
    "\002\000\016\005\046\006\037\007\043\010\050\012\034" +
    "\076\033\001\002\000\006\044\366\070\160\001\002\000" +
    "\004\043\351\001\002\000\032\021\104\052\110\056\103" +
    "\067\102\073\101\074\105\075\077\076\113\077\107\104" +
    "\114\113\112\114\117\001\002\000\040\043\353\051\130" +
    "\052\127\053\132\054\125\055\124\060\142\061\134\062" +
    "\136\063\135\064\126\065\137\066\133\100\131\101\141" +
    "\001\002\000\004\076\113\001\002\000\004\057\uffb4\001" +
    "\002\000\014\044\315\047\364\050\365\070\160\071\055" +
    "\001\002\000\004\057\357\001\002\000\004\045\360\001" +
    "\002\000\040\003\244\004\051\020\240\021\104\024\236" +
    "\027\222\030\230\031\232\032\243\033\245\034\221\041" +
    "\225\076\113\104\114\105\251\001\002\000\042\003\244" +
    "\004\051\020\240\021\104\024\236\027\222\030\230\031" +
    "\232\032\243\033\245\034\221\041\225\046\362\076\113" +
    "\104\114\105\251\001\002\000\046\003\uffb8\004\uffb8\020" +
    "\uffb8\021\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8" +
    "\031\uffb8\032\uffb8\033\uffb8\034\uffb8\041\uffb8\046\uffb8\076" +
    "\uffb8\104\uffb8\105\uffb8\001\002\000\004\057\uffb5\001\002" +
    "\000\004\057\uffb3\001\002\000\004\057\uffb2\001\002\000" +
    "\032\021\104\052\110\056\103\067\102\073\101\074\105" +
    "\075\077\076\113\077\107\104\114\113\112\114\117\001" +
    "\002\000\040\043\uffb6\051\130\052\127\053\132\054\125" +
    "\055\124\060\142\061\134\062\136\063\135\064\126\065" +
    "\137\066\133\100\131\101\141\001\002\000\004\076\371" +
    "\001\002\000\004\044\372\001\002\000\032\021\104\052" +
    "\110\056\103\067\102\073\101\074\105\075\077\076\113" +
    "\077\107\104\114\113\112\114\117\001\002\000\040\043" +
    "\uffb7\051\130\052\127\053\132\054\125\055\124\060\142" +
    "\061\134\062\136\063\135\064\126\065\137\066\133\100" +
    "\131\101\141\001\002\000\004\076\113\001\002\000\006" +
    "\070\160\112\376\001\002\000\004\076\113\001\002\000" +
    "\006\057\u0100\070\160\001\002\000\004\042\u0101\001\002" +
    "\000\046\003\uff80\004\uff80\020\uff80\021\uff80\024\uff80\025" +
    "\uff80\026\uff80\027\uff80\030\uff80\031\uff80\032\uff80\033\uff80" +
    "\034\uff80\041\uff80\046\uff80\076\uff80\104\uff80\105\uff80\001" +
    "\002\000\004\076\u0103\001\002\000\006\057\uffcc\112\uffcc" +
    "\001\002\000\006\057\uffcb\112\uffcb\001\002\000\024\004" +
    "\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb" +
    "\046\uffeb\076\uffeb\001\002\000\004\056\u0107\001\002\000" +
    "\004\057\u0108\001\002\000\004\045\u0109\001\002\000\040" +
    "\003\244\004\051\020\240\021\104\024\236\027\222\030" +
    "\230\031\232\032\243\033\245\034\221\041\225\076\113" +
    "\104\114\105\251\001\002\000\042\003\244\004\051\020" +
    "\240\021\104\024\236\027\222\030\230\031\232\032\243" +
    "\033\245\034\221\041\225\046\u010b\076\113\104\114\105" +
    "\251\001\002\000\024\004\uffc3\005\uffc3\006\uffc3\007\uffc3" +
    "\010\uffc3\011\uffc3\012\uffc3\046\uffc3\076\uffc3\001\002\000" +
    "\004\014\u010d\001\002\000\004\042\u010e\001\002\000\010" +
    "\013\ufff2\015\ufff2\023\ufff2\001\002\000\004\042\u0110\001" +
    "\002\000\010\013\uffc2\015\uffc2\023\uffc2\001\002\000\004" +
    "\002\001\001\002\000\010\013\ufff6\015\ufff6\023\ufff6\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0110\000\016\002\004\003\003\004\012\007\010\036" +
    "\007\061\005\001\001\000\010\007\010\036\007\061\u0111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\015\012\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\016\001\001\000\002\001\001" +
    "\000\004\010\020\001\001\000\004\063\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\064\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\011\046\014\035" +
    "\015\044\024\041\025\037\030\043\035\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\014\035\015" +
    "\044\024\041\025\037\030\206\035\040\001\001\000\002" +
    "\001\001\000\004\015\051\001\001\000\002\001\001\000" +
    "\004\063\053\001\001\000\014\016\062\020\060\026\063" +
    "\037\061\055\056\001\001\000\010\022\204\023\110\033" +
    "\114\001\001\000\012\017\176\022\177\023\110\033\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\071\055\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\063\066\001" +
    "\001\000\002\001\001\000\004\056\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\022\105\023\110\033" +
    "\114\034\115\056\077\057\172\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\022\105\023\110\033\114\034" +
    "\115\056\077\057\117\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\022\171\023\110\033" +
    "\114\001\001\000\010\022\167\023\110\033\114\001\001" +
    "\000\004\023\163\001\001\000\002\001\001\000\004\062" +
    "\137\001\001\000\002\001\001\000\010\022\162\023\110" +
    "\033\114\001\001\000\006\020\160\055\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\022\122\023\110\033\114" +
    "\001\001\000\004\062\137\001\001\000\010\022\152\023" +
    "\110\033\114\001\001\000\010\022\151\023\110\033\114" +
    "\001\001\000\010\022\150\023\110\033\114\001\001\000" +
    "\010\022\147\023\110\033\114\001\001\000\010\022\146" +
    "\023\110\033\114\001\001\000\002\001\001\000\010\022" +
    "\145\023\110\033\114\001\001\000\010\022\144\023\110" +
    "\033\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\022\143\023\110\033\114\001\001" +
    "\000\010\022\142\023\110\033\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\062\137\001\001\000\004" +
    "\062\137\001\001\000\004\062\137\001\001\000\004\062" +
    "\137\001\001\000\004\062\137\001\001\000\004\062\137" +
    "\001\001\000\004\062\137\001\001\000\004\062\137\001" +
    "\001\000\004\062\137\001\001\000\002\001\001\000\012" +
    "\022\105\023\110\033\114\034\155\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\055\070" +
    "\001\001\000\002\001\001\000\004\062\137\001\001\000" +
    "\002\001\001\000\012\022\105\023\110\033\114\034\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\062" +
    "\137\001\001\000\002\001\001\000\004\062\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\063\175\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\062\137" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\062\137\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\212\032\213\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\u0101\001\001\000\004\063" +
    "\216\001\001\000\002\001\001\000\036\006\236\013\225" +
    "\014\226\023\234\027\240\033\245\040\241\042\223\043" +
    "\222\047\246\050\232\053\247\054\233\060\230\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\006\236\013\256\014\226\023\234\027\240\033\245" +
    "\040\241\043\222\047\246\050\232\053\247\054\233\060" +
    "\230\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\315" +
    "\055\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\022\272\023\110\033\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\022\252\023\110\033" +
    "\114\001\001\000\004\062\137\001\001\000\002\001\001" +
    "\000\036\006\236\013\225\014\226\023\234\027\240\033" +
    "\245\040\241\042\255\043\222\047\246\050\232\053\247" +
    "\054\233\060\230\001\001\000\034\006\236\013\256\014" +
    "\226\023\234\027\240\033\245\040\241\043\222\047\246" +
    "\050\232\053\247\054\233\060\230\001\001\000\002\001" +
    "\001\000\004\041\261\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\006\236\013\225\014\226\023\234\027" +
    "\240\033\245\040\241\042\263\043\222\047\246\050\232" +
    "\053\247\054\233\060\230\001\001\000\034\006\236\013" +
    "\256\014\226\023\234\027\240\033\245\040\241\043\222" +
    "\047\246\050\232\053\247\054\233\060\230\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\062" +
    "\137\001\001\000\002\001\001\000\004\023\275\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\044\300\045" +
    "\302\001\001\000\006\045\310\046\306\001\001\000\010" +
    "\022\303\023\110\033\114\001\001\000\002\001\001\000" +
    "\004\062\137\001\001\000\036\006\236\013\225\014\226" +
    "\023\234\027\240\033\245\040\241\042\305\043\222\047" +
    "\246\050\232\053\247\054\233\060\230\001\001\000\034" +
    "\006\236\013\256\014\226\023\234\027\240\033\245\040" +
    "\241\043\222\047\246\050\232\053\247\054\233\060\230" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\006\236\013\225\014\226\023\234\027\240" +
    "\033\245\040\241\042\312\043\222\047\246\050\232\053" +
    "\247\054\233\060\230\001\001\000\034\006\236\013\256" +
    "\014\226\023\234\027\240\033\245\040\241\043\222\047" +
    "\246\050\232\053\247\054\233\060\230\001\001\000\002" +
    "\001\001\000\010\022\320\023\110\033\114\001\001\000" +
    "\004\055\070\001\001\000\010\022\317\023\110\033\114" +
    "\001\001\000\004\062\137\001\001\000\004\062\137\001" +
    "\001\000\036\006\236\013\225\014\226\023\234\027\240" +
    "\033\245\040\241\042\322\043\222\047\246\050\232\053" +
    "\247\054\233\060\230\001\001\000\034\006\236\013\256" +
    "\014\226\023\234\027\240\033\245\040\241\043\222\047" +
    "\246\050\232\053\247\054\233\060\230\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\022\326\023\110\033" +
    "\114\001\001\000\004\062\137\001\001\000\002\001\001" +
    "\000\010\022\331\023\110\033\114\001\001\000\004\062" +
    "\137\001\001\000\002\001\001\000\036\006\236\013\225" +
    "\014\226\023\234\027\240\033\245\040\241\042\334\043" +
    "\222\047\246\050\232\053\247\054\233\060\230\001\001" +
    "\000\034\006\236\013\256\014\226\023\234\027\240\033" +
    "\245\040\241\043\222\047\246\050\232\053\247\054\233" +
    "\060\230\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\022\340\023\110\033\114\001\001\000\004\062\137" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\023\346\051\347\001\001\000\004\015\367" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\022" +
    "\351\023\110\033\114\001\001\000\004\062\137\001\001" +
    "\000\010\006\353\023\354\031\355\001\001\000\002\001" +
    "\001\000\010\020\315\052\362\055\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\006\236\013\225\014" +
    "\226\023\234\027\240\033\245\040\241\042\360\043\222" +
    "\047\246\050\232\053\247\054\233\060\230\001\001\000" +
    "\034\006\236\013\256\014\226\023\234\027\240\033\245" +
    "\040\241\043\222\047\246\050\232\053\247\054\233\060" +
    "\230\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\022\366\023\110\033" +
    "\114\001\001\000\004\062\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\022\372\023\110\033\114\001" +
    "\001\000\004\062\137\001\001\000\004\023\374\001\001" +
    "\000\002\001\001\000\004\023\376\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\006\236\013\225\014\226\023\234\027\240\033\245\040" +
    "\241\042\u0109\043\222\047\246\050\232\053\247\054\233" +
    "\060\230\001\001\000\034\006\236\013\256\014\226\023" +
    "\234\027\240\033\245\040\241\043\222\047\246\050\232" +
    "\053\247\054\233\060\230\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoG$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoG$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoG$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible

    public void syntax_error(Symbol s){
        TablaErrores.insertarError("Error Sintactico: "+s.value.toString()+" ",s.right,s.left);
        System.out.println(s.value.toString()+" Fila: " +s.right+", Columna: "+s.left);
        HTML.mostrarErrores();
    }

    public void unrecovered_syntax_error(Symbol s){        
        TablaErrores.insertarError("Error Sintactico: "+s.value.toString()+" ",s.right,s.left);
        System.out.println(s.value.toString()+" Fila: " +s.right+", Columna: "+s.left);
        HTML.mostrarErrores();
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoG$actions {

//Codigo de acciones
      

  private final SintacticoG parser;

  /** Constructor */
  CUP$SintacticoG$actions(SintacticoG parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoG$do_action_part00000000(
    int                        CUP$SintacticoG$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoG$parser,
    java.util.Stack            CUP$SintacticoG$stack,
    int                        CUP$SintacticoG$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoG$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoG$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoG$parser.done_parsing();
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= ENC LALS 
            {
              Nodo RESULT =null;
		
        System.out.println("Archivo finalizado");
        
    
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // TVISIBILIDAD ::= privado 
            {
              String RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("TVISIBILIDAD",50, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // TVISIBILIDAD ::= publico 
            {
              String RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("TVISIBILIDAD",50, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TVISIBILIDAD ::= protegido 
            {
              String RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("TVISIBILIDAD",50, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VISIBILIDAD ::= dospuntos TVISIBILIDAD 
            {
              String RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",49, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VISIBILIDAD ::= 
            {
              String RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",49, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ASIGNACION ::= LID igual EXP 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ASIGNACION",4, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ASIGNACION ::= LID ARR igual EXP 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ASIGNACION",4, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ENC ::= LENCABEZADO 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ENC",2, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ENC ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ENC",2, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LENCABEZADO ::= LENCABEZADO ENCABEZADO 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LENCABEZADO",1, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LENCABEZADO ::= ENCABEZADO 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LENCABEZADO",1, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ENCABEZADO ::= IMPORTAR 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",47, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ENCABEZADO ::= INCLUIR 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",47, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IMPORTAR ::= importar id gk pregc 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("IMPORTAR",5, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LALS ::= LALS ALS 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LALS",3, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LALS ::= ALS 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LALS",3, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ALS ::= als id HEREDA VISIBILIDAD llavea CUERPOALS llavec 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ALS",8, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CUERPOALS ::= CUERPOALS SENTALS 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("CUERPOALS",7, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CUERPOALS ::= SENTALS 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("CUERPOALS",7, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTALS ::= DECFUN 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTALS",22, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTALS ::= DECLARACION pregc 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTALS",22, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTALS ::= INICIO 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTALS",22, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // HEREDA ::= hereda id 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("HEREDA",6, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // HEREDA ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("HEREDA",6, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= var TVAR id VISIBILIDAD DEC2 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DEC2 ::= IDL 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("DEC2",20, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DEC2 ::= ASIG 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("DEC2",20, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DEC2 ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("DEC2",20, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IDL ::= IDL coma id VISIBILIDAD 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("IDL",29, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IDL ::= coma id VISIBILIDAD 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("IDL",29, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ASIG ::= igual VALASIG 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ASIG",12, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ASIG ::= ARR ASIGARR 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ASIG",12, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ASIGARR ::= igual LLLAVE 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ASIGARR",15, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ASIGARR ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ASIGARR",15, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LLLAVE ::= LLLAVE coma llavea LLAVE llavec 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LLLAVE",44, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LLLAVE ::= llavea LLAVE llavec 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LLLAVE",44, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LLAVE ::= LLLAVE 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LLAVE",45, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LLAVE ::= LPFUN 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LLAVE",45, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VALASIG ::= EXP 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("VALASIG",13, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VALASIG ::= nuevo id parentesisa parentesisc 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("VALASIG",13, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LID ::= LID punto id 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LID",17, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LID ::= id 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LID",17, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECFUN ::= TFUN id parentesisa PDECFUN parentesisc VISIBILIDAD llavea CUERPO llavec 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("DECFUN",18, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TVAR ::= tentero 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("TVAR",11, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TVAR ::= tdecimal 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("TVAR",11, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TVAR ::= tcaracter 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("TVAR",11, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TVAR ::= tcadena 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("TVAR",11, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TVAR ::= tbool 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("TVAR",11, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TVAR ::= id 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("TVAR",11, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TFUN ::= TVAR 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("TFUN",19, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TFUN ::= tvacio 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("TFUN",19, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PDECFUN ::= PDECFUN coma TVAR id 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("PDECFUN",24, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PDECFUN ::= TVAR id 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("PDECFUN",24, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PDECFUN ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("PDECFUN",24, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // RETORNAR ::= retornar EXP 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("RETORNAR",21, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LLAMADO ::= llamar LID parentesisa LPFUN parentesisc 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LLAMADO",25, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LLAMADO ::= llamarhk id parentesisa LPFUN parentesisc 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LLAMADO",25, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LPFUN ::= LPFUN coma EXP 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LPFUN",26, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LPFUN ::= EXP 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LPFUN",26, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LPFUN ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LPFUN",26, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INICIO ::= tvacio inicio parentesisa parentesisc llavea CUERPO llavec 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("INICIO",27, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // INCLUIR ::= incluirhk id pregc 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("INCLUIR",28, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SI ::= si parentesisa EXP parentesisc llavea CUERPO llavec SINO 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SI",30, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SINO ::= sino llavea CUERPO llavec 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SINO",31, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SINO ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SINO",31, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SELECCION ::= seleccion parentesisa LID parentesisc llavea LCASO DEFECTO llavec 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SELECCION",33, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LCASO ::= LCASO CASO 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LCASO",34, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LCASO ::= CASO 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("LCASO",34, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CASO ::= caso EXP dospuntos CUERPO 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("CASO",35, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DEFECTO ::= defecto dospuntos CUERPO 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("DEFECTO",36, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DEFECTO ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("DEFECTO",36, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PARA ::= para parentesisa VARPARA dospuntos EXP dospuntos POSTERIOR parentesisc llavea CUERPO llavec 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("PARA",38, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-10)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VARPARA ::= var TVAR id igual EXP 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("VARPARA",39, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VARPARA ::= LID igual EXP 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("VARPARA",39, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // POSTERIOR ::= LID OPPARA 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("POSTERIOR",23, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // POSTERIOR ::= ASIGNACION 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("POSTERIOR",23, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPPARA ::= masmas 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("OPPARA",40, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPPARA ::= menosmenos 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("OPPARA",40, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // MIENTRAS ::= mientras parentesisa EXP parentesisc llavea CUERPO llavec 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("MIENTRAS",41, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // HACERMIENTRAS ::= hacer llavea CUERPO llavec mientras parentesisa EXP parentesisc 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("HACERMIENTRAS",42, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ARR ::= ARR DIM 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ARR",14, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ARR ::= DIM 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("ARR",14, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DIM ::= corchetea EXP corchetec 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("DIM",43, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= EXP suma EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.suma,op1,op2);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP ::= EXP resta EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.resta,op1,op2);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP ::= EXP mult EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.mult,op1,op2);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP ::= EXP div EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.div,op1,op2);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP ::= EXP potencia EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.pot,op1,op2);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP ::= EXP o EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.o,op1,op2);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP ::= EXP y EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.y,op1,op2);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP ::= EXP xor EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.xor,op1,op2);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP ::= EXP OPREL EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)).value;
		int oprelleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int oprelright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		String oprel = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(oprel,op1,op2);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP ::= not EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.not,op1);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP ::= resta EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.resta,op1);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP ::= parentesisa EXP parentesisc 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)).value;
		RESULT=exp;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP ::= LLAMADO 
            {
              Nodo RESULT =null;
		int llamadoleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int llamadoright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo llamado = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = llamado;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXP ::= num 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(num);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXP ::= cadena 
            {
              Nodo RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(cadena);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXP ::= caracter 
            {
              Nodo RESULT =null;
		int caracterleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int caracterright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		String caracter = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(caracter);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXP ::= LID 
            {
              Nodo RESULT =null;
		int lidleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		Nodo lid = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = lid;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXP ::= LID ARR 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXP ::= decimal 
            {
              Nodo RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(dec);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXP ::= verdadero 
            {
              Nodo RESULT =null;
		int verdaderoleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int verdaderoright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		String verdadero = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(verdadero);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXP ::= falso 
            {
              Nodo RESULT =null;
		int falsoleft = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).left;
		int falsoright = ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()).right;
		String falso = (String)((java_cup.runtime.Symbol) CUP$SintacticoG$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(falso);
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OPREL ::= mayor 
            {
              String RESULT =null;
		RESULT = Constante.mayor;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("OPREL",48, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OPREL ::= menor 
            {
              String RESULT =null;
		RESULT = Constante.menor;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("OPREL",48, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OPREL ::= mayorigual 
            {
              String RESULT =null;
		RESULT = Constante.mayorigual;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("OPREL",48, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OPREL ::= menorigual 
            {
              String RESULT =null;
		RESULT = Constante.menorigual;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("OPREL",48, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OPREL ::= igualacion 
            {
              String RESULT =null;
		RESULT = Constante.igualacion;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("OPREL",48, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OPREL ::= distinto 
            {
              String RESULT =null;
		RESULT = Constante.distinto;
              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("OPREL",48, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CUERPO ::= CUERPO SENTENCIA 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("CUERPO",32, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CUERPO ::= SENTENCIA 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("CUERPO",32, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SENTENCIA ::= ASIGNACION pregc 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SENTENCIA ::= DECLARACION pregc 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SENTENCIA ::= RETORNAR pregc 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SENTENCIA ::= LLAMADO pregc 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SENTENCIA ::= SI 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SENTENCIA ::= SELECCION 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SENTENCIA ::= PARA 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SENTENCIA ::= MIENTRAS 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SENTENCIA ::= HACERMIENTRAS 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SENTENCIA ::= IMPRIMIR 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // SENTENCIA ::= GRAPHIKAR 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // SENTENCIA ::= continuar pregc 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // SENTENCIA ::= terminar pregc 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // SENTENCIA ::= error pregc 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("SENTENCIA",9, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // IMPRIMIR ::= imprimir parentesisa EXP parentesisc pregc 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",46, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // GRAPHIKAR ::= graphikar parentesisa LID coma LID parentesisc pregc 
            {
              Nodo RESULT =null;

              CUP$SintacticoG$result = parser.getSymbolFactory().newSymbol("GRAPHIKAR",37, ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.elementAt(CUP$SintacticoG$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoG$stack.peek()), RESULT);
            }
          return CUP$SintacticoG$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoG$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoG$do_action(
    int                        CUP$SintacticoG$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoG$parser,
    java.util.Stack            CUP$SintacticoG$stack,
    int                        CUP$SintacticoG$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoG$do_action_part00000000(
                               CUP$SintacticoG$act_num,
                               CUP$SintacticoG$parser,
                               CUP$SintacticoG$stack,
                               CUP$SintacticoG$top);
    }
}

}
