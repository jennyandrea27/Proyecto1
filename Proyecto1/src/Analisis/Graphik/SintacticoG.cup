package Analisis.Graphik;

import java_cup.runtime.Symbol;
import Extras.*;
import Analisis.*;
import Reportes.*;

parser code
{://Codigo visible

    public void syntax_error(Symbol s){
        TablaErrores.insertarError("Error Sintactico: "+s.value.toString()+" ",s.right,s.left);
        System.out.println(s.value.toString()+" Fila: " +s.right+", Columna: "+s.left);
        HTML.mostrarErrores();
    }

    public void unrecovered_syntax_error(Symbol s){        
        TablaErrores.insertarError("Error Sintactico: "+s.value.toString()+" ",s.right,s.left);
        System.out.println(s.value.toString()+" Fila: " +s.right+", Columna: "+s.left);
        HTML.mostrarErrores();
    }

:}

action code
{://Codigo de acciones
      
:}
    
terminal String var, tentero, tcadena, tdecimal, tcaracter, tvacio, tbool, importar, gk, als, hereda, nuevo, retornar, llamar, inicio, incluirhk;                
terminal String seleccion, caso, defecto, para, mientras, hacer, continuar, terminar, graphikar, datos, columna, procesar, dondecada;               
terminal String imprimir, pregc, dospuntos, igual, llavea, llavec, masmas, menosmenos, suma, resta, mult, div, potencia, parentesisa, parentesisc;
terminal String mayor, menor, igualacion, distinto, o, y, xor, not, punto, corchetea, corchetec,  decimal, num, cadena, id,caracter;
terminal String mayorigual, menorigual, dondetodo, donde, llamarhk, si, sino, publico, protegido, privado,coma,verdadero, falso;

nonterminal Nodo S,LENCABEZADO, ENC, LALS, ASIGNACION, IMPORTAR, HEREDA, CUERPOALS,ALS,SENTENCIA;
nonterminal Nodo DECLARACION, ASIG, VALASIG, ARR,  ASIGARR, EXP, LID, DECFUN, DEC2,RETORNAR, SENTALS, POSTERIOR;
nonterminal Nodo PDECFUN, LLAMADO, LPFUN, INICIO, INCLUIR, IDL, SI, SINO, CUERPO, SELECCION, LCASO, CASO,DEFECTO,GRAPHIKAR;
nonterminal Nodo PARA, VARPARA, OPPARA, MIENTRAS,HACERMIENTRAS, DIM, LLLAVE,LLAVE,IMPRIMIR,ENCABEZADO;
nonterminal String OPREL;
nonterminal Integer VISIBILIDAD,TVISIBILIDAD,TVAR,TFUN;
precedence left o;
precedence left xor;
precedence left y;
precedence right not;

precedence left mayor, menor, mayorigual,menorigual, distinto, igualacion;
precedence left suma, resta;
precedence left mult, div; 
precedence right potencia;
precedence right masmas, menosmenos;

start with S;

S ::=   ENC:enc LALS:lals
    {:
        System.out.println("Archivo finalizado");
        SemanticoGraphik.raiz=Fabrica.crearNodoGraphik(enc,lals);
        SemanticoGraphik.graficar();
    :};

TVISIBILIDAD::= privado:privado{:RESULT = Constante.privado;:}
                             | publico:publico{:RESULT = Constante.publico;:}
                             | protegido:protegido{:RESULT = Constante.protegido;:};
VISIBILIDAD ::=  dospuntos TVISIBILIDAD:tvisibilidad{:RESULT = tvisibilidad;:}
                              |{:RESULT = Constante.publico;:};
ASIGNACION ::= LID:lid igual EXP:exp{:RESULT = Fabrica.crearNodoAsignacion(lid,exp,null);:}
                               | LID:lid ARR:arr igual EXP:exp{:RESULT = Fabrica.crearNodoAsignacion(lid,exp,arr);:};
ENC ::= LENCABEZADO:encabezado{:RESULT = encabezado;:}
            |{:RESULT=Fabrica.crearNodoEnc(null);:};
LENCABEZADO ::= LENCABEZADO:encabezado ENCABEZADO:enc{:RESULT = Fabrica.insertarEnc(encabezado,enc);:}
                            |ENCABEZADO:enc{:RESULT = Fabrica.crearNodoEnc(enc);:};
ENCABEZADO ::= IMPORTAR:importar{:RESULT = importar;:}
                                | INCLUIR:incluir {:RESULT = incluir;:};
IMPORTAR ::= importar id:id gk pregc
                         {:
                            Nodo id_imp = Fabrica.crearNodoHoja(Constante.id,id);
                            RESULT = Fabrica.crearNodoImportar(id_imp);
                         :};
LALS ::= LALS:lals ALS:als{:RESULT = Fabrica.insertarALS(lals,als);:}
             | ALS:als{:RESULT = Fabrica.crearNodoLALS(als);:};
ALS ::= als id HEREDA:hereda VISIBILIDAD:visibilidad llavea CUERPOALS:cuerpo llavec{:RESULT = Fabrica.crearNodoALS(hereda,visibilidad,cuerpo);:};
CUERPOALS ::= CUERPOALS:cuerpo SENTALS:sent{:RESULT = Fabrica.insertarSentencia(cuerpo,sent);:}
                         | SENTALS:sent{:RESULT = Fabrica.crearNodoCuerpo(sent);:};
SENTALS ::= DECFUN:decfun{:RESULT = decfun;:}
                        | DECLARACION:dec  pregc{:RESULT = dec;:}
                        | INICIO:inicio{:RESULT = inicio;:};
HEREDA ::= hereda id:id{:RESULT = Fabrica.crearNodoHereda(id);:}
                     |{:RESULT = Fabrica.crearNodoHereda("");:};
DECLARACION ::= var TVAR:tvar id:id VISIBILIDAD:visibilidad DEC2:dec2{:RESULT = Fabrica.crearNodoDeclaracion(tvar,id,visibilidad,dec2);:};
DEC2 ::= IDL:idl{:RESULT=idl;:}
                | ASIG:asig {:RESULT = asig;:}
                |{:RESULT = null;:};
IDL ::= IDL:idl coma id:id VISIBILIDAD:visibilidad
                {:
                Nodo id1=Fabrica.crearNodoHoja(Constante.id,id); 
                id1.setVisibilidad(visibilidad);
                RESULT = Fabrica.insertarIDL(idl,id1);
                :}
            | coma id:id VISIBILIDAD:visibilidad
                {:
                Nodo id1=Fabrica.crearNodoHoja(Constante.id,id);
                id1.setVisibilidad(visibilidad);
                RESULT = Fabrica.crearNodoIDL(id1);
                :};
ASIG ::= igual VALASIG:valasig{:RESULT = valasig;:}
              | ARR ASIGARR{:RESULT = null;:}; //->>>>>>>>>>>>>>>>>>>>>>>>>>> ASIGNACION DE ARREGLO
ASIGARR ::= igual LLLAVE
                      | ;
LLLAVE ::= LLLAVE coma llavea LLAVE llavec
                     | llavea LLAVE llavec;                     
LLAVE ::= LLLAVE
                    | LPFUN;
VALASIG ::= EXP:exp{:RESULT = exp;:}
                       | nuevo id:id parentesisa parentesisc {:RESULT = Fabrica.crearNodoNuevo(id);:};
LID ::= LID:lid punto id:id
                {:
                    Nodo id1=Fabrica.crearNodoHoja(Constante.id,id);
                    RESULT = Fabrica.insertarIDL(lid,id1);
                 :}
                |  id:id  
                {:
                    Nodo id1=Fabrica.crearNodoHoja(Constante.id,id);
                    RESULT = Fabrica.crearNodoIDL(id1);
                 :};
DECFUN ::= TFUN:tfun id:id parentesisa PDECFUN:pdecfun parentesisc VISIBILIDAD:visibilidad llavea CUERPO:cuerpo llavec
                    {:RESULT = Fabrica.crearNodoDecFun(tfun,id,pdecfun,visibilidad,cuerpo);:};
TVAR ::= tentero{:RESULT = Constante.tnum;:}
                | tdecimal  {:RESULT = Constante.tdecimal;:}
                | tcaracter{:RESULT = Constante.tcaracter;:}
                | tcadena{:RESULT = Constante.tcadena;:}
                | tbool{:RESULT = Constante.tbool;:}
                | id{:RESULT = Constante.tid;:};
TFUN ::= TVAR:tvar{:RESULT = tvar;:}
               | tvacio{:RESULT = Constante.tvacio;:};
PDECFUN ::= PDECFUN:pdecfun coma TVAR:tvar id:id
                        {:
                        Nodo par=Fabrica.crearNodoHoja(Constante.id,id,tvar);
                        RESULT= Fabrica.insertarPar(pdecfun,par);
                        :}
                        | TVAR:tvar id:id
                        {:
                        Nodo par=Fabrica.crearNodoHoja(Constante.id,id,tvar);
                        RESULT= Fabrica.crearNodoLPAR(par);
                        :}
                        |{:RESULT= Fabrica.crearNodoLPAR(null);:};
RETORNAR ::= retornar EXP;
LLAMADO ::= llamar LID parentesisa LPFUN parentesisc
                         | llamarhk id parentesisa LPFUN parentesisc;
LPFUN ::= LPFUN coma EXP
                 | EXP
                 |;
INICIO ::= tvacio inicio parentesisa parentesisc llavea CUERPO:cuerpo llavec{:RESULT = Fabrica.crearNodoInicio(cuerpo);:};
INCLUIR ::= incluirhk id:id pregc
                    {:
                        Nodo id_inc = Fabrica.crearNodoHoja(Constante.id, id);
                        RESULT = Fabrica.crearNodoIncluir(id_inc);
                    :};
SI ::= si parentesisa EXP parentesisc llavea CUERPO llavec SINO;
SINO ::= sino llavea CUERPO llavec
             | ;
SELECCION ::= seleccion parentesisa LID parentesisc llavea LCASO DEFECTO llavec;
LCASO ::= LCASO CASO
                 | CASO;
CASO ::= caso EXP dospuntos CUERPO;
DEFECTO ::= defecto dospuntos CUERPO
                        |;
PARA ::= para parentesisa VARPARA dospuntos EXP dospuntos POSTERIOR parentesisc llavea CUERPO llavec;
VARPARA::= var TVAR id igual EXP  
                     | LID igual EXP;
POSTERIOR ::= LID OPPARA
                           |ASIGNACION;
OPPARA ::= masmas
                     | menosmenos;
MIENTRAS ::= mientras parentesisa EXP parentesisc llavea CUERPO llavec;
HACERMIENTRAS ::= hacer llavea CUERPO llavec mientras parentesisa EXP parentesisc;
ARR ::= ARR DIM
             | DIM;
DIM ::= corchetea EXP corchetec;
EXP ::= EXP:op1 suma EXP:op2{:RESULT=Fabrica.crearNodoOperacion(Constante.suma,op1,op2);:}
             | EXP:op1 resta EXP:op2 {:RESULT=Fabrica.crearNodoOperacion(Constante.resta,op1,op2);:}
             | EXP:op1 mult EXP:op2 {:RESULT=Fabrica.crearNodoOperacion(Constante.mult,op1,op2);:}             
             | EXP:op1 div EXP:op2 {:RESULT=Fabrica.crearNodoOperacion(Constante.div,op1,op2);:}                          
             | EXP:op1 potencia EXP:op2 {:RESULT=Fabrica.crearNodoOperacion(Constante.pot,op1,op2);:}             
             | EXP:op1 o EXP:op2 {:RESULT=Fabrica.crearNodoOperacion(Constante.o,op1,op2);:}   
             | EXP:op1 y EXP:op2 {:RESULT=Fabrica.crearNodoOperacion(Constante.y,op1,op2);:}   
             | EXP:op1 xor EXP:op2 {:RESULT=Fabrica.crearNodoOperacion(Constante.xor,op1,op2);:}   
             | EXP:op1 OPREL:oprel EXP:op2 {:RESULT=Fabrica.crearNodoOperacion(oprel,op1,op2);:}   
             | not EXP:op1 {:RESULT=Fabrica.crearNodoOperacion(Constante.not,op1);:}             
             | resta EXP:op1 {:RESULT=Fabrica.crearNodoOperacion(Constante.resta,op1);:}             
             | parentesisa EXP:exp parentesisc {:RESULT=exp;:}            
             | LLAMADO:llamado{:RESULT = llamado;:}
             | num:num {:RESULT = Fabrica.crearNodoHoja(Constante.num,num,Constante.tnum);:}
             | cadena:cadena {:RESULT = Fabrica.crearNodoHoja(Constante.cadena,cadena,Constante.tcadena);:}
             | caracter:caracter {:RESULT = Fabrica.crearNodoHoja(Constante.caracter,caracter,Constante.tcaracter);:}
             | LID:lid{:RESULT = lid;:}
             | LID ARR
             | decimal:dec{:RESULT = Fabrica.crearNodoHoja(Constante.decimal,dec,Constante.tdecimal);:}
             | verdadero:verdadero {:RESULT = Fabrica.crearNodoHoja(Constante.bool,Constante.verdadero,Constante.tbool);:}
             | falso:falso {:RESULT = Fabrica.crearNodoHoja(Constante.bool,Constante.falso,Constante.tbool);:};

OPREL ::= mayor {:RESULT = Constante.mayor;:}
                    | menor{:RESULT = Constante.menor;:}
                    | mayorigual{:RESULT = Constante.mayorigual;:}
                    | menorigual{:RESULT = Constante.menorigual;:}
                    | igualacion{:RESULT = Constante.igualacion;:}
                    | distinto{:RESULT = Constante.distinto;:};

CUERPO ::= CUERPO:cuerpo SENTENCIA:sent {:RESULT = Fabrica.insertarSentencia(cuerpo,sent);:}
                     | SENTENCIA:sent {:RESULT=Fabrica.crearNodoCuerpo(sent);:};

SENTENCIA ::= ASIGNACION:asignacion pregc {:RESULT = asignacion;:}
                          | DECLARACION:declaracion pregc{:RESULT = declaracion;:}
                          | RETORNAR:retornar pregc{:RESULT = retornar;:}
                          | LLAMADO:llamado pregc{:RESULT = llamado;:}
                          | SI:si {:RESULT = si;:}
                          | SELECCION:seleccion{:RESULT = seleccion;:}
                          | PARA:para{:RESULT = para;:}
                          | MIENTRAS:mientras {:RESULT = mientras;:}
                          | HACERMIENTRAS:hacermientras{:RESULT = hacermientras;:}
                          | IMPRIMIR:imprimir{:RESULT = imprimir;:}
                          | GRAPHIKAR:graphikar {:RESULT = graphikar;:}
                          | continuar pregc
                          | terminar pregc;

IMPRIMIR ::= imprimir parentesisa EXP parentesisc pregc{:RESULT = null;:};

GRAPHIKAR ::= graphikar parentesisa LID coma LID parentesisc pregc{:RESULT = null;:};
