
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisis.HaskellTerminal;

import java_cup.runtime.Symbol;
import Extras.*;
import Analisis.*;
import Reportes.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoHT extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TSHT.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoHT() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoHT(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoHT(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\004\000\002\002\003\000\002\007" +
    "\006\000\002\003\010\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\005\000" +
    "\002\004\003\000\002\006\005\000\002\006\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\016" +
    "\005\000\002\017\005\000\002\017\003\000\002\020\003" +
    "\000\002\020\003\000\002\010\006\000\002\011\006\000" +
    "\002\012\006\000\002\013\006\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\005" +
    "\000\002\036\003\000\002\036\003\000\002\030\006\000" +
    "\002\031\006\000\002\023\006\000\002\024\006\000\002" +
    "\025\006\000\002\026\006\000\002\027\006\000\002\037" +
    "\006\000\002\014\005\000\002\021\005\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\033" +
    "\010\000\002\034\005\000\002\034\003\000\002\034\002" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\004\000\002\005\005\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\243\000\014\034\017\035\015\042\021\044\004\050" +
    "\012\001\002\000\036\002\ufffc\004\ufffc\005\ufffc\006\ufffc" +
    "\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc\034" +
    "\ufffc\040\ufffc\043\ufffc\047\ufffc\001\002\000\010\002\uffc2" +
    "\025\uffd1\032\uffd1\001\002\000\004\002\uffc7\001\002\000" +
    "\004\002\uffc8\001\002\000\004\002\245\001\002\000\004" +
    "\002\000\001\002\000\004\002\uffbf\001\002\000\010\002" +
    "\uffca\025\ufffd\032\ufffd\001\002\000\004\002\uffc9\001\002" +
    "\000\010\034\203\035\202\045\210\001\002\000\036\002" +
    "\ufffa\004\ufffa\005\ufffa\006\ufffa\025\ufffa\026\ufffa\027\ufffa" +
    "\030\ufffa\031\ufffa\032\ufffa\034\ufffa\040\ufffa\043\ufffa\047" +
    "\ufffa\001\002\000\040\007\236\010\113\011\115\012\110" +
    "\013\112\014\116\015\114\016\117\017\051\020\054\021" +
    "\052\022\053\023\055\024\111\042\056\001\002\000\010" +
    "\002\uffc6\025\uffd5\032\uffd5\001\002\000\036\002\ufffb\004" +
    "\ufffb\005\ufffb\006\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb" +
    "\031\ufffb\032\ufffb\034\ufffb\040\ufffb\043\ufffb\047\ufffb\001" +
    "\002\000\010\002\uffc4\025\uffd3\032\uffd3\001\002\000\004" +
    "\002\uffc1\001\002\000\004\002\uffcd\001\002\000\010\002" +
    "\uffc0\025\ufff8\032\ufff8\001\002\000\004\002\uffce\001\002" +
    "\000\004\002\uffcc\001\002\000\010\002\uffc3\025\uffd2\032" +
    "\uffd2\001\002\000\006\025\037\032\036\001\002\000\004" +
    "\002\uffcb\001\002\000\004\002\uffcf\001\002\000\004\002" +
    "\uffd0\001\002\000\010\002\uffc5\025\uffd4\032\uffd4\001\002" +
    "\000\004\034\203\001\002\000\012\034\040\035\015\042" +
    "\021\044\004\001\002\000\016\017\051\020\054\021\052" +
    "\022\053\023\055\042\056\001\002\000\036\002\uffd3\004" +
    "\uffd3\005\uffd3\006\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3" +
    "\031\uffd3\032\uffd3\034\uffd3\040\uffd3\043\uffd3\047\uffd3\001" +
    "\002\000\036\002\uffd4\004\uffd4\005\uffd4\006\uffd4\025\uffd4" +
    "\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\034\uffd4\040" +
    "\uffd4\043\uffd4\047\uffd4\001\002\000\036\002\uffd2\004\uffd2" +
    "\005\uffd2\006\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031" +
    "\uffd2\032\uffd2\034\uffd2\040\uffd2\043\uffd2\047\uffd2\001\002" +
    "\000\036\002\uffd7\004\uffd7\005\uffd7\006\uffd7\025\uffd7\026" +
    "\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\034\uffd7\040\uffd7" +
    "\043\uffd7\047\uffd7\001\002\000\036\002\ufffd\004\ufffd\005" +
    "\ufffd\006\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd" +
    "\032\ufffd\034\ufffd\040\ufffd\043\ufffd\047\ufffd\001\002\000" +
    "\036\002\uffd1\004\uffd1\005\uffd1\006\uffd1\025\uffd1\026\uffd1" +
    "\027\uffd1\030\uffd1\031\uffd1\032\uffd1\034\uffd1\040\uffd1\043" +
    "\uffd1\047\uffd1\001\002\000\036\002\uffd5\004\uffd5\005\uffd5" +
    "\006\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032" +
    "\uffd5\034\uffd5\040\uffd5\043\uffd5\047\uffd5\001\002\000\036" +
    "\002\ufff8\004\ufff8\005\ufff8\006\ufff8\025\ufff8\026\ufff8\027" +
    "\ufff8\030\ufff8\031\ufff8\032\ufff8\034\ufff8\040\ufff8\043\ufff8" +
    "\047\ufff8\001\002\000\012\034\040\035\015\042\021\044" +
    "\004\001\002\000\012\034\040\035\015\042\021\044\004" +
    "\001\002\000\012\034\040\035\015\042\021\044\004\001" +
    "\002\000\012\034\040\035\015\042\021\044\004\001\002" +
    "\000\012\034\040\035\015\042\021\044\004\001\002\000" +
    "\004\037\057\001\002\000\016\034\071\035\066\040\uffbb" +
    "\042\072\043\uffbb\044\060\001\002\000\014\025\ufffc\032" +
    "\ufffc\034\uffe5\040\uffe5\043\uffe5\001\002\000\010\034\uffa1" +
    "\040\uffa1\043\uffa1\001\002\000\010\034\uffa2\040\uffa2\043" +
    "\uffa2\001\002\000\014\025\ufffd\032\ufffd\034\uffe6\040\uffe6" +
    "\043\uffe6\001\002\000\010\034\uffe8\040\uffe8\043\uffe8\001" +
    "\002\000\010\034\uffe0\040\uffe0\043\uffe0\001\002\000\010" +
    "\034\203\035\202\045\210\001\002\000\014\025\ufffa\032" +
    "\ufffa\034\uffe3\040\uffe3\043\uffe3\001\002\000\010\034\uffe7" +
    "\040\uffe7\043\uffe7\001\002\000\036\010\113\011\115\012" +
    "\110\013\112\014\116\015\114\016\117\017\051\020\054" +
    "\021\052\022\053\023\055\024\111\042\056\001\002\000" +
    "\014\025\ufffb\032\ufffb\034\uffe4\040\uffe4\043\uffe4\001\002" +
    "\000\010\034\uff9e\040\uff9e\043\uff9e\001\002\000\010\034" +
    "\uffa0\040\uffa0\043\uffa0\001\002\000\010\034\uff9f\040\uff9f" +
    "\043\uff9f\001\002\000\014\025\ufff8\032\ufff8\034\uffe1\040" +
    "\uffe1\043\uffe1\001\002\000\010\034\uff9d\040\uff9d\043\uff9d" +
    "\001\002\000\006\040\104\043\105\001\002\000\010\034" +
    "\uffe9\040\uffe9\043\uffe9\001\002\000\010\034\uff9c\040\uff9c" +
    "\043\uff9c\001\002\000\006\040\uffbc\043\uffbc\001\002\000" +
    "\004\034\107\001\002\000\012\034\071\035\066\042\072" +
    "\044\060\001\002\000\006\040\uffbd\043\uffbd\001\002\000" +
    "\036\002\uffbe\004\uffbe\005\uffbe\006\uffbe\025\uffbe\026\uffbe" +
    "\027\uffbe\030\uffbe\031\uffbe\032\uffbe\034\uffbe\040\uffbe\043" +
    "\uffbe\047\uffbe\001\002\000\012\034\071\035\066\042\072" +
    "\044\060\001\002\000\012\034\040\035\015\042\021\044" +
    "\004\001\002\000\012\034\040\035\015\042\021\044\004" +
    "\001\002\000\024\027\141\034\071\035\015\041\135\042" +
    "\142\044\004\045\140\046\131\050\134\001\002\000\012" +
    "\034\040\035\015\042\021\044\004\001\002\000\012\034" +
    "\071\035\066\042\072\044\060\001\002\000\012\034\040" +
    "\035\015\042\021\044\004\001\002\000\012\034\040\035" +
    "\015\042\021\044\004\001\002\000\006\025\037\034\121" +
    "\001\002\000\032\002\uffde\004\uffde\005\uffde\006\uffde\026" +
    "\uffde\027\uffde\030\uffde\031\uffde\034\uffde\040\uffde\043\uffde" +
    "\047\uffde\001\002\000\006\025\037\034\123\001\002\000" +
    "\032\002\uffea\004\uffea\005\uffea\006\uffea\026\uffea\027\uffea" +
    "\030\uffea\031\uffea\034\uffea\040\uffea\043\uffea\047\uffea\001" +
    "\002\000\004\034\125\001\002\000\032\002\uffed\004\uffed" +
    "\005\uffed\006\uffed\026\uffed\027\uffed\030\uffed\031\uffed\034" +
    "\uffed\040\uffed\043\uffed\047\uffed\001\002\000\006\025\037" +
    "\034\127\001\002\000\032\002\uffdf\004\uffdf\005\uffdf\006" +
    "\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\034\uffdf\040\uffdf" +
    "\043\uffdf\047\uffdf\001\002\000\024\004\uffa9\005\uffa9\006" +
    "\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\034\uffa9\047\uffa9" +
    "\001\002\000\024\027\141\034\071\035\015\041\135\042" +
    "\142\044\004\045\140\046\131\050\134\001\002\000\024" +
    "\004\uffaa\005\uffaa\006\uffaa\026\uffaa\027\uffaa\030\uffaa\031" +
    "\uffaa\034\uffaa\047\uffaa\001\002\000\030\004\uffac\005\uffac" +
    "\006\uffac\025\ufffd\026\uffac\027\uffac\030\uffac\031\uffac\032" +
    "\ufffd\034\uffac\047\uffac\001\002\000\024\004\uffa3\005\uffa3" +
    "\006\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\034\uffa3\047" +
    "\uffa3\001\002\000\024\004\uffa6\005\uffa6\006\uffa6\026\uffa6" +
    "\027\uffa6\030\uffa6\031\uffa6\034\uffa6\047\uffa6\001\002\000" +
    "\024\004\uffab\005\uffab\006\uffab\026\uffab\027\uffab\030\uffab" +
    "\031\uffab\034\uffab\047\uffab\001\002\000\022\004\155\005" +
    "\156\006\160\026\154\027\153\030\157\031\161\034\171" +
    "\001\002\000\024\004\uffa5\005\uffa5\006\uffa5\026\uffa5\027" +
    "\uffa5\030\uffa5\031\uffa5\034\uffa5\047\uffa5\001\002\000\024" +
    "\027\141\034\071\035\015\041\135\042\142\044\004\045" +
    "\140\046\131\050\134\001\002\000\030\004\uffa4\005\uffa4" +
    "\006\uffa4\025\ufffb\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032" +
    "\ufffb\034\uffa4\047\uffa4\001\002\000\024\004\uffa8\005\uffa8" +
    "\006\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\034\uffa8\047" +
    "\uffa8\001\002\000\024\004\uffaf\005\uffaf\006\uffaf\026\uffaf" +
    "\027\uffaf\030\uffaf\031\uffaf\034\uffaf\047\uffaf\001\002\000" +
    "\024\004\uffb0\005\uffb0\006\uffb0\026\uffb0\027\uffb0\030\uffb0" +
    "\031\uffb0\034\uffb0\047\uffb0\001\002\000\030\004\uffa7\005" +
    "\uffa7\006\uffa7\025\ufff8\026\uffa7\027\uffa7\030\uffa7\031\uffa7" +
    "\032\ufff8\034\uffa7\047\uffa7\001\002\000\024\004\uffae\005" +
    "\uffae\006\uffae\026\uffae\027\uffae\030\uffae\031\uffae\034\uffae" +
    "\047\uffae\001\002\000\024\004\uffb1\005\uffb1\006\uffb1\026" +
    "\uffb1\027\uffb1\030\uffb1\031\uffb1\034\uffb1\047\uffb1\001\002" +
    "\000\024\004\uffad\005\uffad\006\uffad\026\uffad\027\uffad\030" +
    "\uffad\031\uffad\034\uffad\047\uffad\001\002\000\024\004\155" +
    "\005\156\006\160\026\uffb3\027\uffb3\030\157\031\161\034" +
    "\uffb3\047\uffb3\001\002\000\024\027\141\034\071\035\015" +
    "\041\135\042\142\044\004\045\140\046\131\050\134\001" +
    "\002\000\024\027\141\034\071\035\015\041\135\042\142" +
    "\044\004\045\140\046\131\050\134\001\002\000\024\027" +
    "\141\034\071\035\015\041\135\042\142\044\004\045\140" +
    "\046\131\050\134\001\002\000\024\027\141\034\071\035" +
    "\015\041\135\042\142\044\004\045\140\046\131\050\134" +
    "\001\002\000\024\027\141\034\071\035\015\041\135\042" +
    "\142\044\004\045\140\046\131\050\134\001\002\000\024" +
    "\027\141\034\071\035\015\041\135\042\142\044\004\045" +
    "\140\046\131\050\134\001\002\000\024\027\141\034\071" +
    "\035\015\041\135\042\142\044\004\045\140\046\131\050" +
    "\134\001\002\000\024\004\uffb7\005\156\006\160\026\uffb7" +
    "\027\uffb7\030\uffb7\031\uffb7\034\uffb7\047\uffb7\001\002\000" +
    "\024\004\uffb4\005\156\006\160\026\uffb4\027\uffb4\030\uffb4" +
    "\031\uffb4\034\uffb4\047\uffb4\001\002\000\024\004\uffb8\005" +
    "\156\006\160\026\uffb8\027\uffb8\030\uffb8\031\uffb8\034\uffb8" +
    "\047\uffb8\001\002\000\024\004\uffb5\005\156\006\160\026" +
    "\uffb5\027\uffb5\030\uffb5\031\uffb5\034\uffb5\047\uffb5\001\002" +
    "\000\024\004\uffb6\005\156\006\160\026\uffb6\027\uffb6\030" +
    "\uffb6\031\uffb6\034\uffb6\047\uffb6\001\002\000\024\004\155" +
    "\005\156\006\160\026\uffba\027\uffba\030\157\031\161\034" +
    "\uffba\047\uffba\001\002\000\024\004\155\005\156\006\160" +
    "\026\uffb9\027\uffb9\030\157\031\161\034\uffb9\047\uffb9\001" +
    "\002\000\034\002\uffff\004\uffff\005\uffff\006\uffff\026\uffff" +
    "\027\uffff\030\uffff\031\uffff\034\uffff\036\uffff\040\uffff\043" +
    "\uffff\047\uffff\001\002\000\022\004\155\005\156\006\160" +
    "\026\154\027\153\030\157\031\161\047\173\001\002\000" +
    "\024\004\uffb2\005\uffb2\006\uffb2\026\uffb2\027\uffb2\030\uffb2" +
    "\031\uffb2\034\uffb2\047\uffb2\001\002\000\006\025\037\034" +
    "\175\001\002\000\032\002\uffeb\004\uffeb\005\uffeb\006\uffeb" +
    "\026\uffeb\027\uffeb\030\uffeb\031\uffeb\034\uffeb\040\uffeb\043" +
    "\uffeb\047\uffeb\001\002\000\006\025\037\034\177\001\002" +
    "\000\032\002\uffd8\004\uffd8\005\uffd8\006\uffd8\026\uffd8\027" +
    "\uffd8\030\uffd8\031\uffd8\034\uffd8\040\uffd8\043\uffd8\047\uffd8" +
    "\001\002\000\004\034\201\001\002\000\032\002\uffec\004" +
    "\uffec\005\uffec\006\uffec\026\uffec\027\uffec\030\uffec\031\uffec" +
    "\034\uffec\040\uffec\043\uffec\047\uffec\001\002\000\006\034" +
    "\203\045\217\001\002\000\004\010\113\001\002\000\006" +
    "\036\ufff6\043\ufff6\001\002\000\006\036\212\043\211\001" +
    "\002\000\006\036\ufff5\043\ufff5\001\002\000\006\036\ufff3" +
    "\043\ufff3\001\002\000\006\036\ufff4\043\ufff4\001\002\000" +
    "\010\034\203\035\202\045\210\001\002\000\014\025\ufff9" +
    "\032\ufff9\034\uffe2\040\uffe2\043\uffe2\001\002\000\006\036" +
    "\ufff7\043\ufff7\001\002\000\006\036\221\043\220\001\002" +
    "\000\006\036\uffef\043\uffef\001\002\000\006\036\ufff0\043" +
    "\ufff0\001\002\000\006\036\uffee\043\uffee\001\002\000\006" +
    "\034\203\045\217\001\002\000\006\036\ufff2\043\ufff2\001" +
    "\002\000\006\036\ufff1\043\ufff1\001\002\000\006\025\037" +
    "\034\224\001\002\000\036\002\uffd9\004\uffd9\005\uffd9\006" +
    "\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9" +
    "\034\uffd9\040\uffd9\043\uffd9\047\uffd9\001\002\000\006\025" +
    "\037\034\226\001\002\000\036\002\uffdc\004\uffdc\005\uffdc" +
    "\006\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032" +
    "\uffdc\034\uffdc\040\uffdc\043\uffdc\047\uffdc\001\002\000\006" +
    "\025\037\034\230\001\002\000\036\002\uffda\004\uffda\005" +
    "\uffda\006\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda" +
    "\032\uffda\034\uffda\040\uffda\043\uffda\047\uffda\001\002\000" +
    "\006\025\037\034\232\001\002\000\036\002\uffdb\004\uffdb" +
    "\005\uffdb\006\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031" +
    "\uffdb\032\uffdb\034\uffdb\040\uffdb\043\uffdb\047\uffdb\001\002" +
    "\000\006\025\037\034\234\001\002\000\036\002\uffdd\004" +
    "\uffdd\005\uffdd\006\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd" +
    "\031\uffdd\032\uffdd\034\uffdd\040\uffdd\043\uffdd\047\uffdd\001" +
    "\002\000\032\002\uffd6\004\uffd6\005\uffd6\006\uffd6\026\uffd6" +
    "\027\uffd6\030\uffd6\031\uffd6\034\uffd6\040\uffd6\043\uffd6\047" +
    "\uffd6\001\002\000\004\042\237\001\002\000\004\033\240" +
    "\001\002\000\012\034\040\035\015\042\021\044\004\001" +
    "\002\000\006\025\037\034\242\001\002\000\004\002\ufffe" +
    "\001\002\000\006\036\244\043\211\001\002\000\036\002" +
    "\ufff9\004\ufff9\005\ufff9\006\ufff9\025\ufff9\026\ufff9\027\ufff9" +
    "\030\ufff9\031\ufff9\032\ufff9\034\ufff9\040\ufff9\043\ufff9\047" +
    "\ufff9\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\243\000\054\002\007\003\033\004\030\007\032\010" +
    "\025\011\023\012\026\013\031\014\012\021\013\022\015" +
    "\023\017\024\034\025\021\026\027\027\004\030\006\031" +
    "\005\033\024\035\010\037\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\242\007\205\015" +
    "\203\016\206\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\234\001\001\000\024\004" +
    "\043\014\044\022\015\023\046\024\041\025\040\026\042" +
    "\027\045\033\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\004\232\014\044\022\015\023\046" +
    "\024\041\025\040\026\042\027\045\033\047\001\001\000" +
    "\024\004\230\014\044\022\015\023\046\024\041\025\040" +
    "\026\042\027\045\033\047\001\001\000\024\004\226\014" +
    "\044\022\015\023\046\024\041\025\040\026\042\027\045" +
    "\033\047\001\001\000\024\004\224\014\044\022\015\023" +
    "\046\024\041\025\040\026\042\027\045\033\047\001\001" +
    "\000\024\004\222\014\044\022\015\023\046\024\041\025" +
    "\040\026\042\027\045\033\047\001\001\000\002\001\001" +
    "\000\056\004\030\007\100\010\074\011\072\012\076\013" +
    "\101\014\062\021\063\022\066\023\046\024\041\025\040" +
    "\026\042\027\045\030\061\031\060\032\064\033\075\034" +
    "\077\036\102\037\073\040\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\006\204\007\205" +
    "\015\203\016\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\004" +
    "\030\007\100\010\074\011\072\012\076\013\101\014\062" +
    "\021\063\022\066\023\046\024\041\025\040\026\042\027" +
    "\045\030\061\031\060\032\064\033\075\036\105\037\073" +
    "\040\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\004\030\007\100\010\074\011\072\012\076\013\101" +
    "\014\062\021\063\022\066\023\046\024\041\025\040\026" +
    "\042\027\045\030\061\031\060\032\064\033\075\036\177" +
    "\037\073\040\067\001\001\000\024\004\175\014\044\022" +
    "\015\023\046\024\041\025\040\026\042\027\045\033\047" +
    "\001\001\000\024\004\173\014\044\022\015\023\046\024" +
    "\041\025\040\026\042\027\045\033\047\001\001\000\050" +
    "\004\030\005\136\007\147\010\144\011\143\012\146\013" +
    "\150\014\132\021\135\022\015\023\046\024\041\025\040" +
    "\026\042\027\045\030\131\031\127\033\145\037\142\001" +
    "\001\000\024\004\125\014\044\022\015\023\046\024\041" +
    "\025\040\026\042\027\045\033\047\001\001\000\054\004" +
    "\030\007\100\010\074\011\072\012\076\013\101\014\062" +
    "\021\063\022\066\023\046\024\041\025\040\026\042\027" +
    "\045\030\061\031\060\032\064\033\075\036\123\037\073" +
    "\040\067\001\001\000\024\004\121\014\044\022\015\023" +
    "\046\024\041\025\040\026\042\027\045\033\047\001\001" +
    "\000\024\004\117\014\044\022\015\023\046\024\041\025" +
    "\040\026\042\027\045\033\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\004\030\005\171\007" +
    "\147\010\144\011\143\012\146\013\150\014\132\021\135" +
    "\022\015\023\046\024\041\025\040\026\042\027\045\030" +
    "\131\031\127\033\145\037\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\004\030\005\151\007\147\010\144\011\143\012\146\013" +
    "\150\014\132\021\135\022\015\023\046\024\041\025\040" +
    "\026\042\027\045\030\131\031\127\033\145\037\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\004\030\005\167\007\147\010\144\011\143\012\146\013" +
    "\150\014\132\021\135\022\015\023\046\024\041\025\040" +
    "\026\042\027\045\030\131\031\127\033\145\037\142\001" +
    "\001\000\050\004\030\005\166\007\147\010\144\011\143" +
    "\012\146\013\150\014\132\021\135\022\015\023\046\024" +
    "\041\025\040\026\042\027\045\030\131\031\127\033\145" +
    "\037\142\001\001\000\050\004\030\005\165\007\147\010" +
    "\144\011\143\012\146\013\150\014\132\021\135\022\015" +
    "\023\046\024\041\025\040\026\042\027\045\030\131\031" +
    "\127\033\145\037\142\001\001\000\050\004\030\005\164" +
    "\007\147\010\144\011\143\012\146\013\150\014\132\021" +
    "\135\022\015\023\046\024\041\025\040\026\042\027\045" +
    "\030\131\031\127\033\145\037\142\001\001\000\050\004" +
    "\030\005\163\007\147\010\144\011\143\012\146\013\150" +
    "\014\132\021\135\022\015\023\046\024\041\025\040\026" +
    "\042\027\045\030\131\031\127\033\145\037\142\001\001" +
    "\000\050\004\030\005\162\007\147\010\144\011\143\012" +
    "\146\013\150\014\132\021\135\022\015\023\046\024\041" +
    "\025\040\026\042\027\045\030\131\031\127\033\145\037" +
    "\142\001\001\000\050\004\030\005\161\007\147\010\144" +
    "\011\143\012\146\013\150\014\132\021\135\022\015\023" +
    "\046\024\041\025\040\026\042\027\045\030\131\031\127" +
    "\033\145\037\142\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\214\017\213\020\215" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\007\205\015\212\016\206\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\214\020" +
    "\221\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\004\240\014\044\022\015\023\046\024\041\025\040\026" +
    "\042\027\045\033\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoHT$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoHT$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoHT$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible

   public static Nodo raiz=new Nodo("raiz");
    public void syntax_error(Symbol s){
        TablaErrores.insertarError("Error Sintactico: "+s.value.toString()+" ",s.right,s.left);
        System.out.println(s.value.toString()+" Fila: " +s.right+", Columna: "+s.left);        
    }

    public void unrecovered_syntax_error(Symbol s){        
        TablaErrores.insertarError("Error Sintactico: "+s.value.toString()+" ",s.right,s.left);
        System.out.println(s.value.toString()+" Fila: " +s.right+", Columna: "+s.left);        
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoHT$actions {

//Codigo de acciones
      

  private final SintacticoHT parser;

  /** Constructor */
  CUP$SintacticoHT$actions(SintacticoHT parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoHT$do_action_part00000000(
    int                        CUP$SintacticoHT$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoHT$parser,
    java.util.Stack            CUP$SintacticoHT$stack,
    int                        CUP$SintacticoHT$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoHT$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoHT$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoHT$parser.done_parsing();
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= SENTENCIAS 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		
        System.out.println("Archivo finalizado");
        raiz=sent;
        
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CALCULAR ::= dolar calcular EXP dolar 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).value;
		RESULT=Fabrica.crearNodoCalcular(exp);
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("CALCULAR",5, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LISTA ::= dolar let id igual VALLISTA dolar 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).value;
		RESULT = Fabrica.crearNodoLista(id,val);
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("LISTA",1, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VALLISTA ::= CONCAT 
            {
              Nodo RESULT =null;
		int concatleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int concatright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo concat = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = Fabrica.crearNodoAsigLista(Constante.concat,Constante.concat,concat);
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("VALLISTA",2, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VALLISTA ::= cadena 
            {
              Nodo RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		                               
                                Nodo cad= Fabrica.crearNodoHoja(Constante.cadena,cadena,Constante.tcadena+"");
                                RESULT=Fabrica.crearNodoAsigLista(Constante.cadena,Constante.cadena,cad);
                            
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("VALLISTA",2, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VALLISTA ::= id 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		
                                Nodo identificador= Fabrica.crearNodoHoja(Constante.id,id+"");
                                RESULT = Fabrica.crearNodoAsigLista(Constante.id,Constante.id,identificador);
                            
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("VALLISTA",2, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VALLISTA ::= OPLISTA 
            {
              Nodo RESULT =null;
		int oplistaleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int oplistaright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo oplista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = oplista;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("VALLISTA",2, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VALLISTA ::= corchetea LPARLISTA corchetec 
            {
              Nodo RESULT =null;
		int lparlistaleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).left;
		int lparlistaright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).right;
		Nodo lparlista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).value;
		RESULT = lparlista;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("VALLISTA",2, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VALLISTA ::= LLAMADO 
            {
              Nodo RESULT =null;
		int llamadoleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int llamadoright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo llamado = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = llamado;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("VALLISTA",2, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LPARLISTA ::= LPARLISTA coma PARLISTA 
            {
              Nodo RESULT =null;
		int lparlistaleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)).left;
		int lparlistaright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)).right;
		Nodo lparlista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)).value;
		int parlistaleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int parlistaright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo parlista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = Fabrica.insertarAsigLista(lparlista,parlista);
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("LPARLISTA",4, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LPARLISTA ::= PARLISTA 
            {
              Nodo RESULT =null;
		int parlistaleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int parlistaright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo parlista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = Fabrica.crearNodoAsigLista(Constante.lasig,parlista.getValor(),parlista);
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("LPARLISTA",4, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PARLISTA ::= CALCULAR 
            {
              Nodo RESULT =null;
		int calcleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int calcright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo calc = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = calc;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("PARLISTA",11, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PARLISTA ::= caracter 
            {
              Nodo RESULT =null;
		int caracterleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int caracterright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		String caracter = (String)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(Constante.caracter,caracter,Constante.tcaracter+"");
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("PARLISTA",11, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PARLISTA ::= OTRA 
            {
              Nodo RESULT =null;
		int otraleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int otraright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo otra = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = otra;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("PARLISTA",11, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // OTRA ::= corchetea LVOTRA corchetec 
            {
              Nodo RESULT =null;
		int valotraleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).left;
		int valotraright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).right;
		Nodo valotra = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).value;
		RESULT = valotra;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("OTRA",12, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LVOTRA ::= LVOTRA coma VOTRA 
            {
              Nodo RESULT =null;
		int lvotraleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)).left;
		int lvotraright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)).right;
		Nodo lvotra = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)).value;
		int votraleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int votraright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo votra = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = Fabrica.insertarAsigLista(lvotra,votra);
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("LVOTRA",13, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LVOTRA ::= VOTRA 
            {
              Nodo RESULT =null;
		int votraleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int votraright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo votra = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = Fabrica.crearNodoAsigLista(Constante.asig,Constante.dim,votra);
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("LVOTRA",13, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VOTRA ::= CALCULAR 
            {
              Nodo RESULT =null;
		int calcleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int calcright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo calc = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = calc;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("VOTRA",14, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VOTRA ::= caracter 
            {
              Nodo RESULT =null;
		int caracterleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int caracterright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		String caracter = (String)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(Constante.caracter,caracter,Constante.tcaracter+"");
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("VOTRA",14, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SUCC ::= dolar succ VALFUN dolar 
            {
              Nodo RESULT =null;
		int valfunleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).left;
		int valfunright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).right;
		Nodo valfun = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).value;
		RESULT = Fabrica.crearNodoFunHK(Constante.succ,valfun);
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("SUCC",6, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECC ::= dolar decc VALFUN dolar 
            {
              Nodo RESULT =null;
		int valfunleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).left;
		int valfunright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).right;
		Nodo valfun = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).value;
		RESULT = Fabrica.crearNodoFunHK(Constante.decc,valfun);
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("DECC",7, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MIN ::= dolar min VALLISTA dolar 
            {
              Nodo RESULT =null;
		int valfunleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).left;
		int valfunright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).right;
		Nodo valfun = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).value;
		RESULT = Fabrica.crearNodoFunHK(Constante.min,valfun);
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("MIN",8, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MAX ::= dolar max VALLISTA dolar 
            {
              Nodo RESULT =null;
		int valfunleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).left;
		int valfunright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).right;
		Nodo valfun = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).value;
		RESULT = Fabrica.crearNodoFunHK(Constante.max,valfun);
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("MAX",9, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VALFUN ::= CALCULAR 
            {
              Nodo RESULT =null;
		int calcleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int calcright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo calc = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = calc;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("VALFUN",28, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VALFUN ::= ACCESO 
            {
              Nodo RESULT =null;
		int accesoleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int accesoright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo acceso = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = acceso;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("VALFUN",28, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VALFUN ::= OPLISTAEXP 
            {
              Nodo RESULT =null;
		int oplistaexpleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int oplistaexpright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo oplistaexp = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = oplistaexp; 
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("VALFUN",28, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VALFUN ::= CONCAT 
            {
              Nodo RESULT =null;
		int concatleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int concatright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo concat = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = concat;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("VALFUN",28, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VALFUN ::= cadena 
            {
              Nodo RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT=Fabrica.crearNodoHoja(Constante.cadena,cadena,Constante.tcadena+"");
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("VALFUN",28, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VALFUN ::= id 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(Constante.id,id);
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("VALFUN",28, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VALFUN ::= OPLISTA 
            {
              Nodo RESULT =null;
		int oplistaleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int oplistaright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo oplista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = oplista;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("VALFUN",28, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VALFUN ::= corchetea LPARLISTA corchetec 
            {
              Nodo RESULT =null;
		int lparlistaleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).left;
		int lparlistaright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).right;
		Nodo lparlista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).value;
		RESULT = lparlista;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("VALFUN",28, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VALFUN ::= LLAMADO 
            {
              Nodo RESULT =null;
		int llamadoleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int llamadoright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo llamado = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = llamado;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("VALFUN",28, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VALFUN ::= OPLENGUAJE 
            {
              Nodo RESULT =null;
		int oplenguajeleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int oplenguajeright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo oplenguaje = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = oplenguaje;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("VALFUN",28, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SUM ::= dolar sum VALLISTA dolar 
            {
              Nodo RESULT =null;
		int vallistaleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).left;
		int vallistaright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).right;
		Nodo vallista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).value;
		RESULT = Fabrica.crearNodoOpLista(Constante.sum,vallista);
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("SUM",22, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PRODUCT ::= dolar product VALLISTA dolar 
            {
              Nodo RESULT =null;
		int vallistaleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).left;
		int vallistaright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).right;
		Nodo vallista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).value;
		RESULT = Fabrica.crearNodoOpLista(Constante.product,vallista);
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("PRODUCT",23, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // REVERS ::= dolar revers VALLISTA dolar 
            {
              Nodo RESULT =null;
		int vallistaleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).left;
		int vallistaright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).right;
		Nodo vallista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).value;
		RESULT = Fabrica.crearNodoOpLista(Constante.revers,vallista);
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("REVERS",17, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IMPR ::= dolar impr VALLISTA dolar 
            {
              Nodo RESULT =null;
		int vallistaleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).left;
		int vallistaright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).right;
		Nodo vallista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).value;
		RESULT = Fabrica.crearNodoOpLista(Constante.impr,vallista);
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("IMPR",18, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PAR ::= dolar par VALLISTA dolar 
            {
              Nodo RESULT =null;
		int vallistaleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).left;
		int vallistaright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).right;
		Nodo vallista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).value;
		RESULT = Fabrica.crearNodoOpLista(Constante.par,vallista);
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("PAR",19, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ASC ::= dolar asc VALLISTA dolar 
            {
              Nodo RESULT =null;
		int vallistaleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).left;
		int vallistaright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).right;
		Nodo vallista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).value;
		RESULT = Fabrica.crearNodoOpLista(Constante.asc,vallista);
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("ASC",20, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DESC ::= dolar desc VALLISTA dolar 
            {
              Nodo RESULT =null;
		int vallistaleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).left;
		int vallistaright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).right;
		Nodo vallista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).value;
		RESULT = Fabrica.crearNodoOpLista(Constante.desc,vallista);
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("DESC",21, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LENGTH ::= dolar length VALLISTA dolar 
            {
              Nodo RESULT =null;
		int vallistaleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).left;
		int vallistaright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).right;
		Nodo vallista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).value;
		RESULT = Fabrica.crearNodoOpLista(Constante.length,vallista);
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("LENGTH",29, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CONCAT ::= VALLISTA concatenacion VALLISTA 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = Fabrica.crearNodoConcat(op1,op2);
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("CONCAT",10, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ACCESO ::= VALLISTA acceso CALCULAR 
            {
              Nodo RESULT =null;
		int vallistaleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)).left;
		int vallistaright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)).right;
		Nodo vallista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)).value;
		int calcularleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int calcularright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo calcular = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = Fabrica.crearNodoAcceso(vallista,calcular);
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("ACCESO",15, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPLISTA ::= REVERS 
            {
              Nodo RESULT =null;
		int reversleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int reversright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo revers = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = revers;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("OPLISTA",16, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPLISTA ::= IMPR 
            {
              Nodo RESULT =null;
		int imprleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int imprright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo impr = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = impr;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("OPLISTA",16, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPLISTA ::= PAR 
            {
              Nodo RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo par = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = par;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("OPLISTA",16, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPLISTA ::= ASC 
            {
              Nodo RESULT =null;
		int ascleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int ascright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo asc = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = asc;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("OPLISTA",16, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPLISTA ::= DESC 
            {
              Nodo RESULT =null;
		int descleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int descright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo desc = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = desc;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("OPLISTA",16, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIAS ::= LISTA 
            {
              Nodo RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo list = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = list;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",27, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIAS ::= CALCULAR 
            {
              Nodo RESULT =null;
		int calcleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int calcright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo calc = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = calc;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",27, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIAS ::= SUCC 
            {
              Nodo RESULT =null;
		int succleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int succright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo succ = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = succ;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",27, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIAS ::= DECC 
            {
              Nodo RESULT =null;
		int deccleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int deccright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo decc = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = decc;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",27, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIAS ::= MIN 
            {
              Nodo RESULT =null;
		int minleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int minright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo min = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = min;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",27, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIAS ::= MAX 
            {
              Nodo RESULT =null;
		int maxleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int maxright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo max = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = max;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",27, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIAS ::= CONCAT 
            {
              Nodo RESULT =null;
		int concatleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int concatright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo concat = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = concat;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",27, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIAS ::= ACCESO 
            {
              Nodo RESULT =null;
		int accesoleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int accesoright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo acceso = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = acceso;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",27, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIAS ::= SUM 
            {
              Nodo RESULT =null;
		int sumleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo sum = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = sum;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",27, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIAS ::= PRODUCT 
            {
              Nodo RESULT =null;
		int productleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int productright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo product = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = product;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",27, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIAS ::= REVERS 
            {
              Nodo RESULT =null;
		int reversleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int reversright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo revers = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = revers;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",27, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIAS ::= IMPR 
            {
              Nodo RESULT =null;
		int imprleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int imprright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo impr = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = impr;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",27, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIAS ::= PAR 
            {
              Nodo RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo par = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = par;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",27, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIAS ::= ASC 
            {
              Nodo RESULT =null;
		int ascleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int ascright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo asc = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = asc;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",27, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTENCIAS ::= DESC 
            {
              Nodo RESULT =null;
		int descleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int descright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo desc = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = desc;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",27, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTENCIAS ::= LENGTH 
            {
              Nodo RESULT =null;
		int lengthleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int lengthright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo length = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = length;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",27, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIAS ::= LLAMADO 
            {
              Nodo RESULT =null;
		int llamadoleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int llamadoright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo llamado = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = llamado;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",27, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIAS ::= porcentaje 
            {
              Nodo RESULT =null;
		RESULT = Fabrica.crearNodoHoja(Constante.porcentaje,Constante.porcentaje);
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",27, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LLAMADO ::= dolar id llavea LPFUN llavec dolar 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-4)).value;
		int lparfunleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)).left;
		int lparfunright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)).right;
		Nodo lparfun = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)).value;
		RESULT=Fabrica.crearNodoLlamado(id,lparfun);
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("LLAMADO",25, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LPFUN ::= LPFUN coma VALFUN 
            {
              Nodo RESULT =null;
		int lparleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)).left;
		int lparright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)).right;
		Nodo lpar = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo par = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT=Fabrica.insertarPar(lpar,par);
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("LPFUN",26, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LPFUN ::= VALFUN 
            {
              Nodo RESULT =null;
		int valfunleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int valfunright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo valfun = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT=Fabrica.crearNodoLPAR(valfun);
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("LPFUN",26, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LPFUN ::= 
            {
              Nodo RESULT =null;
		RESULT=Fabrica.crearNodoLPAR(null);
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("LPFUN",26, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP ::= EXP suma EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.suma,op1,op2);
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP ::= EXP resta EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.resta,op1,op2);
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP ::= EXP mult EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.mult,op1,op2);
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXP ::= EXP div EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.div,op1,op2);
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXP ::= EXP mod EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.mod,op1,op2);
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP ::= EXP sqrt EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.sqrt,op1,op2);
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP ::= EXP pot EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo op2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.pot,op1,op2);
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP ::= resta EXP 
            {
              Nodo RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo op1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT=Fabrica.crearNodoOperacion(Constante.resta,op1);
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP ::= parentesisa EXP parentesisc 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-1)).value;
		RESULT=exp;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.elementAt(CUP$SintacticoHT$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP ::= CALCULAR 
            {
              Nodo RESULT =null;
		int calcleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int calcright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo calc = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = calc;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP ::= SUCC 
            {
              Nodo RESULT =null;
		int succleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int succright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo succ = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = succ;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= DECC 
            {
              Nodo RESULT =null;
		int deccleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int deccright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo decc = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = decc;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= MIN 
            {
              Nodo RESULT =null;
		int minleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int minright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo min = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = min;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= MAX 
            {
              Nodo RESULT =null;
		int maxleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int maxright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo max = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = max;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= CONCAT 
            {
              Nodo RESULT =null;
		int concatleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int concatright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo concat = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = concat;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP ::= ACCESO 
            {
              Nodo RESULT =null;
		int accesoleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int accesoright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo acceso = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = acceso;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP ::= SUM 
            {
              Nodo RESULT =null;
		int sumleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo sum = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = sum;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP ::= PRODUCT 
            {
              Nodo RESULT =null;
		int productleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int productright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo product = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = product;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP ::= LENGTH 
            {
              Nodo RESULT =null;
		int lengthleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int lengthright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo length = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = length;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP ::= LLAMADO 
            {
              Nodo RESULT =null;
		int llamadoleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int llamadoright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo llamado = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = llamado;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP ::= num 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(Constante.num,num,Constante.tdecimal+"");
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP ::= caracter 
            {
              Nodo RESULT =null;
		int caracterleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int caracterright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		String caracter = (String)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(Constante.caracter,caracter,Constante.tcaracter+"");
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP ::= id 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = Fabrica.crearNodoHoja(Constante.id,id);
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP ::= porcentaje 
            {
              Nodo RESULT =null;
		RESULT = Fabrica.crearNodoHoja(Constante.porcentaje,Constante.porcentaje);
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OPLISTAEXP ::= SUM 
            {
              Nodo RESULT =null;
		int sumleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo sum = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = sum;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("OPLISTAEXP",30, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OPLISTAEXP ::= PRODUCT 
            {
              Nodo RESULT =null;
		int productleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int productright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo product = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = product;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("OPLISTAEXP",30, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OPLISTAEXP ::= LENGTH 
            {
              Nodo RESULT =null;
		int lengthleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int lengthright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo length = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = length;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("OPLISTAEXP",30, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OPLENGUAJE ::= SUCC 
            {
              Nodo RESULT =null;
		int succleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int succright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo succ = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = succ;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("OPLENGUAJE",24, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OPLENGUAJE ::= DECC 
            {
              Nodo RESULT =null;
		int deccleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int deccright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo decc = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = decc;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("OPLENGUAJE",24, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OPLENGUAJE ::= MIN 
            {
              Nodo RESULT =null;
		int minleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int minright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo min = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = min;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("OPLENGUAJE",24, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OPLENGUAJE ::= MAX 
            {
              Nodo RESULT =null;
		int maxleft = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).left;
		int maxright = ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()).right;
		Nodo max = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoHT$stack.peek()).value;
		RESULT = max;
              CUP$SintacticoHT$result = parser.getSymbolFactory().newSymbol("OPLENGUAJE",24, ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHT$stack.peek()), RESULT);
            }
          return CUP$SintacticoHT$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoHT$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoHT$do_action(
    int                        CUP$SintacticoHT$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoHT$parser,
    java.util.Stack            CUP$SintacticoHT$stack,
    int                        CUP$SintacticoHT$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoHT$do_action_part00000000(
                               CUP$SintacticoHT$act_num,
                               CUP$SintacticoHT$parser,
                               CUP$SintacticoHT$stack,
                               CUP$SintacticoHT$top);
    }
}

}
